#!/usr/bin/env python
# coding:utf-8
import threading
import time
import logging
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SmartSocketPool
from pyutil.program import metrics2 as metrics


from ss.abtest_new import VersionService

SERVICE_NAME = "data.abtest.versionmanager"


class ThriftVersionService(threading.local):

    def __init__(self, service_name=SERVICE_NAME, identity="test", timeout=0.23, conn_timeout=0.05):
        transport = SmartSocketPool.TSocketPool(service_name, identity, timeout, conn_timeout)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self.client = VersionService.Client(protocol)
        self.client.transport = transport
        self.service_name = service_name
        self.identity = identity
        self._init_metrics()

    def _init_metrics(self):
        metrics.define_timer("latency", prefix=SERVICE_NAME)
        metrics.define_tagkv('service', [self.service_name])
        metrics.define_tagkv('identity', [self.identity])
        metrics.define_counter("count", prefix=SERVICE_NAME)
        metrics.define_counter("fail", prefix=SERVICE_NAME)
        metrics.define_timer("latency", prefix=SERVICE_NAME)
        metrics.define_tagkv("lang", ["py"])
        metrics.define_tagkv("cmd", ["gv", "gv4a"])

    def _add_call_metric(self, cmd, latency, is_ok):
        tag = {"service": self.service_name, "identity": self.identity, "lang": "py", "cmd": cmd}
        metrics.emit_counter("count", "1", prefix=SERVICE_NAME, tagkv=tag)
        metrics.emit_timer("latency", latency*1000000, prefix=SERVICE_NAME, tagkv=tag)
        if not is_ok:
            metrics.emit_counter("fail", "1", prefix=SERVICE_NAME, tagkv=tag)

    def get_version_with_user_request(self, properties):
        t1, t2 = 0, 0
        try:
            self.client.transport.open()
            t1 = time.time()
            rsp = self.client.get_version_with_user_request(properties)
            t2 = time.time()
            self._add_call_metric("gv", (t2-t1), (rsp and rsp.err == 0))
            return rsp
        except Exception, ex:
            self._add_call_metric("gv", (t2 - t1), False)
            logging.warning(ex)
        finally:
            self.client.transport.close()

    def get_version_with_user_request_only_for_app_settings(self, properties):
        t1, t2 = 0, 0
        try:
            self.client.transport.open()
            t1 = time.time()
            rsp = self.client.get_version_with_user_request_only_for_app_settings(properties)
            t2 = time.time()
            self._add_call_metric("gv4a", (t2 - t1), (rsp and rsp.err == 0))
            return rsp
        except Exception, ex:
            self._add_call_metric("gv4a", (t2 - t1), False)
            logging.warning(ex)
        finally:
            self.client.transport.close()

# -*- coding: utf-8 -*-
import sys
import logging
import traceback
import json
import datetime

from django.conf import settings
from pyutil.net.get_local_ip import get_local_ip
from send_alarm import _send_alarm


class DjangoAlarmHandler(logging.Handler):
    """
    django site使用的logging handler
    与AlarmHandler相比，它会以用错误信息构造标题，并且带上request信息
    """

    def __init__(self, level=logging.ERROR):
        super(DjangoAlarmHandler, self).__init__(level=level)

    def emit(self, record):
        msg = {}
        msg['time'] = str(datetime.datetime.now())
        msg['host'] = get_local_ip()

        if isinstance(record.msg, unicode):
            msg['message'] = record.msg.encode('utf-8')
        else:
            msg['message'] = record.msg
        if sys.exc_info()[0] != None:
            backtrace_list = traceback.format_exception(*sys.exc_info())
            msg['key'] = '\n'.join(backtrace_list[:-1])
            msg['message'] = msg.get('message', '') + '\n' + '\n'.join(backtrace_list)

        try:
            request = record.request
            subject = '%s %s (%s IP): %s' % (
                settings.EMAIL_SUBJECT_PREFIX,
                record.levelname,
                (request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS and 'internal' or 'EXTERNAL'),
                record.msg
            )
            request.META.pop('HTTP_AUTHORIZATION', None)
            request_repr = repr(request)
        except:
            subject = '%s %s (%s IP): %s' % (
                '',
                record.levelname,
                'UNKNOWN',
                record.msg
            )
            request_repr = "request not available"
        msg['subject'] = subject
        msg['message'] = msg.get('message', '') + '\n' + request_repr

        try:
            msg['admins'] = [admin[1] for admin in settings.ADMINS]
        except:
            pass

        _send_alarm(json.dumps(msg))



import numpy as np
import scipy.spatial.distance as dist 
from pyutil.algorithm.wrap import dict_pairwise, dict2array_pairwise, dict2array
import pdb, time, math

@dict2array_pairwise
def cdist(XA, XB, metric, *args, **kwargs):
    """
    >>> cdist([{0:1, 1:1}, {0:0, 1:1}], [{0:0, 2:1}, {0:0, 1:1}], metric='cosine')
    [[1.0, 0.29289321881345254], [1.0, 0.0]]
    >>> cdist([{0:2, 1:1}, {0:0, 1:1}], [{0:4, 2:3}, {0:1, 1:2}], metric='cosine')
    [[0.2844582472000673, 0.20000000000000018], [1.0, 0.10557280900008414]]
    >>> cdist([{0:0, 1:1}, {4:0, 1:1}], [{0:4, 2:5}, {0:1, 1:2, 3:0}], metric='cosine')
    [[1.0, 0.10557280900008414], [1.0, 0.10557280900008414]]
    """
    return dist.cdist(XA, XB, metric, *args, **kwargs)

@dict2array_pairwise
def jaccard(XA, XB):
    return dist.cdist(XA, XB, 'jaccard')


@dict2array_pairwise
def dot(XA, XB):
    return XA.dot(XB.T)

@dict2array_pairwise
def cosine(XA, XB):
    return dist.cdist(XA, XB, 'cosine')

@dict2array_pairwise
def jaccard2(XA, XB):
    """
    >>> jaccard2([{0:1, 1:2}, {0:0.2, 1:0.8}], [{0:2, 1:3}, {0:0.2, 1:0.8}])
    [[0.19999999999999996, 0.5360824742268041], [0.7426470588235294, 0.0]]
    """
    st = time.time()
    XA_sum = np.square(XA).sum(1)
    suma_cost = time.time()-st 

    st = time.time()
    XB_sum = np.square(XB).sum(1)
    sumb_cost = time.time()-st 

    st = time.time()
    dot = XA.dot(XB.T)
    dot_cost = time.time()-st

    st = time.time()
    for i in range(dot.shape[0]): 
        for j in range(dot.shape[1]):
            dot[i, j] = 1 - dot[i, j] / (XA_sum[i]+XB_sum[j]-dot[i, j])
    cacl_cost = time.time()-st
    
    #print 'jaccard2_cost:', XA.shape, XB.shape, suma_cost, sumb_cost, dot_cost, cacl_cost
    return dot

if __name__ == '__main__':
    import doctest
    doctest.testmod()

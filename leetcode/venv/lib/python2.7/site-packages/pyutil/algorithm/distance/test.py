#run_test.py
import pdb
import distance_wrap as d

x = d.feature_list([d.feature({1:0.1, 2:0.2})])

x = d.feature({1:0.1, 2:0.2})
y = d.feature({1:0.1, 2:0.2})
y = d.feature({1:-0.1, 2:-0.2})
print d.cosine_pairwise(x, y)
print d.tanimoto_pairwise(x, y)



# swig distance use map
def cosine_pairwise(XA, XB):
    xa = {}
    for k, v in XA.iteritems():
        if type(k) not in (long, int):
            print 'hash', hash(k)
            xa[hash(k)] =v
        else:
            xa[k] =v
            
    xb = {}
    for k, v in XB.iteritems():
        if type(k) not in (long, int):
            print 'hash', hash(k)
            xb[hash(k)] =v
        else:
            xb[k] =v

    print xa
    xa = d.feature(xa)
    print xb
    xb = d.feature(xb)

    ret = d.cosine_pairwise(xa, xb)
    return ret

print cosine_pairwise({'11':1, 2:2}, {'1':0.1, 2:0.2})

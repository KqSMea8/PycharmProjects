import numpy as np
import pdb, time
import functools


_DEBUG = False

def dict2array(XA, XB=None):
    """
    >>> dict2array({'x':1, 'y':2}, {'y':3, 'z':4}) 
    (array([[ 2.,  1.,  0.]]), array([[ 3.,  0.,  4.]]))
    """
    XA_ = XA
    if type(XA_) is not list:
        XA_ = [XA_, ]

    XB_ = XB if XB else []
    if type(XB_) is not list:
        XB_ = [XB_, ]

    key2idx = {}
    idx = 0
    for x in XA_:
        if not x: continue
        for k, v in x.iteritems():
            if k not in key2idx:
                key2idx[k] = idx
                idx += 1
    for x in XB_:
        if not x: continue
        for k, v in x.iteritems():
            if k not in key2idx:
                key2idx[k] = idx
                idx += 1
    
    XA_a = np.zeros((len(XA_), idx)) 
    for i in range(len(XA_)):
        x = XA_[i]
        if not x: continue
        for k, v in x.iteritems():
            j = key2idx[k]
            XA_a[i, j] = v

    XB_a = np.zeros((len(XB_), idx)) 
    for i in range(len(XB_)):
        x = XB_[i]
        if not x: continue
        for k, v in x.iteritems():
            j = key2idx[k]
            XB_a[i, j] = v

    if XA and XB:
        return XA_a, XB_a 

    return XA_a 

def dict2array_pairwise(func):
    @functools.wraps(func)
    def wrapped(XA, XB, *args, **kwargs):
        if XA == None or XB == None:
            raise ValueError('empty input')

        st0 = time.time()
        XA_, XB_ = XA, XB
        if type(XA_) is not np.ndarray or type(XB_) is not np.ndarray:
            if type(XA) not in (dict, list) or type(XB) not in (dict, list):
                raise ValueError('wrong input type')
                
            st = time.time()
            XA_, XB_ = dict2array(XA_, XB_)
            wrap_cost = time.time()-st

        st = time.time()
        ret = func(XA_, XB_, *args, **kwargs)
        cacl_cost = time.time()-st
        total_cost = time.time()-st0

        if _DEBUG:
            print 'func %s shape_a %s shape_b %s tcost %.4f wcost %.4f ccost %.4f' % (func.__name__, XA_.shape, XB_.shape, total_cost, wrap_cost, cacl_cost)

        if type(XA) is dict and type(XB) is dict:
            return ret[0][0]
        elif type(XA) is dict:
            return [ret[0][i] for i in range(ret.shape[1])] 
        elif type(XB) is dict:
            return [ret[i][0] for i in range(ret.shape[0])]
        return ret.tolist()
    return wrapped



def dict_pairwise(func):
    @functools.wraps(func)
    def wrapped(XA, XB, *args, **kwargs):
        if XA == None or XB == None:
            raise ValueError('empty input')

        st0 = time.time()
        st=time.time()
        XA_ = XA if type(XA) is list else [XA,]
        XB_ = XB if type(XB) is list else [XB,]
        
        XA_ = [{} if x==None else x for x in XA_]
        XB_ = [{} if x==None else x for x in XB_]
        wrap_cost = time.time()-st

        st = time.time()
        ret = func(XA_, XB_, *args, **kwargs)
        cacl_cost = time.time()-st
        total_cost = time.time()-st

        if _DEBUG:
            print 'func %s len_a %s len_b %s tcost %.4f wcost %.4f ccost %.4f' % (func.__name__, len(XA_), len(XB_), total_cost, wrap_cost, cacl_cost)

        if type(XA) is dict and type(XB) is dict:
            return ret[0][0]
        elif type(XA) is dict:
            return ret[0] 
        elif type(XB) is dict:
            return [ret[i][0] for i in range(len(ret))]
        return ret
    return wrapped


def dict2feature(x, check=True):
    from distance.distance_wrap import feature_list, feature
    if check:
        x_ = {}
        for k, v in x.iteritems():
            if type(k) not in (long, int):
                x_[hash(k)] =v
            else:
                x_[k] =v
    else:
        x_ = x
    return feature(x_) 




if __name__ == "__main__":
    import doctest
    doctest.testmod()

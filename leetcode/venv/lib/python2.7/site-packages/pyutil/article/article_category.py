#!/usr/bin/env python
#coding:utf-8
import threading, logging
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import TSocketPool

from ss.article.category_classify import Category_Classify
from ss.article.category_classify.ttypes import Req
#import sys
#sys.path.insert(0, '/opt/home/mazhigang/commit_repos/ss_thrift_gen/ss/article/')  # [TBD]: To be removed
#from category_classify import Category_Classify
#from category_classify.ttypes import Req

class ThriftArticleCategory(threading.local):

    def __init__(self, host, port, timeout=None):
        transport = TSocketPool.TSocketPool(host, port)
        if timeout:
            transport.setTimeout(timeout * 1000)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self.client = Category_Classify.Client(protocol)
        self.client.transport = transport

    def classify(self, url, body, task_id, link_id):
        try:
            self.client.transport.open()
            req = Req(url=url, body=body, info={'task_id':str(task_id), 'link_id':str(link_id)})
            rsp = self.client.classify_article(req)
            return rsp
        finally:
            self.client.transport.close()

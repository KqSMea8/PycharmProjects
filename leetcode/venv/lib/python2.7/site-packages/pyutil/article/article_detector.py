#!/usr/bin/env python
#coding:utf-8
import threading, json
from datetime import datetime
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import TSocketPool
from pyutil.program.icrawler_util import str_dict
from ss.article.article_detector import Detect
from ss.article.article_detector.ttypes import ArticleDetectReq

class ThriftDetector(threading.local):

    def __init__(self, host, port):
        transport = TSocketPool.TSocketPool(host, port)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self.client = Detect.Client(protocol)
        self.client.transport = transport

    def detect(self, article, detect_fields=[], info={}):
        self.unicode2utf8(article)
        req = ArticleDetectReq(article=article, detect_fields=detect_fields, info=info)
        str_dict(req)
        try:
            self.client.transport.open()
            rsp = self.client.detect(req)
            for k, v in rsp.attributes.iteritems():
                rsp.attributes[k] = json.loads(v.decode('utf8'))
            for k, v in rsp.error_types.iteritems():
                rsp.error_types[k] = [s.decode('utf8') for s in v]
            for k, v in rsp.msg.iteritems():
                rsp.msg[k] = v.decode('utf8')
            return rsp.status, rsp.attributes, rsp.error_types, rsp.scores, rsp.msg
        finally:
            self.client.transport.close()

    def unicode2utf8(self, article):
        for k, v in article.iteritems():
            if isinstance(v, unicode):
                article[k] = v.encode('utf8')
            elif isinstance(v, datetime):
                article[k] = v.strftime('%Y-%m-%d %H:%M:%S')

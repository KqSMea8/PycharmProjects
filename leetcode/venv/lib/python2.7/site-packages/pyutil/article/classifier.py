#!/usr/bin/env python
import threading
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SocketPool
from pyutil.program.icrawler_util import str_dict
from ss.article.classifier import Classify
from ss.article.classifier.ttypes import Req, Rsp

class ThriftClassifier(threading.local):

    def __init__(self, host, port, timeout=None, conn_timeout=None):
        transport = SocketPool.TSocketPool(host, port, timeout, conn_timeout)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self.client = Classify.Client(protocol)
        self.client.transport = transport

    def predict(self, url, title, content, info):
        req = Req(url, title, content, info)
        str_dict(req)
        try:
            self.client.transport.open()
            rsp = self.client.predict(req)
            return rsp.status, rsp.labels, rsp.msg
        finally:
            self.client.transport.close()

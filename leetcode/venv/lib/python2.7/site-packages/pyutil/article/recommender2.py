#!/usr/bin/env python
#coding:utf-8
import threading, logging
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SocketPool, SocketPool3
from pyutil.program.icrawler_util import str_dict
from recommend_cython import Recommend
from thrift.Thrift import TException
from recommend_cython.ttypes import Req, Rsp
import socket, time

class ThriftRecommender(object):

    def __init__(self, host, port, timeout=1.0, conn_timeout=0.2, randomizer=None):
        self.socketpool = SocketPool3.TSocketPool(host, port, timeout, conn_timeout, randomizer=randomizer)
        transport = TTransport.TFramedTransport(self.socketpool)
        protocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)
        self.client = Recommend.Client(protocol)
        self.client.transport = transport

    def recommend(self, req):
        rsp = None
        try:
            ts = time.time()
            self.client.transport.open()
            rsp = self.client.get(req)
        except socket.error as e:
            logging.info('get recommend service timeout,%f,%s'%(time.time()-ts, e))
            self.client.transport.close()
            #just for close socket
            raise 
        except TException, e:
            pass
        except Exception, e:
            logging.exception('failed to call recommend service')
        return rsp

    def get_peer_addr(self):
        return "%s:%s" % (self.socketpool.host, self.socketpool.port)

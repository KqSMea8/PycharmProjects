from threading import local
import memcache

local_data = None 

def get_local_cache(conf):
    global local_data
    if not local_data:
        local_data = local()
    if not hasattr(local_data, 'cache_map'):
        local_data.cache_map = {}

    if isinstance(conf, str):
        conf = [conf,]
    #elif isinstance(conf, list):
    #    conf.sort()
    key = str(conf)
    cache = local_data.cache_map.get(key)
    if not cache:
        cache = memcache.Client(conf)
        local_data.cache_map[key] = cache
    return cache
    

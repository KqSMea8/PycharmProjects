# coding=utf8
from pyutil.program.lru import ExpiringLRUCache


class LruMcCache(object):
    """
    本地 LRU cache + 远程 MC cache
    """

    def __init__(self, mc_cache, size=1000, timeout=60):
        """
        :param mc_cache: mc cache, instance of pyutil.cache.cache_class.CacheClass
        :param size:
        :param timeout:
        """
        self.cache = mc_cache
        self.lru = ExpiringLRUCache(size, timeout)

    def set_multi(self, data):
        """
        设置多个数据
        :param data: dict, {id: item}
        """
        self.cache.set_multi(data)
        for id, item in data.iteritems():
            self.lru.set(id, item)

    def get_multi_as_dict(self, item_ids, use_cache=True, cache_only=False):
        datas = {}
        not_hits = set()
        for id in item_ids:
            data = self.lru.get(id)
            if data:
                datas[id] = data
            else:
                not_hits.add(id)
        remains = self.cache.get_multi_as_dict(not_hits, use_cache, cache_only)
        self.lru.mset(remains)
        datas.update(remains)
        return datas

    def delete(self, item_id):
        self.lru.invalidate(item_id)
        self.cache.delete(item_id)

    def set(self, item_id, item):
        self.lru.set(item_id, item)
        self.cache.set(item_id, item)

    def get(self, item_id, use_cache=True, cache_only=False):
        data = self.lru.get(item_id)
        if data:
            return data
        data = self.cache.get(item_id, use_cache, cache_only)
        self.lru.set(item_id, data)
        return data

    def mget(self, item_ids, use_cache=True, cache_only=False):
        return self.get_multi_as_dict(item_ids, use_cache, cache_only)

# coding: utf-8
'''城市相关的公共函数
'''

import os
city2code = None
code2city = None
code2province = {}
province2code = {}

def gen_province(location_json):
    global code2province, province2code
    location = location_json["location"]
    china = location["coutryregion"][0]
    for s in china["state"]:
        code = int(s["code"])
        code2province[code] = s["name"]
        province2code[s["name"]] = code

def init():
    global city2code, code2city
    if city2code and code2city:
        return

    from location import get_location_json
    gen_province(get_location_json())

    import json
    from location import get_city_tuple
    city_tuple = get_city_tuple()
    code2city = {x[1]: x[0] for x in city_tuple}
    city2code = dict(city_tuple)
    # 2010年襄樊更名为襄阳.为保持兼容性,襄樊和襄阳返回同样city_code
    city2code[u'襄樊'] = 420600

def get_code2city():
    '''
    >>> len(get_code2city())
    370
    '''
    init()
    return code2city

def get_city_code(name):
    u'''
    >>> get_city_code('酒泉')
    620900
    >>> get_city_code(u'酒泉')
    620900
    >>> get_city_code(u'三亚')
    460200
    >>> get_city_code(u'襄阳')
    420600
    >>> get_city_code(u'襄樊')
    420600
    >>> get_city_code('xx')
    '''
    if not name:
        return None

    if isinstance(name, str):
        name = name.decode('utf-8')

    if name == u'未知':
        return -1

    init()
    return city2code.get(name)

def get_city_name(code):
    u'''
    >>> get_city_name(620900) == u'酒泉'
    True
    >>> print get_city_name('620900')
    酒泉
    >>> print get_city_name(u'110000')
    北京
    >>> print get_city_name('460200')
    三亚
    >>> print get_city_name('420600')
    襄阳
    >>> get_city_name('1')
    >>> get_city_name(None)
    '''
    if not code:
        return None

    if code < 0:
        return u'未知'


    init()
    return code2city.get(int(code))

def get_city_list():
    '''
    >>> len(get_city_list())
    371
    '''
    init()
    return city2code.keys()

def get_province_list():
    '''
    >>> len(get_province_list())
    34
    '''
    init()
    return [t[1] for t in sorted(code2province.items())]

def get_province_code(city_code):
    """ city_code的前缀就是province_code.
    return str

    >>> get_province_code(152601)
    '15'
    >>> get_province_code('152601')
    '15'
    >>> get_province_code('1526011')
    '-1'
    >>> get_province_code(10)
    '-1'
    """
    city_code = str(city_code)
    if len(city_code) != 6:
        return '-1'
    return city_code[:2]

def get_province_code_by_name(name):
    u'''
    >>> get_province_code_by_name('北京')
    11
    >>> get_province_code_by_name(u'四川')
    51
    >>> get_province_code_by_name(u'xx')
    '''
    init()
    if isinstance(name, str):
        name = name.decode('utf-8')
    return province2code.get(name)

def get_province_name(code):
    u'''
    >>> get_province_name(51) == u'四川'
    True
    >>> get_province_name('51') == u'四川'
    True
    >>> get_province_name('1')
    >>> get_province_name(None)
    '''
    init()
    return None if code is None else code2province.get(int(code))

def get_area_name(code):
    u'''
    >>> get_area_name(51) == u'四川'
    True
    >>> get_area_name(620900) == u'酒泉'
    True
    '''
    return get_province_name(code) or get_city_name(code)

def get_area_code(name):
    u'''
    >>> get_area_code('四川')
    51
    >>> get_area_code(u'北京')
    11
    >>> get_area_code(u'成都')
    510100
    '''
    return get_province_code_by_name(name) or get_city_code(name)

code2region = {}
region2code = {}
def init_region():
    import os, csv
    global  code2region, region2code
    if code2region and region2code:
        return
    CITY_CODE_IND = 1
    REGION_NAME_IND = 5
    REGION_CODE_IND = 2
    encoding = 'utf-8'
    with open(os.path.join(os.path.dirname(__file__), 'city_info.csv'), 'r') as csv_f:
        csv_reader = csv.reader(csv_f, dialect=csv.excel)
        for row in csv_reader:
            try:
                city_code = int(row[CITY_CODE_IND])
                region_code = int(row[REGION_CODE_IND])
                if city_code and region_code:
                    region_name = row[REGION_NAME_IND].decode(encoding)
                    city_tuples = region2code.setdefault(region_name, [])
                    city_tuples.append((city_code, region_code))
                    code2region[region_code] = region_name
            except Exception, e:
                pass


def get_region_code(city_code_in, region_name):
    u'''
    >>> get_region_code(111, '') is None
    True
    >>> get_region_code(111, 'xxxx') is None
    True
    >>> get_region_code(445100, u'潮安县')
    445121
    >>> get_region_code(445100, u'潮安县111') is None
    True
    '''

    init_region()
    if not region_name:
        return None
    if isinstance(region_name, str):
        region_name = region_name.decode('utf-8')
    for city_code, region_code in region2code.get(region_name, []):
        if city_code_in == city_code:
            return region_code
    return None

def get_region_name(region_code):
    u'''
    >>> get_region_name(12345) is None
    True
    >>> get_region_name(441781) == u'阳春市'
    True
    '''

    init_region()
    return code2region.get(region_code, None)



# _*_ coding: utf-8 _*_
import re
import csv

# from pyutil.city import get_province_tuple
from location import get_city_tuple
from location import _get_coutry, init, MUNICIPALITY

from pprint import pprint

if __name__ == '__main__':
    print '此脚本已废弃，仅供测试使用，请不要使用该脚本～'
    print '请使用新脚本生成城市代码：genCityCode.py'
    exit()

    city_info = open('city_info.csv', 'wb')

    init()
    china = _get_coutry(1)
    provinces = dict([(c['code'], c) for c in china.get('state', [])])

    city_info.write('\xEF\xBB\xBF')

    writer = csv.writer(city_info, dialect=csv.excel)
    def get_cities(province):
        cities = state.get('city', [])
        return cities

    def get_region(city):
        return dict([(c['code'], c) for c in city.get('region', [])])

    def _encode(v):
        #if v == u'郫　县':
        #    import ipdb; ipdb.set_trace()
        v = re.sub(u'\u3000', '', v)
        v = v.encode('utf-8')
        return v

    def fix_city_code(province):
        code = '%s0000' % (province['code'])
        return code

    def fix_region_code(province, city):
        code = '%s%s%s' % (
            province['code'],
            '00',
            '0'+city['code'] if len(city['code'])==1 else city['code'],
        )
        return code

    for province in provinces.values():
        if province['name'] in MUNICIPALITY:
            cities = province.get('city', [])
            for city in cities:
                row = [
                    province['code'],
                    fix_city_code(province),
                    fix_region_code(province, city),
                    province['name'],province['name'],city['name'],
                ]
                writer.writerow([_encode(r) for r in row])
            continue
            if not cities:
                import ipdb; ipdb.set_trace()

        cities = province.get('city', [])
        if not cities:
            row = [
                province['code'],'','',
                province['name'],'','',
            ]
            writer.writerow([_encode(r) for r in row])
            continue

        for city in cities:
            code = '%s%s00' % (province['code'], '0'+city['code'] if len(city['code'])==1 else city['code'])
            city['code'] = code
            regions = city.get('region', [])
            if isinstance(regions, dict):
                regions = [regions]

            if not regions:
                row = [
                    province['code'],city['code'],'',
                    province['name'],city['name'],'',
                ]
                writer.writerow([_encode(r) for r in row])
                continue

            for region in regions:
                try:
                    row = [
                        province['code'], city['code'], region['code'],
                        province['name'], city['name'], region['name'],
                    ]
                    writer.writerow([_encode(r) for r in row])
                except Exception as exc:
                    import ipdb; ipdb.set_trace()

            if not regions:
                import ipdb; ipdb.set_trace()



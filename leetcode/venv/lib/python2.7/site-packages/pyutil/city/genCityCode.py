# coding: utf-8

if __name__ == '__main__':

    SCRIPT_INFO = r'''**********脚本说明**********

该脚本依赖的文件：
1. 数据源文件： city_code_raw ，可从政府部门等网站获取，每行包含code与其对应名字
2. 之前的城市信息文件： location.json ，包含外国的城市信息，给予保留
3. 该文件中的 GANGAOTAI 数据，因 city_code_raw 中不含港澳台数据，沿用之前的数据

该脚本生成的文件：
1. city_code_raw.gen 单纯的处理后的code与name对应的文件
2. city_code_raw.csv 处理后的csv文件，确认无误后替换原先的 city_info.csv 文件
3. location_new.json 处理后的json文件，确认无误后替换原先的 location.json 文件
4. location_old.json 处理前的json文件，若location.json文件格式与输出的不统一，提供格式统一的该文件用于与新生成的文件做diff

生成城市区划代码处理细节：
1. 所有省、市、区县的名字去掉省、市、县、区、旗、自治、xx族等修饰性词语，但至少保留2个字的长度，如“城区”会保留“区”字，“鄂温克族自治旗”处理后变为“鄂温克族”等。
2. 政府提供的数据中没有台湾、香港、澳门的具体数据，保留原有城市区划代码数据。
3. 北京、天津、上海、重庆4个直辖市其区县级代码区分了区与县，即代码为xx01xx与xx02xx，但不存在xx0100与xx0200这类代码，其省和市名字与代码相同，都为xx0000，处理的时候需要注意，如“11,110000,110101,北京,北京,东城”，“12,120000,120225,天津,天津,蓟县”。
4. 河南、湖北、海南、新疆4个省包含省（自治区）直辖县级行政区划，对于这部分区县因为没有其对应的市，处理的时候将其名字与代码作为其对应的市，这会造成其市级代码最后两位不是0，处理的时候需要注意，如“41,419001,419001,河南,济源,济源”，“42,429021,429021,湖北,神农架,神农架”。
5. 宣化、临夏、和田、伊宁4个区县在同一市下面同时存在市（区）与县，如“130705 宣化区”与“130721 宣化县”，“622901 临夏市”与“622921 临夏县”，对其默认命中县，因此“宣化区”与“临夏市”等保留原有名字，而“宣化县”与“临夏县”等会删去其“县”字而成为“宣化”与“临夏”等。

AUTHOR: hujianxiao@bytedance.com
DATE: 2016-11-09
'''

    SPEC_CASE = [
        ('白云鄂博矿区', '白云鄂博'),
        ('鹰手营子矿区', '鹰手营子'),
        ('神农架林区', '神农架'),
        ('宣化区', '宣化区'),
        ('临夏市', '临夏市'),
        ('和田市', '和田市'),
        ('伊宁市', '伊宁市'),
    ]

    DEL_TABLE = [
        '特别行政区',
        '自治区',
        '自治州',
        '自治县',
        '自治旗',
        '联合旗',
        '地区',
        '新区',
        '省',
        '市',
        '盟',
        '县',
        '区',
        '旗',
    ]

    ETHNICS = [
        '满族',
        '回族',
        '土族',
        '藏族',
        '白族',
        '苗族',
        '彝族',
        '侗族',
        '怒族',
        '水族',
        '羌族',
        '傣族',
        '瑶族',
        '佤族',
        '畲族',
        '壮族',
        '各族',
        '黎族',
        '蒙古族',
        '蒙古',
        '土家族',
        '撒拉族',
        '傈僳族',
        '裕固族',
        '东乡族',
        '保安族',
        '独龙族',
        '布依族',
        '仡佬族',
        '普米族',
        '景颇族',
        '锡伯族',
        '锡伯',
        '哈尼族',
        '拉祜族',
        '纳西族',
        '朝鲜族',
        '仫佬族',
        '毛南族',
        '布朗族',
        '维吾尔族',
        '维吾尔',
        '哈萨克族',
        '哈萨克',
        '塔吉克族',
        '塔吉克',
        '达斡尔族',
        '柯尔克孜',
    ]

    GANGAOTAI = '''71,710000,710001,台湾,台湾,台北市\r
71,710000,710002,台湾,台湾,高雄市\r
71,710000,710003,台湾,台湾,基隆\r
71,710000,710004,台湾,台湾,台中市\r
71,710000,710005,台湾,台湾,台南市\r
71,710000,710006,台湾,台湾,新竹市\r
71,710000,710007,台湾,台湾,嘉义市\r
71,710000,710008,台湾,台湾,台北\r
71,710000,710009,台湾,台湾,宜兰\r
71,710000,710010,台湾,台湾,桃园\r
71,710000,710011,台湾,台湾,新竹\r
71,710000,710012,台湾,台湾,苗栗\r
71,710000,710013,台湾,台湾,台中\r
71,710000,710014,台湾,台湾,彰化\r
71,710000,710015,台湾,台湾,南投\r
71,710000,710016,台湾,台湾,云林\r
71,710000,710017,台湾,台湾,嘉义\r
71,710000,710018,台湾,台湾,台南\r
71,710000,710019,台湾,台湾,高雄\r
71,710000,710020,台湾,台湾,屏东\r
71,710000,710021,台湾,台湾,澎湖\r
71,710000,710022,台湾,台湾,台东\r
71,710000,710023,台湾,台湾,花莲\r
81,810000,8100HCW,香港,香港,中西\r
81,810000,8100HEA,香港,香港,东区\r
81,810000,8100HSO,香港,香港,南区\r
81,810000,8100HWC,香港,香港,湾仔\r
81,810000,8100KKC,香港,香港,九龙城\r
81,810000,8100KKT,香港,香港,观塘\r
81,810000,8100KSS,香港,香港,深水埗\r
81,810000,8100KWT,香港,香港,黄大仙\r
81,810000,8100KYT,香港,香港,油尖旺\r
81,810000,8100NIS,香港,香港,离岛\r
81,810000,8100NKT,香港,香港,葵青\r
81,810000,8100NNO,香港,香港,北区\r
81,810000,8100NSK,香港,香港,西贡\r
81,810000,8100NST,香港,香港,沙田\r
81,810000,8100NTM,香港,香港,屯门\r
81,810000,8100NTP,香港,香港,大埔\r
81,810000,8100NTW,香港,香港,荃湾\r
81,810000,8100NYL,香港,香港,元朗\r
82,820000,8200ANT,澳门,澳门,圣安多尼堂\r
82,820000,8200CAT,澳门,澳门,大堂\r
82,820000,8200CLN,澳门,澳门,路环\r
82,820000,8200LAW,澳门,澳门,望德堂\r
82,820000,8200LAZ,澳门,澳门,风顺堂\r
82,820000,8200OLF,澳门,澳门,花地玛堂\r
82,820000,8200TPA,澳门,澳门,氹仔\r
'''

    print SCRIPT_INFO

    import re
    import json

    code_table = []
    code_map = {}

    f = open("city_code_raw", "r")

    for i in f.readlines():
        try:
            code, name = i.split()
            code = int(code)
            spec = False
            for sp in SPEC_CASE:
                if name == sp[0]:
                    print name
                    name = sp[1]
                    spec = True
                    break
            if not spec:
                for r in DEL_TABLE:
                    if re.match(r'.*%s$' % r, name):
                        name = name[:max(len(name)-len(r), 6)]
                while True:
                    matched = False
                    for eth in ETHNICS:
                        result = re.match(r'(.*)%s$' % eth, name)
                        if result and len(result.group(1)) >= 6:
                            name = name[:len(name)-len(eth)]
                            matched = True
                            break
                    if not matched:
                        break
            if len(name) > 6:
                print name
            code_table.append((code, name))
            code_map[code] = name
        except Exception as e:
            print e
            print 'failed proress line:', i
            exit()

    f.close()

    f = open('location.json', 'r')
    location_map = json.load(f)
    f.close()

    f = open('location_old.json', 'w')
    s = json.dumps(location_map, indent=4, separators=(',', ': ')).replace('    ', '\t')
    s = s.decode('unicode-escape')
    f.write(s.encode('utf-8'))
    f.close()

    code_table.sort()

    f = open('city_code_raw.gen', 'w')
    for code, city in code_table:
        f.write("%d %s\r\n" % (code, city))
        if code % 10000 == 0:
            code_map[code / 10000] = city
    f.close()

    #code_name_table = []
    province_map = {}
    city_map = {}

    f = open('city_code_raw.csv', 'w')
    ZHIXIASHI = [11, 12, 31, 50]
    last_code = 0
    last_name = ''
    for code, name in code_table:
        if (code / 100 % 100 == 90 or (code % 10000 and not code % 100)) and last_code % 10000 and not last_code % 100:  # 上一个市没有区县
            pcode = last_code / 10000
            pname = code_map[pcode]
            info = (pcode, last_code, last_code, pname, last_name, last_name)
            f.write("%d,%d,%d,%s,%s,%s\r\n" % info)
            #code_name_table.append(info)
        if code % 100:
            pcode = code / 10000
            pname = code_map[pcode]
            if pcode in ZHIXIASHI:
                ccode = pcode * 10000
                cname = pname
            elif code / 100 % 100 == 90:  # 省直辖县级行政区划
                ccode = code
                cname = code_map[ccode]
            else:
                ccode = code / 100 * 100
                cname = code_map[ccode]
            info = (pcode, ccode, code, pname, cname, name)
            f.write("%d,%d,%d,%s,%s,%s\r\n" % info)
            #code_name_table.append(info)

        if not code % 10000:
            province_map[code/10000] = {'city': [], 'code': str(code/10000), 'name': name}
        elif not code % 100:
            city_map[code] = {'region': [], 'code': str(code/100%100), 'name': name}
            province_map[code/10000]['city'].append(city_map[code])
        elif code / 10000 in ZHIXIASHI or code / 100 % 100 == 90:
            province_map[code/10000]['city'].append({'code': str(code%10000), 'name': name})
        else:
            city_map[code/100*100]['region'].append({'code': str(code), 'name': name})

        last_code = code
        last_name = name
    f.write(GANGAOTAI)
    f.close()

    for province in location_map['location']['coutryregion'][0]['state']:
        if int(province['code']) < 70:
            province['city'] = province_map[int(province['code'])]['city']

    f = open('location_new.json', 'w')
    s = json.dumps(location_map, indent=4, separators=(',', ': ')).replace('    ', '\t')
    s = s.decode('unicode-escape')
    f.write(s.encode('utf-8'))
    f.close()

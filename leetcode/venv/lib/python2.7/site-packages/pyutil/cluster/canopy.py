# -*- coding: utf-8 -*-
"""
Canopy: http://en.wikipedia.org/wiki/Canopy_clustering_algorithm
"""

# Author: Chentao <chentao@gmail.com>
#
# License: BSD

import numpy as np

from sklearn.base import BaseEstimator, ClusterMixin


def euclidean(u, v):
    x = u - v
    xx = np.sum(x * x)
    return np.sqrt(xx)


class Canopy(BaseEstimator, ClusterMixin):

    def __init__(self, t1, t2, metric=None):
        self.t1 = t1 
        self.t2 = t2
        if not metric:
            self.metric = euclidean
        else:
            self.metric = metric

    def fit(self, X, **params):
        left = [(i, X[i]) for i in range(len(X))]
        clusters = {}
        labels = [[] for i in range(len(X))] 
        while left:
            i1, x = left.pop(0)
            cid = i1
            c = [i1,]
            labels[i1].append(cid)
            clusters[cid] = c 
            left_ = []
            for i2, l in left:
                d = self.metric(x, l)
                if d < self.t1:
                    c.append(i2) 
                    labels[i2].append(cid)
                if d < self.t2:
                    continue 
                left_.append((i2, l))
            left = left_        

        self.labels_ = labels 
        self.clusters_ = clusters 
        return clusters, labels


if __name__ == '__main__':
    cluster = Canopy(t1=1.5, t2=1.5, metric=euclidean)
    clusters, labels = cluster.fit(X=np.array([
                          [1,1],
                          [2,2],
                          [1,2],
                          [2,1],
                          [3,3],
                          [30,30],
                        ]))
    print clusters
    print labels

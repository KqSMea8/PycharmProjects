#!/usr/bin/env python
#coding: utf-8

import socket
hostname = socket.gethostbyname(socket.gethostname())

zookeeper_cluster = {
        "zk_common_main" : [
            ("10.4.30.135",2181),
            ("10.4.29.122",2181),
            ("10.4.29.211",2181),
            ("10.4.31.26",2181),
            ("10.4.31.55",2181),
            ],

        "zk_hadoop2_moji" : [
            ("10.4.161.2", 2181),
            ("10.4.161.4", 2181),
            ("10.4.161.66", 2181),
            ],

        "zk_hbase_off" : [
            ("10.4.16.58", 2181),
            ("10.4.16.60", 2181),
            ("10.4.16.61", 2181),
            ("10.4.16.78", 2181),
            ("10.4.16.79", 2181),
            ],

        "zk_kafka_orz" : [
            ("10.4.30.135",2185),
            ("10.4.29.122",2185),
            ("10.4.29.211",2185),
            ("10.4.31.26",2185),
            ("10.4.31.55",2185),
            ],
        }


def calc_node_to_cluster(cluster_info):
    node_to_cluster = {}
    for k, v in cluster_info.iteritems():
        cluster = k
        for node_info in v:
            host, port = node_info
            node = "%s:%s" % (host, port)
            node_to_cluster[node] = cluster

    return node_to_cluster

node_to_cluster = None

def get_or_create_node_to_cluster():
    global node_to_cluster
    if not node_to_cluster:
        node_to_cluster = calc_node_to_cluster(zookeeper_cluster)
    return node_to_cluster


def get_cluster_by_host_port(host, port):
    node_to_cluster_info = get_or_create_node_to_cluster()
    node_info = "%s:%s" % (host, port)
    cluster = node_to_cluster_info.get(node_info, "unknown")
    return cluster

def get_cluster_by_port(port):
    node_to_cluster_info = get_or_create_node_to_cluster()
    node_info = "%s:%s" % (hostname, port)
    cluster = node_to_cluster_info.get(node_info, "unknown")
    return cluster


def main():
    print get_cluster_by_host_port("10.4.16.58", 2181)

if __name__ == "__main__":
    main()


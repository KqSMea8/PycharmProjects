#coding=utf8
import sys
sys.path.append('/opt/tiger/ss_lib/python_package/lib/python2.7/site-packages')

import logging
import msgpack
import os
import threading
import time

from pyutil.consul.discovery import ServiceDiscovery
from pyutil.consul import defaults
from pyutil.consul import is_python3, is_perf_test, add_perf_prefix

agent_host = defaults.agent_host
agent_port = defaults.agent_port

def send_metrics_lite(name, type, value):
    try:
        from pyutil.program.metrics2 import udp_socket, server_address
        req = ['emit', type, name, str(value), "lang=py", ""]
        udp_socket.sendto(msgpack.dumps(req), server_address)
    except Exception as e:
        # logging.error(str(e))
        pass

def new_sd():
    try:
        return ServiceDiscovery(agent_host=agent_host, agent_port=agent_port)
    except Exception:
        send_metrics_lite('inf.consul.conf.translate.error', 'counter', 1)
        logging.exception('Failed to initialize service discovery')
    finally:
        send_metrics_lite('inf.consul.conf.translate.throughput', 'counter', 1)

global sd, sdlock
sd = new_sd()
sdlock = threading.RLock()

def get_sd():
    global sd
    if sd:
        return sd

    with sdlock:
        if sd:
            return sd

        _sd = new_sd()
        if _sd:
            sd = _sd
            return sd

    raise Exception("Failed to reinitialize service discovery")

def translate_one(server, need_tag=False, raises=False, cb=None, sd=None):
    if is_perf_test:
        server = add_perf_prefix(server)
    host, port = server if isinstance(server, tuple) else (server, 0)
    try:
        if not sd:
            sd = get_sd()
        xs = sd.translate_name(host, cb)
        if need_tag:
            return xs
        return [(x[0], x[1]) for x in xs]
    except Exception as e:
        if is_python3:
            noexist = isinstance(getattr(e, "errors", None), ValueError) and str(e) == "No JSON object could be decoded"
        else:
            noexist = isinstance(getattr(e, "errors", None), ValueError) and e.message == "No JSON object could be decoded"
        if not noexist:
            send_metrics_lite('inf.consul.conf.translate.error', 'counter', 1)

        if raises:
            raise

        logging.warn(str(e))
        return [server]
    finally:
        send_metrics_lite('inf.consul.conf.translate.throughput', 'counter', 1)

# translate list of servers by applying translator on each item
# each item should be (host, port)
def translate(servers):
    try:
        xs = map(translate_one, servers)
        result = [y for ys in xs for y in ys]
        logging.info("Translated %s -> %s" % (servers, result))
        return result
    except Exception as e:
        # failsafe, in case break contemporary clients
        # TODO: this should be an error, as soon as naming service was brought online
        logging.error("Failed to translate %s: %s" % (servers, str(e)))
        return servers

LAST_RESORT_ARCHIVE = '/opt/tiger/dist/consul_conf_snapshot.zip'

def translate_last_resort(trans, conf_name):
    if conf_name is None:
        raise Exception('No last resort available since conf_name not specified')
    from zipfile import ZipFile
    import os
    abs_conf_name = os.path.abspath(conf_name)
    abs_conf_name = abs_conf_name.replace('/data00', '/opt')
    abs_conf_name = abs_conf_name.replace('/data12', '/opt')
    with ZipFile(LAST_RESORT_ARCHIVE, 'r') as z:
        with z.open(abs_conf_name[1:]) as f:
            for line in f:
                line = line.strip()
                pos = line.find(' ')
                if pos < 0:
                    # this means value is empty, use it anyway
                    pos = len(line)
                key, value = line[0:pos], line[pos+1:]
                if key in trans:
                    trans[key] = value
    return trans

local_dc = None

def try_dummy_translate(val):
    global local_dc
    if local_dc is None:
        return False, None
    if val.find('consul:dummy?') != 0:
        return False, None
    if is_python3:
        from urllib import parse
        url = parse.urlparse(val)
        qs = parse.parse_qs(url.query, keep_blank_values=True)
    else:
        from urlparse import urlparse, parse_qs
        url = urlparse(val)
        qs = parse_qs(url.query, keep_blank_values=True)
    key = 'enforce_%s' % local_dc
    if key in qs:
        return True, qs[key][0]
    else:
        return False, None

def post_check(trans, conf_name):
    use_backup = {}
    checked = {}
    for key in trans:
        if trans[key].find('consul:') == 0:
            # this means no result, use backup
            use_backup[key] = trans[key]
            logging.warn('No result: %s  %s' % (key, trans[key]))
            send_metrics_lite('inf.consul.conf.translate.noresult', 'counter', 1)
        elif trans[key].endswith(':0') or trans[key].find(':0,') > -1:
            use_backup[key] = trans[key]
            logging.warn('Abnormal result: %s  %s' % (key, trans[key]))
            send_metrics_lite('inf.consul.conf.translate.abnormal', 'counter', 1)
        else:
            checked[key] = trans[key]
    if len(use_backup) > 0:
        try:
            use_backup = translate_last_resort(use_backup, conf_name)
            # if still no result, there is nothing to be done
            for key in use_backup:
                checked[key] = use_backup[key]
        except Exception as e:
            logging.warn('Failed to use backup for no result: %s' % str(e))
    return checked

def _check_parsed_trans(trans):
    succ_trans = {}
    failed_trans = {}

    for k, v in trans.iteritems():
        if v.startswith("consul:"):
            failed_trans[k] = v
        else:
            succ_trans[k] = v

    return succ_trans, failed_trans

def _translate_conf(trans):
    try:
        retry = int(os.environ.get("RETRY_CONSUL_TRANSLATE_CONF", 0))
    except ValueError:
        retry = 0
    else:
        retry = min(retry, 2)

    for i in range(retry+1):
        try:
            return get_sd().translate_conf(trans)
        except Exception:
            logging.exception("Failed to translate conf: %s", trans)

            if i == retry:
                raise

            time.sleep(0.05)

    raise Exception("Unreachable code")

def translate_conf(conf_dict, conf_name=None):
    trans = {}
    result = {}
    for key in conf_dict:
        val = conf_dict[key]
        if val.find('consul:') == 0:
            ok, tresult = try_dummy_translate(val)
            if ok:
                result[key] = tresult
            else:
                trans[key] = val
        else:
            result[key] = val
    if len(trans) == 0:
        return result
    success = False
    st = time.time()
    try:
        send_metrics_lite('inf.consul.conf.translate.items', 'counter', len(trans))
        trans = _translate_conf(trans)
        trans = post_check(trans, conf_name)
        success = True
    except Exception:
        logging.exception("Failed to translate")

        # Raises for generating snapshot .zip file.
        if os.environ.get("RAISE_TRANSLATE_EXCEPTION", "0") == "1":
            raise

        try:
            send_metrics_lite('inf.consul.conf.translate.lastresort', 'counter', 1)
            trans = translate_last_resort(trans, conf_name)
            success = True
        except Exception as e:
            logging.error("Failed to translate conf: %s" % str(e))
    finally:
        send_metrics_lite('inf.consul.conf.translate.latency', 'timer', time.time() - st)
        send_metrics_lite('inf.consul.conf.translate.throughput', 'counter', 1)
        if not success:
            send_metrics_lite('inf.consul.conf.translate.error', 'counter', 1)
    for key in trans:
        result[key] = trans[key]
    return result

dc_conf = translate_conf({'consul_local_dc': 'consul:dummy?x&enforce_hy=hy&enforce_lf=lf&enforce_va=va&enforce_sg=sg&enforce_alisg=alisg&enforce_hl=hl'}, '/opt/tiger/ss_conf/ss/idc.conf')
local_dc = dc_conf['consul_local_dc'] if 'consul_local_dc' in dc_conf else None

if __name__ == '__main__':
    root = logging.getLogger()
    root.setLevel(logging.DEBUG)

    agent_host = 'consul.service.hy.byted.org'
    agent_port = 2280

    assert(len(translate_one(('in17-163', 7031))) == 1)
    assert(len(translate_one(('in17-163.byted.org', 7031))) == 1)
    assert(len(translate_one(('consul.service.hy.byted.org', 7031))) >= 3)

    conf = translate_conf({'consul_servers': 'consul:consul?ip:port'})
    print(conf)
    assert(len(conf['consul_servers'].split(':')) >= 3)
    conf = translate_conf({'consul_servers': 'consul:consul:7777?ip:port', 'ports': 'consul:consul:7777?port'})
    print(conf)
    assert(len(conf['consul_servers'].split(':')) >= 3)
    conf = translate_conf({'consul_servers': 'consul:consul'})
    print(conf)
    assert(len(conf['consul_servers'].split(':')) >= 3)
    conf = translate_conf({'k': 'consul:zk_kafka_orz/kafka-streaming?ip:port'})
    print(conf)
    assert(len(conf['k'].split(':')) >= 5)

    conf = translate_conf({'k': 'consul:zk_kafka_orz/kafka-streaming?ip:port&enforce_hy=a'})
    print(conf)
    assert(conf['k'] == 'a')
    # make agent fail, force attempt on DNS
    agent_port = 55555
    assert(len(translate_one(('consul.service.hy.byted.org', 7031))) >= 3)
    print(translate_one(('consul.service.hy.byted.org', 7031), need_tag=True))

    # test last resort
    t = translate_last_resort({'version_manager_host_list':'', 'version_manager_new_port':''}, '/opt/tiger/ss_conf/ss/thrift_recommend.conf')
    print(t)
    assert(len(t) == 2)
    assert(len(t['version_manager_host_list']) > 20)
    assert(len(t['version_manager_new_port']) > 20)

    t = translate_last_resort({'category_recommend_host':'', 'source_recommend_host':''}, '/opt/tiger/ss_conf/ss/thrift_article.conf')
    print(t)
    assert(len(t) == 2)
    assert(len(t['category_recommend_host']) > 20)
    assert(len(t['source_recommend_host']) > 20)

    t = translate_conf({'asdy':'consul:2adoop-nn-web'}, '/opt/tiger/ss_conf/ss/thrift_recommend.conf')
    print(t)
    assert(len(t['asdy']) > 10)

    sd = None
    t = translate_conf({'version_manager_host_list':'consul:', 'version_manager_new_port':'7701'}, '/opt/tiger/ss_conf/ss/thrift_recommend.conf')
    print(t)
    assert(len(t) == 2)
    assert(len(t['version_manager_host_list']) > 20)
    assert(t['version_manager_new_port'] == '7701')


    sd = None
    t = translate_conf({'asd':'consul:dummy?enforce_hy=1&enforce_lf=1'}, '/opt/tiger/ss_conf/ss/thrift_recommend.conf')
    print(t)
    assert(len(t) == 1)
    assert(t['asd'] == '1')

    sd = None
    t = translate_conf({'asdy':'consul:dummy?enforce_hy=1'}, '/opt/tiger/ss_conf/ss/thrift_recommend.conf')
    print(t)
    assert(len(t) == 1)
    assert(t['asdy'] == '1')

    sd = None
    t = translate_conf({'asdy':'consul:dummy?x&enforce_hy=123'}, '/opt/tiger/ss_conf/ss/thrift_recommend.conf')
    print(t)
    assert(len(t) == 1)
    assert(t['asdy'] == '123')

    t = translate_conf({'category_recommend_host':'consul:', 'source_recommend_host':'consul:', 'dum': 'consul:dummy?enforce_hy=123&enforce_lf=123'}, '/opt/tiger/ss_conf/ss/thrift_article.conf')
    print(t)
    assert(len(t) == 3)
    assert(len(t['category_recommend_host']) > 20)
    assert(len(t['source_recommend_host']) > 20)
    assert(t['dum'] == '123')

    k = {'category_recommend_host':':0', 'source_recommend_host':'consul:source_recommend_host', 'profile_recall_host': '127.0.0.1:2291'}
    t = post_check(k, '/opt/tiger/ss_conf/ss/thrift_article.conf')
    print(t)
    assert(len(t) == 3)
    assert(t['profile_recall_host'] == '127.0.0.1:2291')
    assert(t['category_recommend_host'] != ':0')
    assert(t['source_recommend_host'] != 'consul:source_recommend_host')
    assert(k['category_recommend_host'] == ':0')

    LAST_RESORT_ARCHIVE = 'xxxxxxx'
    # both sd and last_resort fail, nothing can be done
    t = translate_conf({'category_recommend_host':'consul:', 'source_recommend_host':'consul:'}, '/opt/tiger/ss_conf/ss/thrift_article.conf')
    print(t)
    assert(len(t) == 2)
    assert(t['category_recommend_host'] == 'consul:')
    assert(t['source_recommend_host'] == 'consul:')

    t = translate_conf({'videodb_host':'consul:dummy?enforce_hy=123&enforce_lf=124'}, '/opt/tiger/ss_conf/ss/db_videodb.conf')
    print(t)
    assert(t['videodb_host'] == '123' or t['videodb_host'] == '124')

    assert(try_dummy_translate('consul:dummy?enforce_hy=6666') == (True, '6666'))
    assert(try_dummy_translate('consul:dummy?enforce_hy=6666&enforce_lf=6666') == (True, '6666'))
    assert(try_dummy_translate('consul:dummy?ip&enforce_hy=10.4.24.236&enforce_lf=10.6.16.189') == (True, '10.4.24.236'))

    t = translate_conf({'videodb_host':'consul:dummy?enforce_hy=123&enforce_lf=124'}, '/data00/tiger/ss_conf/ss/db_videodb.conf')
    print(t)
    assert(t['videodb_host'] == '123' or t['videodb_host'] == '124')

    assert(try_dummy_translate('consul:dummy?enforce_hy=6666') == (True, '6666'))
    assert(try_dummy_translate('consul:dummy?enforce_hy=6666&enforce_lf=6666') == (True, '6666'))
    assert(try_dummy_translate('consul:dummy?ip&enforce_hy=10.4.24.236&enforce_lf=10.6.16.189') == (True, '10.4.24.236'))
    t = translate_conf({'videodb_host':'consul:dummy?enforce_hy=123&enforce_lf=124', 'xxx': 'consul:asdasdasd'}, '/opt/tiger/ss_conf/ss/2.conf')
    print(t)
    assert(t['videodb_host'] == '123' or t['videodb_host'] == '124')

#coding=utf8

from dns.resolver import Resolver
from dns.rdtypes.IN.A import A
from dns.rdtypes.ANY.TXT import TXT
from dns.rdatatype import SRV, TXT as typeTXT
from dns.name import from_text

from pyutil.consul.discovery import SERVICE_SUFFIX, load_tags
from pyutil.consul import is_python3

def get_resolver(retry_servfail=True):
    resolver = Resolver()
    # don't drop failed nameserver (for failures are temporary)
    resolver.retry_servfail = retry_servfail
    # timeout: on single nameserver
    resolver.timeout = 1.5
    # timeout: on the sum of all nameservers
    resolver.lifetime = 5
    # search suffix: byted.org., service.byted.org.
    resolver.search = [resolver.domain,
                       from_text("%s.%s" % (SERVICE_SUFFIX, resolver.domain.to_text()))]
    return resolver

# extract A records from additional section in response message
def extract_additional_addrs(answers):
    response = answers.response
    return {r.name.to_text(): [a.address for a in r if isinstance(a, A)] for r in response.additional}

def query_tags(host):
    try:
        answers = get_resolver(False).query(host, typeTXT)
        return extract_tags(answers)
    except Exception:
        return {}

def extract_tags(answers):
    rows = [txt.strings for r in answers.response.answer for txt in r if isinstance(txt, TXT)]
    tags = {}
    for row in rows:
        if len(row) < 3:
            continue
        key = '%s:%s' % (row[0], row[1])
        if is_python3:
            value = load_tags([x.decode('utf-8') for x in row[2:]])
        else:
            value = load_tags(row[2:])
        tags[key] = value
    return tags

def get_tag(tags, host, port):
    key = '%s:%s' % (host, port)
    if key not in tags:
        return {}
    return tags[key]

def query(host, type, default_port=0):
    answers = get_resolver().query(host, type)
    if len(answers) == 0:
        return None
    if type == SRV:
        # SRV records come with no address but hostname, additional information needed
        addrs = extract_additional_addrs(answers)
        tags = query_tags(host)
        # port is substituted
        result = []
        addrs = {'in17-163.byted.org.': ['10.4.17.163']}
        for r in answers:
            node = r.target.to_text()
            if node not in addrs:
                continue
            for addr in addrs[node]:
                result.append((addr, r.port, get_tag(tags, node, r.port)))
        return result
    else:
        return [(r.address, default_port, {}) for r in answers]

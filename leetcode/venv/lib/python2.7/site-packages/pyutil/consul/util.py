# coding: utf8
"""
@desc   提供给业务方使用的其它工具函数
"""
import logging
import threading
import time

from pyutil.consul.bridge import translate_one

CONSUL_CACHE_TTL = 15
DEFAULT_CLUSTER_NAME = "default"
DEFAULT_ENV_NAME = "prod"
DEFAULT_HOST_WEIGHT = 100
consul_cache = threading.local()

def set_cache_ttl(t):
    global CONSUL_CACHE_TTL
    CONSUL_CACHE_TTL = int(t)

def get_instance_list(consul_key):
    """通过consul名字获取实例列表

    Authors xuruiqi

    Params
        consul_key: 服务的consul名，默认获取本机房实例
                    如果要指定机房，请加上".service.{机房名}"
                    如：toutiao.monitor.index.service.lf

    Returns
        [
            {
                "host": "127.0.0.1",    # IP
                "port": "7788",         # 端口，此处为string类型
                "weight": 100,          # 实例的权重
                "cluster": "default",   # 实例所在集群，通常不关心
                "env": "prod",          # 实例所属env，通常不关心
            },
            ...
        ]
    """
    global CONSUL_CACHE_TTL
    global consul_cache

    record = getattr(consul_cache, consul_key, None)
    if not record or time.time() >= record["expired_at"] or \
            not record["value"]:
        logging.debug("Cache miss or expired for key: [%s]" % (consul_key,))

        instance_list = []
        consul_instance_list = translate_one(consul_key, need_tag=True)
        for ins_conf in consul_instance_list:
            if type(ins_conf) != tuple:
                continue

            tags = {} if len(ins_conf) < 3 else ins_conf[2]
            instance_list.append({
                "host": ins_conf[0],
                "port": str(ins_conf[1]),
                "weight": int(tags.get("weight", None) or DEFAULT_HOST_WEIGHT),
                "cluster": tags.get("cluster", None) or DEFAULT_CLUSTER_NAME,
                "env": tags.get("env", None) or DEFAULT_ENV_NAME,
            })

        if len(instance_list) == 0:
            logging.error(
                "Get 0 instances from consul key [%s], "
                "will fallback" % (consul_key,)
            )

        record = {
            "value": instance_list or (record["value"] if record else []),
            "expired_at": time.time() + CONSUL_CACHE_TTL,
        }

        setattr(consul_cache, consul_key, record)

    return record["value"]

if __name__ == "__main__":
    rootLogger = logging.getLogger()
    rootLogger.setLevel(logging.DEBUG)

    # 修改缓存时间以便测试
    set_cache_ttl(1)

    print("测试consul第一次调用超时返回空列表：")
    def mock_translate_one(_, need_tag=True):
        print("mock_translate_one called")
        return []
    real_translate_one = translate_one
    translate_one =  mock_translate_one
    ins_list = get_instance_list("toutiao.monitor.index")
    print(ins_list)
    assert(len(ins_list) == 0)
    translate_one = real_translate_one # 恢复

    print("\n测试正常获取:")
    ins_list = get_instance_list("toutiao.monitor.index")
    print(ins_list)
    assert(len(ins_list) > 0)

    print("\n测试缓存失效：")
    time.sleep(1.5)
    ins_list = get_instance_list("toutiao.monitor.index")
    print(ins_list)
    assert(len(ins_list) > 0)

    print("\n测试缓存失效，且consul调用超时返回上一次列表：")
    time.sleep(1.5)
    translate_one =  mock_translate_one
    ins_list = get_instance_list("toutiao.monitor.index")
    print(ins_list)
    assert(len(ins_list) > 0)
    translate_one = real_translate_one # 恢复

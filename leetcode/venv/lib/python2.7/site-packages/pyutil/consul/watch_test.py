# -*- coding: utf-8 -*-
import os
import threading

import mock
import nose.tools

from pyutil.consul import watch
from pyutil.consul import is_python3

@mock.patch("pyutil.consul.watch.resolve_dc", return_value="test")
def test_add_watch(_):
    srv = "foo"
    dc = "test"
    count = threading.active_count()
    cb = lambda name, nodes: 1
    watch_id = watch.add_watch(srv, cb)
    nose.tools.assert_greater_equal(watch_id, 0)
    nose.tools.eq_(1, len(watch.schedulers_by_dc))
    nose.tools.assert_equals([dc], watch.schedulers_by_dc.keys())
    nose.tools.eq_([srv], watch.schedulers_by_dc[dc].active_watch.keys())
    nose.tools.eq_(cb, watch.schedulers_by_dc[dc].active_watch[srv][0][0])
    nose.tools.eq_(count+1, threading.active_count())

def test_fork_add_watch():
    maps = dict(foo1="test1", foo2="test2",
                bar1="test1", bar2="test2")
    watch.resolve_dc = lambda service: maps.get(service, "lf")
    watch.schedulers_by_dc = {}
    count = threading.active_count()
    cb = lambda name, nodes: 1

    for service in maps.keys():
        watch_id = watch.add_watch(service, cb)
        nose.tools.assert_greater_equal(watch_id, 0)
    
    new_threads_count = 2
    count += new_threads_count
    nose.tools.eq_(count, threading.active_count())
    
    def assert_schedulers():
        nose.tools.eq_(sorted(["test1", "test2"]),
                       sorted(watch.schedulers_by_dc.keys()))
        nose.tools.eq_(sorted(["foo1", "bar1"]),
                       sorted(watch.schedulers_by_dc["test1"].active_watch.keys()))
        nose.tools.eq_(sorted(["foo2", "bar2"]),
                       sorted(watch.schedulers_by_dc["test2"].active_watch.keys()))

        for dc, raw_sch in watch.schedulers_by_dc.iteritems():
            for service, dic in raw_sch.active_watch.iteritems():
                for watch_id, (_cb, delay) in dic.iteritems():
                    nose.tools.eq_(cb, _cb)

    pid = os.fork()
    if not pid:
        try:
            # Include the main thread.
            nose.tools.eq_(1+new_threads_count, threading.active_count())
            assert_schedulers()
        except:
            os._exit(1)
        else:
            os._exit(0)
    else:
        nose.tools.eq_(0, os.waitpid(pid, 0)[1])
        nose.tools.eq_(count, threading.active_count())
        assert_schedulers()

def main():

    def cb(srv, nodes):
        q.put((os.getpid(), srv, nodes))

    print("main pid: %s" % os.getpid())
    if is_python3:
        import queue
        q = queue.Queue()
    else:
        import Queue
        q = Queue.Queue()

    watch.add_watch("hxy", cb)
    pid = os.fork()
    if pid == 0:
        print(q.get(timeout=60))
        print(q.get(timeout=60))
        q.task_done()                
        os._exit(1)
    else:
        os.waitpid(pid, 0)
        print(q.get(timeout=60))
        print(q.get(timeout=60))
        q.task_done()

if __name__ == "__main__":
    import sys
    sys.exit(main())

# -*- coding: utf-8 -*-
import socket
import logging
import functools
import time
import sys
import collector_pb2
import threading
import os
from pyutil.program import metrics2 as metrics

METRICS_PREFIX = 'inf.databus'

metrics.define_counter('collect.fail', prefix=METRICS_PREFIX)
metrics.define_counter('collect.retry', prefix=METRICS_PREFIX)
metrics.define_counter('collect.success', prefix=METRICS_PREFIX)
defined_channels = set()

socket_path = '/opt/tmp/sock/databus_collector.seqpacket.sock'
socket_path2 = '/tmp/databus_collector.seqpacket.sock'
abstract_path = '\0databus_collector.seqpacket.sock'
connect_timeout = 0.1
socket_timeout = 0.01

ctx = threading.local()
is_perf_test = os.getenv('TCE_PERF_TEST', None)

def ensure_ctx():
    if not hasattr(ctx, 'sock'):
        ctx.sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        ctx.sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 212992)
        # avoid hanging if something went wrong with databus collector
        # making it longer than general timeout for not breaking current use cases
        ctx.sock.settimeout(connect_timeout)
        try:
            ctx.sock.connect(abstract_path)
        except:
            ctx.sock.connect(socket_path if os.path.exists(socket_path) else socket_path2)
        ctx.sock.settimeout(socket_timeout)


'''
Channel message to backend, raise on failure if specified.

'channel' corresponds data channel configured in collector,
'message' shall be binary safe,
'key' is for partitioning, will round-robin if not specified,
'codec' specifies compression method, 0=NO_COMPRESSION, 1=GZIP, 2=SNAPPY (kafka only).

This communicates with collector through unix domain socket, with client sockets in thread-local fashion.

There are fail scenarios such as collector down, buffer full (i.e. EAGAIN for nonblocking).
Currently we handle these errors by reattempting (up to certain times).
Once all these attempts failed, last exception is raised if necessary.
'''


def collect(channel, message, key=None, codec=0, raise_on_fail=False, retries=3, block=False, silent=False, partition=-1):
    global defined_channels
    if is_perf_test == '1':
        return
    msg = collector_pb2.ApplicationMessage(value=message, codec=codec)
    if key is not None:
        msg.key = key
    if partition > -1:
        msg.partition = partition
    payload = collector_pb2.RequestPayload(channel=channel, messages=[msg])
    last_exception = None
    success = False
    tagkv = {"channel": channel}
    for i in xrange(0, retries):
        try:
            ensure_ctx()
            ctx.sock.setblocking(1 if block else 0)
            ctx.sock.send(payload.SerializeToString())
            success = True
            break
        except (socket.error, socket.timeout), e:
            ctx.sock.close()
            del ctx.sock
            last_exception = e
            metrics.emit_counter('collect.retry', 1, prefix=METRICS_PREFIX, tagkv=tagkv)
            continue
    if channel not in defined_channels:
        defined_channels.add(channel)
        metrics.define_tagkv('channel', [channel, ])
    if not success:
        metrics.emit_counter('collect.fail', 1, prefix=METRICS_PREFIX, tagkv=tagkv)
        if raise_on_fail:
            raise last_exception
        if not silent:
            logging.error("Failed to channel message to %s: %s" % (channel, str(e)))
    else:
        metrics.emit_counter('collect.success', 1, prefix=METRICS_PREFIX, tagkv=tagkv)


if __name__ == "__main__":
    import random

    times = []
    for i in xrange(0, 200000):
        key = str(random.randint(0, 10000))
        st = time.time()
        collect('kafka_main-sandbox',
                '10.4.24.51 ic.snssdk.com 221.206.108.187 44984 - [15/Dec/2015:18:04:06 +0800] 0.003 "GET /service/3/app_components/?screen_type=android_hdpi&iid=3111793394&device_id=2769169458&ac=wifi&channel=update_new&aid=13&app_name=news_article&version_code=485&version_name=4.8.5&device_platform=android&ssmix=a&device_type=R8007&os_api=18&os_version=4.3&uuid=865567026522674&openudid=3b3437f61035a34f&manifest_version_code=485 HTTP/1.1" 200 1130 "-" "Dalvik/1.6.0 (Linux; U; Android 4.3; R8007 Build/JLS36C) NewsArticle/4.8.5" "ic.snssdk.com" "tt_webid=6310236234; csrftoken=4297fb4a143c727fc161c9c26472f914; __utma=56122163.1698298209.1441146330.1442649186.1448998319.3; __utmc=56122163; __utmz=56122163.1448998319.3.3.utmcsr=nativeapp.toutiao.com|utmccn=(referral)|utmcmd=referral|utmcct=/; install_id=3111793394; alert_coverage=95" "0.003" 983b31fe4e343bc3b 10.4.32.17:81',
                key=key,
                partition=-1)
        en = time.time()
        times.append(en - st)
        # time.sleep(0.0001)
    import numpy as np

    a = np.array(times)
    print 'mean: ', float(sum(times)) / len(times)
    print 'mid: ', np.percentile(a, 50)
    print 'pct95: ', np.percentile(a, 95)
    print 'pct99: ', np.percentile(a, 99)
    print 'pct999: ', np.percentile(a, 99.9)
    print 'max: ', max(times)
    print float(sum(times)) / len(times), np.percentile(a, 50), np.percentile(a, 95), np.percentile(a,
                                                                                                    99), np.percentile(
        a, 99.9), max(times)

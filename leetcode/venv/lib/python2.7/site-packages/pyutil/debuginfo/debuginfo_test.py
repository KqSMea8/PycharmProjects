# -*- coding: utf-8 -*- 

import multiprocessing
import threading
import random
import logging
import time

from pyutil.program.conf import Conf
from pyutil.program.log import logging_config

import debuginfo

conf = Conf('debuginfo_test.conf')

class TestBase(object):
    def __init__(self, msg):
        self.msg = msg
        self.i = 0
        self.max_iter = 10 

    def run(self):
        while self.i < self.max_iter:
            req_id = random.randint(1, 10)
            writer = debuginfo.get_writer(req_id, 'debug_message')
            writer.record_by_request('uid', 8)
            group_id = 300000 
            writer.record_by_group(group_id , 'score', 1)
            self.foo(req_id)
            writer.record_by_request('msg', self.msg)

            writer2 = debuginfo.get_writer(req_id, 'debuginfo_czm2')
            writer2.record_by_request('uid', 8)
            writer2.record_by_group(123, 'score', 1)
            self.foo(req_id)
            t0 = time.time()
            writer.emit()
            t1 = time.time()
            #print "costtime1:%f"%(t1 - t0)
            t0 = time.time()
            writer2.emit()
            t1 = time.time()
            #print "costtime2:%f"%(t1 - t0)
            self.i += 1
            time.sleep(10)

    def foo(self, req_id):
        writer = debuginfo.get_writer(req_id, 'debuginfo_czm_002')
        writer.record_by_group(456, 'score', 2)
        writer2 = debuginfo.get_writer(req_id, 'debuginfo_czm2')
        writer2.record_by_group(456, 'score', 2)

class TestMultiProcess(TestBase, multiprocessing.Process):
    def __init__(self, msg):
        TestBase.__init__(self, msg)
        multiprocessing.Process.__init__(self)

class TestMultiThread(TestBase, threading.Thread):
    def __init__(self, msg):
        TestBase.__init__(self, msg)
        threading.Thread.__init__(self)

def test_class(class_type):
    logging_config(conf.local_log_file, log_level=logging.DEBUG)
    debuginfo.init(conf)

    plist = [class_type('%s #%s' % (repr(class_type), i)) for i in range(10)]
    for p in plist:
        p.start()
    for p in plist:
        p.join()


#test_class(TestMultiProcess)
test_class(TestMultiThread)

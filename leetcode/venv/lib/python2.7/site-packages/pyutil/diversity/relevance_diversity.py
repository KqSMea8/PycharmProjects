#!/usr/bin/env python
#coding:utf-8
import threading, logging
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SocketPool
from ss_thrift_gen.diversity.RelevanceDiversity import Client

class ThriftDiversityClient(threading.local):

    def __init__(self, hosts, ports, timeout=0.1, conn_timeout=0.05):
        transport = SocketPool.TSocketPool(hosts, ports, timeout, conn_timeout)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)
        self.client = Client(protocol)
        self.client.transport = transport

    def get(self, req):
        rsp = None
        try:
            self.client.transport.open()
            rsp = self.client.get(req)
        except:
            logging.exception('failed to call relevance diversity get')
        finally:
            self.client.transport.close()
        return rsp


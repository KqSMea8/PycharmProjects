# coding: utf-8
from django.db import models
from django.contrib.auth.models import User
from datetime import datetime,timedelta
from pyutil.django.admin_function.types import AdminFunctionStatus


TABLE_PREFIX = 'ug_'


class AdminFunction(models.Model):
    name = models.CharField(u'功能集名称', default='', max_length=256)
    app_id = models.IntegerField(u'用于区分不同app', default=0)
    status = models.SmallIntegerField(default=AdminFunctionStatus.enabled, choices=AdminFunctionStatus.choices)
    patterns = models.TextField(u'功能集对应的url patterns集合', default='',
                                help_text=u"一行一个url pattern，可参照：<a href='https://wiki.bytedance.com/pages/viewpage.action?pageId=34112914' target='_blank'>pattern示例</a>")
    create_time = models.DateTimeField(u'创建时间', auto_now_add=True)
    modify_time = models.DateTimeField(u'修改时间', auto_now=True)
    note = models.CharField(u'备注/描述', default='', max_length=512)
    extra = models.CharField(default='', max_length=512, blank=True)

    class Meta:
        db_table = u'admin_function'
        verbose_name = u'运营后台功能集'

    def __unicode__(self):
        return self.name


class UserGroup(models.Model):

    class Meta:
        db_table = TABLE_PREFIX + "user_group"
        verbose_name = u'django用户组'
        verbose_name_plural = u'django用户组'

    name = models.CharField(max_length=128, unique=True)
    users = models.ManyToManyField(User, related_name="%(app_label)s_%(class)s_related",
                                   verbose_name=('user group users'), blank=True,
                                   limit_choices_to={'is_staff': True, 'is_active': True, 'last_login__gt': datetime.now() - timedelta(days=31)})
    admins = models.ManyToManyField(User, related_name="%(app_label)s_%(class)ss",
                                    verbose_name=('user group admins'), blank=True,
                                    limit_choices_to={'is_staff': True, 'is_active': True, 'last_login__gt': datetime.now() - timedelta(days=31)})
    admin_functions = models.ManyToManyField(AdminFunction, related_name="%(app_label)s_%(class)ss", verbose_name=('user group admin functions'), blank=True)
    extra = models.CharField(default='', max_length=1024, blank=True)

    def __unicode__(self):
        return self.name
# coding=utf8
import logging
import re
from collections import defaultdict
from django.conf import settings as django_settings
from django.core.cache import cache

from pyutil.django.admin_function.models import AdminFunction
from pyutil.django.admin_function.types import AdminFunctionStatus


class UrlAuthenticationConfError(Exception):
    def __init__(self, options):
        self.message = 'Can not get url auth conf, please check your settings*.py'
        self.options = options

    def __str__(self):
        error_info = u'%s, current options is: %s' % (self.message, repr(self.options))
        return error_info


class FunctionUrlPatternsCache(object):

    def __init__(self):
        cache_key = self._get_option()
        self.cache_client = cache
        self.cache_key = cache_key
        self.timeout = 3 * 60

    def get_func_url_patterns(self):
        function_url_patterns = self.cache_client.get(self.cache_key)
        if not function_url_patterns:
            function_url_patterns = self.update_func_url_patterns()
        return function_url_patterns

    def update_func_url_patterns(self):
        function_url_patterns = defaultdict(list)
        admin_functions = AdminFunction.objects.filter(status=AdminFunctionStatus.enabled).values('id', 'patterns')
        for f in admin_functions:
            try:
                for p in f['patterns'].split():
                    p = p.strip()
                    if p:
                        try:
                            re.compile(p)
                        except Exception as ex:
                            logging.info(u'compile func url patterns fail, pattern: %s%s, msg: %s' % (f['id'], p, str(ex)))
                            continue
                        function_url_patterns[p].append(f['id'])
            except Exception as ex:
                logging.info(u'get func url patterns fail, admin_function: %s, msg: %s' % (f['id'], str(ex)))
        if function_url_patterns:
            self.cache_client.set(self.cache_key, function_url_patterns, self.timeout)
        return function_url_patterns

    @staticmethod
    def _get_option():
        """
        老的写法：
        URL_AUTH_CONFIG = {
            'redis_key': 'crawl/user/function_url_patterns',
            'redis_name': 'redis_crawl2',
        }
        新的写法：
        URL_AUTH_CACHE_KEY = 'crawl/user/function_url_patterns'
        :return:
        """
        options = getattr(django_settings, 'URL_AUTH_CONFIG', {})
        # 兼容老的写法
        if options:
            redis_name = options.get('redis_name')
            cache_key = options.get('redis_key')
        else:
            cache_key = getattr(django_settings, 'URL_AUTH_CACHE_KEY', 'auth/function_url_patterns')
        if not cache_key:
            raise UrlAuthenticationConfError(options)
        return cache_key

    def find_function_ids(self, path):
        function_url_patterns = self.get_func_url_patterns()
        function_ids = set([])
        for pattern, func_id in function_url_patterns.items():
            if re.search(pattern, path):
                function_ids |= set(func_id)
        return function_ids

import logging
import sys
import json
import datetime

from pyutil.net.get_local_ip import get_local_ip
from pyutil.queue.nsq_http_writer import NsqHttpWriter
from pyutil.program.conf import Conf


class AlarmLoggingHandler(logging.Handler):
    ALARM_SERVICE_TOPIC = "alarm_service_log"

    def __init__(self, include_html=False):
        logging.Handler.__init__(self)
        self.include_html = include_html
        conf = Conf('/etc/ss_conf/nsq_web.conf')
        self.nsq_writer = NsqHttpWriter(conf.get_values("nsqlookupd_http"))

    """An exception log handler that send log message to alarm service

    If the request is passed as the first argument to the log record,
    request data will be provided in the
    """

    def emit(self, record):

        import traceback
        from django.conf import settings

        try:
            if sys.version_info < (2, 5):
                # A nasty workaround required because Python 2.4's logging
                # module doesn't support passing in extra context.
                # For this handler, the only extra data we need is the
                # request, and that's in the top stack frame.
                request = record.exc_info[2].tb_frame.f_locals['request']
            else:
                request = record.request

            subject = '%s %s (%s IP): %s' % (
                settings.EMAIL_SUBJECT_PREFIX,
                record.levelname,
                (request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS and 'internal' or 'EXTERNAL'),
                record.msg
            )
            request_repr = repr(request)
        except:
            subject = '%s %s (%s IP): %s' % (
                '',
                record.levelname,
                'UNKNOWN',
                record.msg
            )

            request = None
            request_repr = "Request repr() unavailable"

        if record.exc_info:
            exc_info = record.exc_info
            stack_trace = '\n'.join(traceback.format_exception(*record.exc_info))
        else:
            exc_info = (None, record.msg, None)
            stack_trace = 'No stack trace available'

        msg = {}
        msg["subject"] = subject
        msg["stack_trace"] = stack_trace
        msg["request_repr"] = request_repr
        msg["host"] = get_local_ip()
        msg["time"] = str(datetime.datetime.now())
        try:
            self.nsq_writer.put(self.ALARM_SERVICE_TOPIC, json.dumps(msg), max_tries=2)
        except:
            pass


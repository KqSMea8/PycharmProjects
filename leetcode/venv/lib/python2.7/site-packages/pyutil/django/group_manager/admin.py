# coding: utf-8
__author__ = 'zhenghuabin'

from django.contrib import admin
from django.contrib.auth.models import User, Group
from django import forms

from models import GroupManager, GroupAssignRecord


def get_group_descendants(direct_groups, include_self=True):
    all_groups = []
    for group in direct_groups:
        all_groups += group.get_descendants(include_self)
    return set(all_groups)


class GroupManagerForm(forms.ModelForm):
    # an extra field
    username = forms.CharField(max_length=64)

    class Meta:
        model = GroupManager

    def clean(self):
        """
        创建表单: 检查username是否是一个存在的User，并且用取得的user填给GroupManager object
        修改表单: 不检查username, 并清除username的error
        :return:
        """
        ret = super(GroupManagerForm, self).clean()
        if self.instance.user:
            # change form
            del self._errors['username']
            return ret

        key = 'username'
        if key not in self.cleaned_data:
            return ret

        username = self.cleaned_data[key]
        qs = User.objects.filter(username=username)
        if len(qs) != 1:
            msg = "User '%s' does not exist" % username
            self._errors[key] = self.error_class([msg, ])
            del self.cleaned_data[key]
        else:
            user = qs[0]
            self.cleaned_data['user'] = user
            self.instance.user_id = user.id
        return ret

    def validate_unique(self):
        """
        创建表单：检查user唯一性
        修改表单：不检查user唯一性
        :return:
        """
        ret = super(GroupManagerForm, self).validate_unique()
        if 'username' not in self.cleaned_data:
            return ret

        qs = GroupManager.objects.filter(user__id=self.instance.user_id)
        if qs:
            msg = "User '%s' has already been added as GroupManager" % qs[0].user.username
            self._update_errors({'username': [msg, ]})
        return ret


class GroupManagerAdmin(admin.ModelAdmin):
    list_display = ('user', 'own_groups')
    filter_horizontal = ('groups',)
    fieldsets = (
        (None, {
            'fields': ('username', 'groups',),
        }),
    )

    form = GroupManagerForm


    def own_groups(self, request):
        """
        :param request:
        :return:
        """
        module_manager_obj = request
        groups = module_manager_obj.groups.all()
        return ','.join([str(group) for group in groups])

    def get_readonly_fields(self, request, obj=None):
        if obj:
            return ('username',)
        return self.readonly_fields

    def username(self, obj):
        return obj.user.username

    def save_model(self, request, obj, form, change):
        ret = super(GroupManagerAdmin, self).save_model(request, obj, form, change)
        if change:
            return ret
        # 为新建的group manager添加管理受权记录的权限
        user = obj.user
        from django.contrib.auth.models import Permission
        from django.contrib.contenttypes.models import ContentType

        content_type = ContentType.objects.get_for_model(GroupAssignRecord)
        permissions = Permission.objects.filter(content_type=content_type)
        for permission in permissions:
            user.user_permissions.add(permission)
        return ret


class GroupAssignRecordAdmin(admin.ModelAdmin):
    list_display = ('group', 'permissions', 'assigned_users')
    filter_horizontal = ('users',)

    def assigned_users(self, obj):
        """
        """
        content = '\n'.join([str(user) for user in obj.users.all()])
        return '<textarea rows=4 wrap=off readonly=on>{content}</textarea>'.format(content=content)

    assigned_users.allow_tags = True

    def permissions(self, obj):
        group = Group.objects.get(id=obj.group.id)
        perms = group.permissions.all()
        content = '\n'.join(str(perm) for perm in perms)
        return '<textarea rows=4 cols=80 wrap=off readonly=on>{content}</textarea>'.format(content=content)

    permissions.allow_tags = True

    def get_readonly_fields(self, request, obj=None):
        if obj:
            return ('group',)
        return self.readonly_fields

    def has_general_perm(self, request):
        if request.user.is_superuser:
            return True
        qs = GroupManager.objects.filter(user=request.user)
        return qs

    def has_add_permission(self, request):
        return self.has_general_perm(request)

    def has_change_permission(self, request, obj=None):
        return self.has_general_perm(request)

    def queryset(self, request):
        """
        :param request:
        :return:
        """
        qs = super(GroupAssignRecordAdmin, self).queryset(request)
        if request.user.is_superuser:
            return qs
        group_managers = GroupManager.objects.filter(user=request.user)
        groups = set()
        for group_manager in group_managers:
            groups.update(group_manager.groups.all())

        return qs.filter(group__in=groups)

    def save_model(self, request, obj, form, change):
        """
        :param request:
        :param obj:
        :param form:
        :param change:
        :return:
        """
        if change:
            # attach an attribute to request that will be used in response stage
            request.__origin_user_ids = [user.id for user in obj.users.all()]
        return super(GroupAssignRecordAdmin, self).save_model(request, obj, form, change)

    def response_add(self, request, obj, post_url_continue='../%s/'):
        for user in obj.users.all():
            user.groups.add(obj.group)
        return super(GroupAssignRecordAdmin, self).response_add(request, obj, post_url_continue)

    def response_change(self, request, obj):
        origin_user_ids = request.__origin_user_ids
        origin_users = set(User.objects.filter(pk__in=origin_user_ids))
        now_users = set(obj.users.all())
        to_remove = origin_users - now_users
        to_add = now_users - origin_users
        for user in to_remove:
            user.groups.remove(obj.group)
        for user in to_add:
            user.groups.add(obj.group)

        return super(GroupAssignRecordAdmin, self).response_change(request, obj)


    def delete_model(self, request, obj):
        to_remove = set(obj.users.all())
        for user in to_remove:
            user.groups.remove(obj.group)
        return super(GroupAssignRecordAdmin, self).delete_model(request, obj)

    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):
        if request.user.is_superuser:
            return super(GroupAssignRecordAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)
        if db_field.name == 'group':
            group_managers = GroupManager.objects.filter(user=request.user)
            groups_can_manage = set()
            for group_manager in group_managers:
                groups_can_manage.update(group_manager.groups.all())
            groups_can_manage = get_group_descendants(groups_can_manage)
            group_ids = [group.id for group in groups_can_manage]
            kwargs['queryset'] = Group.objects.filter(pk__in=group_ids)

        return super(GroupAssignRecordAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)


admin.site.register(GroupManager, GroupManagerAdmin)
admin.site.register(GroupAssignRecord, GroupAssignRecordAdmin)

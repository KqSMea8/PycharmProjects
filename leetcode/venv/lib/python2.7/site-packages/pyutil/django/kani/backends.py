# coding: utf-8
from __future__ import unicode_literals
import logging
from django.contrib.auth.models import User
from django.core.cache import cache

from pyutil.django.kani.utils import dj_kani_system_handler, kani_perms_to_dj_perms
from pyutil.kani.utils import BadKaniRequest


class KaniPermissionBackend(object):
    """
    Auth Backend for Kani Permission System
    KaniPermissionBackend does not Authenticates User. It only Authorise permissions
    """

    def __init__(self):
        self.kani = dj_kani_system_handler()
        self.cache = cache
        self.timeout = 3 * 60

    def authenticate(self, username=None, password=None):
        return None

    def _get_user_perms(self, username, force=False):
        cache_key = '_kani_perm_%s' % username
        perms = cache.get(cache_key)
        if perms is None or force:
            try:
                perms = self.kani.get_employee_perms_by_employee_key(username)
                perms = kani_perms_to_dj_perms(perms)
            except BadKaniRequest:
                logging.exception(BadKaniRequest)
                perms = set([])
            self.cache.set(cache_key, perms, self.timeout)
        return perms

    def _get_group_perms(self, group_id, force=False):
        cache_key = '_kani_group_perm_%s' % group_id
        perms = cache.get(cache_key)
        if perms is None or force:
            try:
                perms = self.kani.get_group_perms(group_id)
                perms = kani_perms_to_dj_perms(perms)
            except BadKaniRequest:
                logging.exception(BadKaniRequest)
                perms = set([])
            self.cache.set(cache_key, perms, self.timeout)
        return perms

    def _get_user_groups(self, username, force=False):
        cache_key = '_kani_user_group_%s' % username
        groups_map = cache.get(cache_key)
        if groups_map is None or force:
            try:
                groups_map = self.kani.get_employee_groups(username)
            except BadKaniRequest:
                logging.exception(BadKaniRequest)
                groups_map = {}
            self.cache.set(cache_key, groups_map, self.timeout)
        return groups_map

    def _get_group_permissions(self, username):
        perms_ = set()
        groups_map = self._get_user_groups(username)
        for group_id in groups_map:
            perms_.update(self._get_group_perms(group_id=group_id))
        return perms_

    def get_group_permissions(self, user_obj, obj=None):
        """
        Returns a set of permission strings that this user has through his/her groups.
        """
        if user_obj.is_anonymous() or obj is not None:
            return set()
        if not hasattr(user_obj, '_kani_group_perm_cache'):
            user_obj._group_perm_cache = self._get_group_permissions(user_obj.username)
        return user_obj._group_perm_cache

    def get_all_permissions(self, user_obj, obj=None):
        if user_obj.is_anonymous() or obj is not None:
            return set()
        if not hasattr(user_obj, '_kani_perm_cache'):
            user_obj._kani_perm_cache = self._get_user_perms(user_obj.username)
        return user_obj._kani_perm_cache

    def has_perm(self, user_obj, perm, obj=None):
        if not user_obj.is_active:
            return False
        return perm in self.get_all_permissions(user_obj, obj)

    def has_module_perms(self, user_obj, app_label):
        """
        Returns True if user_obj has any permissions in the given app_label.
        """
        if not user_obj.is_active:
            return False
        for perm in self.get_all_permissions(user_obj):
            if perm[:perm.index('.')] == app_label:
                return True
        return False

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None

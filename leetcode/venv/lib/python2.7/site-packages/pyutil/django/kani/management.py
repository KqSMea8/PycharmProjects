# coding=utf8
"""
Creates permissions for all installed apps that need permissions.
"""
from __future__ import unicode_literals
import getpass
from django.core.management.base import CommandError
from django.db import DEFAULT_DB_ALIAS

from pyutil.django.kani.utils import get_kani_django_conf
from pyutil.kani.utils import BadKaniRequest
from pyutil.program.fmtutil import pformat
from pyutil.program.python import first

DEFAULT_DB = 'op_admin'


def _get_all_permissions(opts, ctype):
    """
    Returns (codename, name) for all permissions in the given opts.
    """
    builtin = _get_builtin_permissions(opts)
    custom = list(opts.permissions)
    _check_permission_clashing(custom, builtin, ctype)
    return builtin + custom


def _get_builtin_permissions(opts):
    try:
        from django.contrib.auth import get_permission_codename
    except ImportError:
        # for 1.3
        from django.contrib.auth.management import _get_permission_codename as get_permission_codename
        opts.default_permissions = ('add', 'change', 'delete')
    """
    Returns (codename, name) for all autogenerated permissions.
    By default, this is ('add', 'change', 'delete')
    """
    perms = []
    for action in opts.default_permissions:
        perms.append((get_permission_codename(action, opts),
                      'Can %s %s' % (action, opts.verbose_name_raw)))
    return perms


def _check_permission_clashing(custom, builtin, ctype):
    """
    Check that permissions for a model do not clash. Raises CommandError if
    there are duplicate permissions.
    """
    pool = set()
    builtin_codenames = set(p[0] for p in builtin)
    for codename, _name in custom:
        if codename in pool:
            raise CommandError(
                "The permission codename '%s' is duplicated for model '%s.%s'." %
                (codename, ctype.app_label, ctype.model_class().__name__))
        elif codename in builtin_codenames:
            raise CommandError(
                "The permission codename '%s' clashes with a builtin permission "
                "for model '%s.%s'." %
                (codename, ctype.app_label, ctype.model_class().__name__))
        pool.add(codename)


def get_model_resource_key(model_meta):
    return '%s.%s' % (model_meta.app_label, getattr(model_meta, 'model_name', getattr(model_meta, 'module_name', '')))


def create_permissions(app_label, verbosity=2, dry_run=False, using=DEFAULT_DB, **kwargs):
    try:
        from django.apps import apps
        app_config = apps.get_app_config(app_label)
        if not app_config.models_module:
            return
        klasses = app_config.get_models()
    except ImportError:
        # for 1.3
        from django.db.models import get_models, get_app
        app_config = get_app(app_label)
        klasses = get_models(app_config)

    from django.contrib.contenttypes.models import ContentType
    from pyutil.django.kani.utils import dj_kani_system_handler

    kani = dj_kani_system_handler()

    for klass in klasses:
        # for 403 handler 自动创建权限
        model_name = kwargs.get('model_name')
        if model_name:
            if getattr(klass._meta, 'model_name', getattr(klass._meta, 'module_name', '')) != model_name:
                continue
            _, _, admins = get_kani_django_conf()
            creator = first(admins)
            owners = admins
        else:
            creator = getpass.getuser()
            owners = [creator]
        ctype = ContentType.objects.db_manager(using).get_for_model(klass)
        resource_key = get_model_resource_key(klass._meta)
        resource = dict(
            name=u'%s' % klass._meta.verbose_name,
            key=resource_key,
            creator_key=creator,
            owner_keys=owners,
            temporary_authorize=True,
            description=u'(%s)%s' % (klass._meta.app_label, klass._meta.verbose_name),
            url=kwargs.get('url', '')
        )
        try:
            if not dry_run:
                kani.register_resource(**resource)
            if verbosity >= 2:
                print("register source '%s'" % pformat(resource))
        except BadKaniRequest as bad:
            print("register resource %s fail: %s" % (resource_key, bad))

        for perm in _get_all_permissions(klass._meta, ctype):
            action = dict(
                name=perm[1],
                action=perm[0],
                creator_key=creator,
                resource_key=resource_key
            )
            try:
                if not dry_run:
                    kani.register_permission(**action)
                if verbosity >= 2:
                    print("register permission '%s'" % pformat(action))
            except BadKaniRequest as bad:
                print("register permission [%s]%s fail: %s" % (resource_key, perm[0], bad))


#coding=utf-8

from pyutil.program.tracing import start_span, get_current_span

class TracingMiddleware(object):
    def __init__(self):
        from pyutil.program.tracing import start_tracer
        start_tracer()

    def process_request(self, request):
        tags = {
                'component': 'django_middleware',
                'http.method': request.method,
                'http.path': request.path,
                'http.is_ajax': str(request.is_ajax()),
                'http.url': request.build_absolute_uri(),
                }
        start_span(operation_name='django_request', tags=tags)

    def process_view(self, request, view_func, view_args, view_kwargs):
        span = get_current_span()
        tags = {}
        if hasattr(view_func, '__module__'):
            m =  view_func.__module__
        elif hasattr(view_func, 'im_class'):
            m = getattr(view_func.im_class, '__module__', None)
        else:
            m = None
        if m:
            tags['view_func'] = '%s.%s' % (m.split('.')[-1], view_func.__name__)
            tags['module'] = m
        else:
            tags['view_func'] = view_func.__name__
        if hasattr(request, 'user'):
            tags['http.user'] = request.user.username
        for k, v in tags.items():
            span.set_tag(k, v)

    def process_response(self, request, response):
        span = get_current_span()
        span.finish()
        if hasattr(span.context, 'trace_id'):
            response['X-Trace-ID'] = str(span.context.trace_id)
        return response

    def process_exception(self, request, exception):
        import re
        span = get_current_span()
        span.set_tag('error', 'true')
        span.log_event('python.exception', dict(
            type=re.search("'(.+)'", str(exception.__class__)).group(1),
            val='%s' % exception))

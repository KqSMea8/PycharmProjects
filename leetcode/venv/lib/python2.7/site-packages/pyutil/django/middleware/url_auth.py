# coding=utf8
import re
from django.core.exceptions import PermissionDenied

from pyutil.django.user_group.models import UserGroup
from pyutil.django.user_group.util import FunctionUrlPatternsCache


class UrlAuthenticationMiddleware(object):
    """
    add conf below to django settings
    URL_AUTH_CONFIG = {
        'redis_key': 'crawl/user/function_url_patterns',   # the key of auth info
        'redis_name': 'redis_crawl2'                       # redis conf name
    }
    """

    def has_access_right(self, request):
        url_pattern_cache = FunctionUrlPatternsCache()
        function_ids = url_pattern_cache.find_function_ids(request.path)
        if not function_ids:
            return True
        if any(u'_function.all_%s' % f_id in request.user.get_all_permissions() for f_id in function_ids):
            return True
        function_user_group_refs = UserGroup.objects.filter(admin_functions__in=function_ids).values_list('id', flat=True)
        user_groups = UserGroup.objects.filter(users=request.user.pk).values_list('id', flat=True)
        return True if set(function_user_group_refs) & set(user_groups) else False

    def process_request(self, request):
        if self.has_access_right(request):
            return
        raise PermissionDenied

#!/usr/bin/env python
# coding: utf-8
__author__ = 'zhenghuabin'

from pyutil.etcd import etcd_client_init
from pyutil.etcd.etcd_cache import EtcdExpiringCache, EtcdExpiringCacheSingleton

READ_TIMEOUT_MS = 150


def fetch_value(key):
    return etcd_client_init.etcd_client_reader.read(key, timeout=READ_TIMEOUT_MS/1000.0)

etcd_cache = EtcdExpiringCache(fetch_value)

def get(key, default, timeout=None):
    """
    timeout: If key not in cache or expired, the value of key will be fetched and set to cache,
             the key will expire in $timeout seconds
    """
    value, _ = get_with_except(key, default, timeout)
    return value

def get_with_except(key, default, timeout=None):
    return etcd_cache.get_with_except(key, default, timeout=timeout)

# maybe make this bigger, for cases when cached value is already evicted and request failed
stale_cache = EtcdExpiringCache(fetch_value, size=2048)

'''
another version of 'get' allowing stale-read.

cases:
a) no cached value, request succeeds: a consistent value will be returned.
b) no cached value, request fails: 'default' is returned.
c) cached value exists, request succeeds: a consistent value will be returned. cache will be updated.
d) cached value exists (whether expired or not), request failed: cached value will be returned. cache TTL will be refreshed. (no consistent read in current window).

note that, the second return value may still carry an exception even (inconsistent) value is returned.
'''
def _get_stale_with_except(key, default, timeout=None):
    return stale_cache.get_with_except(key, default, timeout=timeout, stale_read=True)

def get_stale(key, default, timeout=None):
    """
    timeout: If key not in cache or expired, the value of key will be fetched and set to cache,
             the key will expire in $timeout seconds
    """
    value, _ = _get_stale_with_except(key, default, timeout)
    return value

def get_with_cachefile(key, default, timeout=300, stale_read=False):
    value, _ = EtcdExpiringCacheSingleton.instance(fetch_value).get_with_file(key,
                                                                              default,
                                                                              timeout=timeout,
                                                                              stale_read=stale_read)
    return value


if __name__ == '__main__':
    import time

    def set_kv(key, value):
        try:
            etcd_client_init.etcd_client_rw.set(key, value)
        except Exception as e:
            print e

    def test(t_key):
        key = '/test/node_0_7/node_1_7/node_2_7/foo' + "_" + t_key
        set_kv(key, 'bar')

        # agent 刷新需要15s左右，多sleep一些时间
        time.sleep(20)
        for i in range(5):
            value = get(key, 'Should not see this value', 10)
            print value

        set_kv(key, 'tea')

        # cache未过期
        value = get(key, 'Should not see this value')
        assert value == 'bar', "value is %s" % value

        # cache过期，etcd key取到新值
        time.sleep(30)
        value, err = get_with_except(key, 'not found')
        assert value == 'tea', "value is %s" % value
        assert err is None

        # 访问etcd时出错，第一次会返回错误并cache默认值，第二次会直接取默认值，不会出错
        key = '/test/not/exist'
        value, err = get_with_except(key, "not found", timeout=5)
        assert value == 'not found', "value is %s" % value
        assert err is not None
        print err

        value, err = get_with_except(key, "not found")
        assert value == 'not found', "value is %s" % value
        assert err is None

        time.sleep(5)
        value, err = get_with_except(key, "not found")
        assert value == 'not found', "value is %s" % value
        assert err is not None

        ''' stale read tests '''
        value, err = _get_stale_with_except('/test/nonexist_key', 1234)
        assert value == 1234, "value is %s" % value
        assert err is not None

        test_key = '/test/node_0_7/node_1_7/node_2_7/foo2' + "_" + t_key
        set_kv(test_key, 'bar')

        time.sleep(30)
        value, err = _get_stale_with_except(test_key, 'invalid', 0)
        assert value == 'bar', "value is %s" % value
        assert err is None

        time.sleep(2)
        def fake_read(key, **kwargs):
            raise Exception('faked exception')
        etcd_client_init.etcd_client_reader.read = fake_read
        value, err = _get_stale_with_except(test_key, 'invalid', 0)
        assert value == 'bar', "value is %s" % value
        assert err is not None

        value = get_stale(test_key, 'invalid', 0)
        assert value == 'bar', "value is %s" % value

    print "test with agent>>>"
    test("agent")

    print "test without agent>>>"
    import pyutil.etcd.etcd_agent as etcd_agent

    etcd_agent.agent_host = "8.8.8.8"
    reload(etcd_client_init)

    test("no_agent")

    print "success"

__author__ = 'zhenghuabin'

import argparse
import os
import re
import logging

from fabric.api import execute, env, run
from fabric.contrib import console
from fabric.colors import green


logging.basicConfig(level=logging.INFO)

env.user = 'tiger'
env.disable_known_hosts = True

BACKUP_PATH = '/opt/tiger/etcd_dump/backup'


def list_dates():
    return run('ls -t %s' % BACKUP_PATH)


def list_backup_files(date_str):
    return run('ls -t %s' % os.path.join(BACKUP_PATH, date_str))


def select_backup_file(dry=True):
    out = execute(list_dates)
    dates = out.items()[0][1]
    dates = re.split('\r\n|\t| *', dates)
    dates.sort(reverse=True)

    for i, d in enumerate(dates):
        print('%s): %s' % (green(i), green(d)))

    def validate_date(input):
        if int(input) < 0 or int(input) >= len(dates):
            raise Exception("Invalid choice number")
        return int(input)

    input = console.prompt("Input the number before the date to restore from, default", default=0,
                           validate=validate_date)
    date_selected = dates[int(input)]
    print 'date selected: %s' % date_selected

    out = execute(list_backup_files, date_selected)
    timestamps = out.items()[0][1]
    timestamps = re.split('\r\n|\t| *', timestamps)
    timestamps.sort(reverse=True)
    for i, ts in enumerate(timestamps):
        print('%s): %s' % (green(i), green(ts)))

    def validate_timestamp(input):
        if int(input) < 0 or int(input) >= len(timestamps):
            raise Exception("Invalid choice number")
        return int(input)

    input = console.prompt("Input the number before the datetime to restore from, default",
                           default=0, validate=validate_timestamp)
    timestamp_selected = timestamps[int(input)]
    return os.path.join(BACKUP_PATH, date_selected, timestamp_selected)


def restore_task(backup):
    return run('python /opt/tiger/pyutil/pyutil/etcd/etcddump/cli.py --file %s restore %s'
               % (backup, 'http://127.0.0.1:4001'))


def restore(backup, dry=True):
    logging.info("restore from backup: %s", backup)
    if dry:
        logging.info("done")
        return
    ans = console.confirm("restore from backup: %s" % backup, default=False)
    if not ans:
        logging.info("user abort restore")
        return
    execute(restore_task, backup)
    logging.info("done")
    pass


def main():
    parser = argparse.ArgumentParser(description='restore etcd from backup file')
    parser.add_argument('--host',
                        dest='host',
                        required=True,
                        help="the host that runs etcd backup")
    parser.add_argument('--dry-run', dest='dry', action='store_true', help='dry run mode, do no touch data')
    args = parser.parse_args()
    env.hosts = [args.host]
    backup = select_backup_file(dry=args.dry)
    restore(backup, dry=args.dry)


if __name__ == '__main__':
    main()

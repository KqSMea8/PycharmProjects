#!/usr/bin/env python
#coding:utf-8
import threading, logging
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SmartSocketPool
from pyutil.program.icrawler_util import str_dict
from pyutil.program.retry_limiter import RetryLimiter
from ss_thrift_gen.futil.FutilProvider import Client
from ss_thrift_gen.base.ttypes import Base

class ThriftFutilClient(threading.local):

    def __init__(self, service_name, caller_psm, ip_addr, timeout=0.1, conn_timeout=0.05, retries=1):
        _transport = SmartSocketPool.TSocketPool(service_name,caller_psm, timeout, conn_timeout)
        transport = TTransport.TFramedTransport(_transport)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self.client = Client(protocol)
        self.client.transport = transport
        self.retries = retries
        self.Base = Base(Caller=caller_psm,Addr=ip_addr)

    def _call(self, api, req, msg):
        if (req.Base == None):
            req.Base = self.Base

        retry_limiter = RetryLimiter("futil_service", self.retries)
        last_err_msg = ''
        while retry_limiter.can_retry():
            try:
                self.client.transport.open()
                fun = getattr(self.client, api)
                return fun(req)
            except Exception, ex:
                last_err_msg = str(ex)
            finally:
                try:
                    self.client.transport.close()
                except Exception, ex:
                    last_err_msg += str(ex)

        logging.warn('failed to %s after %d retries, %s',
                     msg, retry_limiter.retried(), last_err_msg)
        return None

    def id_mget(self, req):
        return self._call('id_mget', req, 'get feature id')

    def fname_mget(self, req):
        return self._call('fname_mget', req, 'get feature name')

    def id_mput(self, req):
        return self._call('id_mput', req, 'set feature id')
    
    def family_id_get(self, req):
        return self._call('family_id_get', req, 'get family id')

    def feature_meta_get(self, req):
        return self._call('feature_meta_get', req, 'get feature meta')

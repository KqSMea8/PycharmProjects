#!/usr/bin/python
from snakebite.client import HAClient
from snakebite.namenode import Namenode
from pyutil.consul.bridge import translate_one
from pyutil.program.conf2 import Conf
import random

_cached_client = None


def mknamenode(addr):
    return Namenode(addr[0], int(addr[1]))


def get_hdfs_client(hdfs_datacenter="hdfs_nnproxy_hosts"):
    """
    :param hdfs_datacenter: reference to /opt/tiger/ss_conf/ss/hadoop.conf
    :return:
    """
    global _cached_client
    if _cached_client is not None:
        return _cached_client
    hadoop_conf = Conf('/opt/tiger/ss_conf/ss/hadoop.conf')
    peers = map(lambda x: x.split(':'), hadoop_conf.get_values(hdfs_datacenter))
    random.shuffle(peers)
    client = HAClient(map(mknamenode, peers), use_trash=True)
    _cached_client = client
    return _cached_client


def get_uncached_hdfs_client(hdfs_datacenter="hdfs_nnproxy_hosts"):
    hadoop_conf = Conf('/opt/tiger/ss_conf/ss/hadoop.conf')
    peers = map(lambda x: x.split(':'), hadoop_conf.get_values(hdfs_datacenter))
    random.shuffle(peers)
    return HAClient(map(mknamenode, peers), use_trash=True)


if __name__ == '__main__':
    import sys
    for item in get_uncached_hdfs_client().ls([sys.argv[1]]):
        print item['path']

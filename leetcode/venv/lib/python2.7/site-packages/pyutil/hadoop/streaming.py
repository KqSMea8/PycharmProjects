#!/usr/bin/python
# coding=utf8
import threading, sys

mr_output_mode = False
mr_output_auto_flush = False
mr_output_mutex = threading.Lock()
original_stdout = sys.stdout

def _setup_mr_output():
    global mr_output_mode
    mr_output_mode = True
    sys.stdout = sys.stderr

def _reset_mr_output():
    global mr_output_mode
    mr_output_mode = False
    sys.stdout = original_stdout

'''
Enforce mapreduce output mode on current program.
All outputs to 'stdout' will be redirected to 'stderr' unless via 'emit_record'.

Returns true if success.
Returns false if current program is already in mr_output_mode.
'''
def enforce_mapreduce_output(auto_flush=False):
    global mr_output_auto_flush
    with mr_output_mutex:
        if mr_output_mode:
            return False
        mr_output_auto_flush = auto_flush
        _setup_mr_output()
        return True

'''
Reset output configurations.
'''
def reset_output():
    with mr_output_mutex:
        if not mr_output_mode:
            return False
        _reset_mr_output()
        return True

'''
Output a record to stdout.
'''
def write_record(line, flush=False):
    original_stdout.write(line)
    if mr_output_auto_flush or flush:
        original_stdout.flush()

'''
Print-like function to generate a record to stdout.
prototype: print_record(*objects, sep=' ', end='\n', flush=False)
'''
def print_record(*objects, **kwargs):
    sep = kwargs.get('sep', '\t')
    end = kwargs.get('end', '\n')
    flush = kwargs.get('flush', False)
    line = sep.join(map(str, objects)) + end
    write_record(line, flush)

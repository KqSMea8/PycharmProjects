#coding=utf-8
import logging
from collections import namedtuple
from pyutil.hbase.field_coder import TYPE2CODER, EmptyCoder

logger = logging.getLogger(__name__)
Field = namedtuple('Field', 'name coder')


class HBaseCoder(object):
    """
    hbase_spec format:  list of (column_family, list of column fields)
    column field format:
        'url' # column name
        ('publish_time', datetime) # (column_name, column_type)
        ('foo', field_coder)
    """

    hbase_spec = []

    @classmethod
    def fields(cls):
        def get_cn(cf, cn):
            return '%s:%s' % (cf, cn) if cf else cn

        if hasattr(cls, '_fields'):
            return cls._fields
        fields = {}
        for cf, cols in cls.hbase_spec:
            for col in cols:
                f = cls._parse_field(get_cn(cf, col) if isinstance(col, basestring) else
                        ((get_cn(cf, col[0]),) + col[1:]))
                fields[f.name] = f
        cls._fields = fields
        return fields

    def encode(self, cn, value):
        """ encode to save to hbase, and validate.
        :param str cn: column name (with column familty)
        :param value: cell value (decoded)
        :rtype: str or None, if not, raise TypeError
        """
        if value is None: return None
        field = self.fields().get(cn)
        try:
            v = field.coder.encode(value) if field else value
        except:
            logger.exception('fail to encode column %s', cn)
            raise

        if v is not None and not isinstance(v, basestring):
            raise TypeError('[%s] expected string or Unicode object, %s found' % (cn, type(v).__name__))
        return v.encode('utf-8') if isinstance(v, unicode) else v

    def decode(self, cn, value):
        """ decode result got from hbase.
        :param str cn: column name (with CF)
        :param str value: cell value got from hbase
        """
        if value is None: return None
        try:
            field = self.fields().get(cn)
            v = field.coder.decode(value) if field else value
            return v
        except:
            logger.exception('fail to decode column %s', cn)
            raise

    @classmethod
    def _parse_field(cls, f):
        coder = EmptyCoder
        if isinstance(f, basestring):
            name = f
        else: # tuple
            if len(f) == 1:
                name = f
            else:
                name, type_ = f
            coder = TYPE2CODER.get(type_)
            if not coder:
                if hasattr(type_, 'encode') and hasattr(type_, 'decode'):
                    coder = type_
                else:
                    coder = EmptyCoder

        return Field(name=name, coder=coder)

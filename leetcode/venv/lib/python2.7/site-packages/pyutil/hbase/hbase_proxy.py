#!/usr/bin/env python
#coding:utf-8

import logging, threading
from thrift.transport import TTransport
from pyutil.thrift.transport import SocketPool
from thrift.protocol import TBinaryProtocol
from hbase import Hbase
from hbase.ttypes import *

class HBaseProxy(threading.local):
    def __init__(self, hosts, ports, timeout=0.1, conn_timeout=0.05):
        transport = SocketPool.TSocketPool(hosts, ports, timeout, conn_timeout)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self.client = Hbase.Client(protocol)
        self.client.transport = transport

    def create_table(self, table_name, column_families):
        try:
            self.client.transport.open()
            self.client.createTable(table_name, column_families)
            return True
        except Exception, e:
            logging.exception("create table exception: " + str(e))
            return False
        finally:
            self.client.transport.close()
    
    def deleteTable(self, table_name):
        try:
            self.client.transport.open()
            self.client.disableTable(table_name)
            self.client.deleteTable(table_name)
            return True
        except Exception, e:
            logging.exception("delete table exception: " + str(e))
            return False
        finally:
            self.client.transport.close()

    def exists(self, table_name):
        try:
            self.client.transport.open()
            table_names = self.client.getTableNames()
            return table_name in table_names
        except Exception, e:
            logging.exception("check table exception: " + str(e))
            return False
        finally:
            self.client.transport.close()

#coding=utf-8
import os, time
from pyutil.program.conf import Conf
from pyutil.program.enum import IntEnum
conf = Conf('/etc/ss_conf/i18n.conf')

# copied from ss_data.domain.const.region
class Region(IntEnum):
    '''
    Codes for the representation of names of countries and their subdivisions – Part 1: Country codes
    http://en.wikipedia.org/wiki/ISO_3166-1
    http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
    http://en.wikipedia.org/wiki/ISO_3166-1_numeric

    Also as region subtag for language tag
    http://www.w3.org/International/articles/language-tags/
    '''
    unsupport = 1
    unknown = 0
    AU = 36
    BR = 76
    CA = 124
    CN = 156
    GB = 826
    HK = 344
    IN = 356
    JP = 392
    SG = 702
    TW = 158
    US = 840

    choices = (
            (unknown, u'未知'),
            (unsupport, u'暂未支持'),
            (AU, u'澳大利亚'),
            (BR, u'巴西'),
            (CA, u'加拿大'),
            (CN, u'中国大陆'),
            (GB, u'英国'),
            (HK, u'中国香港'),
            (IN, u'印度'),
            (JP, u'日本'),
            (SG, u'新加坡'),
            (TW, u'中国台湾'),
            (US, u'美国'),
            )
    en_choices = (
            (unknown, u'unknown'),
            (unsupport, u'unsupport'),
            (AU, u'Australia'),
            (BR, u'Brazil'),
            (CA, u'Canada'),
            (CN, u'China'),
            (GB, u'United Kingdom'),
            (HK, u'HongKong'),
            (IN, u'India'),
            (JP, u'Japan'),
            (SG, u'Singapore'),
            (TW, u'Taiwan'),
            (US, u'USA'),
            )

    @classmethod
    def norm_region(cls, region):
        """
        TODO:后续0，可能不再对应Region.CN，或另作他用
        """
        # None, 0 to Region.CN
        if not region:
            return cls.CN
        return region

def _parse_region(regions):
    if regions is None or len(regions) == 0:
        return [Region.CN]

    parse_region = []
    if type(regions) == type(''):
        for item in regions.split(','):
            try:
                item = item.strip()
                if len(item) > 0:
                    if int(item) in map(lambda x:x[0], Region.choices):
                        parse_region.append(int(item))
            except Exception as e:
                pass
    return parse_region

def init_location_settings():
    if conf.location is None or len(conf.location) == 0:
        return

    regions = _parse_region(conf.location)
    for r in regions:
        if int(r) == Region.US:
            os.environ['TZ'] = 'UTC+0'
            time.tzset()

def get_region():
    return _parse_region(conf.location)

def is_i18n_env():
    return Region.CN not in get_region()

def is_sg_env():
    return Region.SG in get_region()

import unittest
class TestUtils(unittest.TestCase):
    def test_init_location_settings(self):
        init_location_settings()
        self.assertNotEqual(os.environ.get('TZ', None), 'UTC+0')

    def test_get_region(self):
        self.assertEqual(get_region(), [Region.CN])

if __name__ == '__main__':
    unittest.main()

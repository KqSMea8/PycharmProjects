#coding=utf-8
"""
Idc是机房的概念，Region是区域的概念，一个Region可以包含多个机房，一个机房只能属于一个Region

具体参照pyutil.idc.region 中关于Region的详细解释
"""
import os
from enum import Enum


class Idc(Enum):
    LF = "lf"           # China lf
    HY = "hy"           # China hy
    HL = "hl"           # China hl
    VA = "va"           # US East Aws
    SG = "sg"           # Singapore Aws
    CA = "ca"           # US West Aws
    ALIVA = "aliva"     # US East Aliyun
    ALISG = "alisg"     # Singapore Aliyun
    MALIVA = "maliva"   # US East Aliyun-Music
    ALINC2 = "alinc2"   # China-North Aliyun

_local_idc = None


def _parse_idc_name():
    try:
        idc_name = os.popen('/opt/tiger/consul_deploy/bin/determine_dc.sh').read()
        if idc_name:
            return idc_name.strip()
    except Exception as ex:
        pass

    idc_name = os.environ.get("RUNTIME_IDC_NAME")
    if idc_name:
        return idc_name
    try:
        idc_name = os.popen('/opt/tiger/ss_lib/bin/sd report|grep "Data center"|awk \'{print $3}\'').read()
        return idc_name.strip()
    except Exception as ex:
        raise Exception("Get idc failed, error:%s" % str(ex))


def get_idc():
    '''
    获取idc失败会返回异常
    '''
    global _local_idc
    if _local_idc is None:
        idc_name = _parse_idc_name()
        for idc in Idc:
            if idc_name == idc.value:
                _local_idc = idc
        if _local_idc is None:
            raise Exception("Get idc failed, unknown idc name: %s" % idc_name)
    return _local_idc


if __name__ == '__main__':
    def mock_popen(_0):
        class MockReader(object):
            def read(self):
                return ""
        return MockReader()

    os.popen = mock_popen

    os.environ["RUNTIME_IDC_NAME"] = "lf"
    assert get_idc() is Idc.LF
    _local_idc = None
    os.environ["RUNTIME_IDC_NAME"] = "hy"
    assert get_idc() is Idc.HY
    _local_idc = None
    os.environ["RUNTIME_IDC_NAME"] = "hl"
    assert get_idc() is Idc.HL
    _local_idc = None
    os.environ["RUNTIME_IDC_NAME"] = "va"
    assert get_idc() is Idc.VA
    _local_idc = None
    os.environ["RUNTIME_IDC_NAME"] = "sg"
    assert get_idc() is Idc.SG
    _local_idc = None
    os.environ["RUNTIME_IDC_NAME"] = "ca"
    assert get_idc() is Idc.CA
    _local_idc = None
    os.environ["RUNTIME_IDC_NAME"] = "aliva"
    assert get_idc() is Idc.ALIVA
    _local_idc = None
    os.environ["RUNTIME_IDC_NAME"] = "alisg"
    assert get_idc() is Idc.ALISG
    _local_idc = None
    os.environ["RUNTIME_IDC_NAME"] = "maliva"
    assert get_idc() is Idc.MALIVA
    _local_idc = None
    os.environ["RUNTIME_IDC_NAME"] = "alinc2"
    assert get_idc() is Idc.ALINC2
    _local_idc = None
    os.environ["RUNTIME_IDC_NAME"] = "abc"
    try:
        get_idc()
        assert False
    except AssertionError:
        raise
    except Exception as ex:
        print ex

    def mock_popen_1(_0):
        class MockReader(object):
            def read(self):
                return "aliva"
        return MockReader()

    os.popen = mock_popen_1
    _local_idc = None
    assert get_idc() is Idc.ALIVA

    reload(os)
    _local_idc = None
    os.environ["RUNTIME_IDC_NAME"] = ""
    print _parse_idc_name()
    print get_idc()
    print "success!!!"

#coding=utf-8
"""
Region是区域的概念，Idc是机房的概念，一个Region可以包含多个机房，一个机房只能属于一个Region
例如：Region-CN(中国) 包含 Idc-LF(廊坊机房) 和 Idc-HY(华苑机房), Region-VA(美东AWS) 只包含 Idc-VA(美东AWS机房)
Region 与 Idc 的对应关系请参照本文件 REGION_IDCS 变量

同一Region内的机房在地域上一般比较近，机房间通信延时比较低
同一Region内不同机房间的服务可以互相调用，不同Region间的服务不可互相调用

pyutil.i18n.util中封装的Region类不能覆盖同一区域两个不同机房的需求，例如美东Aliyun和美东AWS, 因此封装新的Region类
"""
from enum import Enum

from pyutil.idc.idc import Idc, get_idc


class Region(Enum):
    CN = "cn"           # China
    VA = "va"           # US East Aws
    SG = "sg"           # Singapore Aws
    CA = "ca"           # US West Aws
    ALIVA = "aliva"     # US East Aliyun
    ALISG = "alisg"     # Singapore Aliyun
    MALIVA = "maliva"   # US East Aliyun-Music

REGION_IDCS = {
    Region.CN: [Idc.LF, Idc.HY, Idc.HL, Idc.ALINC2],
    Region.VA: [Idc.VA],
    Region.SG: [Idc.SG],
    Region.CA: [Idc.CA],
    Region.ALIVA: [Idc.ALIVA],
    Region.ALISG: [Idc.ALISG],
    Region.MALIVA: [Idc.MALIVA],
}

_local_region = None


def get_region():
    '''
    获取region失败会返回异常
    '''
    global _local_region
    if _local_region is None:
        local_idc = get_idc()
        for region in REGION_IDCS:
            if local_idc in REGION_IDCS[region]:
                _local_region = region
        if _local_region is None:
            raise Exception("Get region failed, unknown idc name: %s" % str(local_idc))
    return _local_region

if __name__ == '__main__':
    import os
    import pyutil.idc.idc as idc

    def reset():
        global _local_region
        _local_region = None
        idc._local_idc = None

    def mock_popen(_0):
        class MockReader(object):
            def read(self):
                return ""
        return MockReader()

    os.popen = mock_popen

    os.environ["RUNTIME_IDC_NAME"] = "lf"
    assert get_region() is Region.CN
    reset()
    os.environ["RUNTIME_IDC_NAME"] = "hy"
    assert get_region() is Region.CN
    reset()
    os.environ["RUNTIME_IDC_NAME"] = "hl"
    assert get_region() is Region.CN
    reset()
    os.environ["RUNTIME_IDC_NAME"] = "va"
    assert get_region() is Region.VA
    reset()
    os.environ["RUNTIME_IDC_NAME"] = "sg"
    assert get_region() is Region.SG
    reset()
    os.environ["RUNTIME_IDC_NAME"] = "ca"
    assert get_region() is Region.CA
    reset()
    os.environ["RUNTIME_IDC_NAME"] = "aliva"
    assert get_region() is Region.ALIVA
    reset()
    os.environ["RUNTIME_IDC_NAME"] = "alisg"
    assert get_region() is Region.ALISG
    reset()
    os.environ["RUNTIME_IDC_NAME"] = "maliva"
    assert get_region() is Region.MALIVA
    reset()
    os.environ["RUNTIME_IDC_NAME"] = "alinc2"
    assert get_region() is Region.CN
    reset()
    os.environ["RUNTIME_IDC_NAME"] = "abc"
    try:
        get_idc()
        assert False
    except AssertionError:
        raise
    except Exception as ex:
        print ex


    def mock_popen_1(_0):
        class MockReader(object):
            def read(self):
                return "aliva"
        return MockReader()

    os.popen = mock_popen_1
    reset()
    assert get_idc() is Idc.ALIVA

    reload(os)
    reset()
    os.environ["RUNTIME_IDC_NAME"] = ""
    print get_region()
    print "success!!!"

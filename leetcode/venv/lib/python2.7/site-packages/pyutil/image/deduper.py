#!/usr/bin/env python
import threading
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import TSocketPool
from pyutil.program.icrawler_util import str_dict
from ss.image.deduper import Dedup
from ss.image.deduper.ttypes import Req, Rsp

class ThriftDeduper(threading.local):

    def __init__(self, host, port):
        self.host, self.port = host, port
        self._client = None

    @property
    def client(self):
        if not self._client:
            transport = TSocketPool.TSocketPool(self.host, self.port)
            transport = TTransport.TBufferedTransport(transport)
            protocol = TBinaryProtocol.TBinaryProtocol(transport)
            self._client = Dedup.Client(protocol)
            self._client.transport = transport
        return self._client

    def dedup(self, body, info):
        req = Req(body, info)
        str_dict(req)
        try:
            self.client.transport.open()
            rsp = self.client.dedup(req)
            return rsp.status, rsp.dup_group_ids, rsp.msg
        finally:
            self.client.transport.close()

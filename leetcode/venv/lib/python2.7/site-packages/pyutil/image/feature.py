#!/usr/bin/env python
import threading
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import TSocketPool
from ss.image.feature import Feature
from ss.image.feature.ttypes import FeatureReq

class ThriftFeature(threading.local):

    def __init__(self, host, port):
        self.host, self.port = host, port
        self._client = None

    @property
    def client(self):
        if not self._client:
            transport = TSocketPool.TSocketPool(self.host, self.port)
            transport = TTransport.TBufferedTransport(transport)
            protocol = TBinaryProtocol.TBinaryProtocol(transport)
            self._client = Feature.Client(protocol)
            self._client.transport = transport
        return self._client

    def gist_feature(self, data, uri=''):
        req = FeatureReq(data, uri)
        try:
            self.client.transport.open()
            rsp = self.client.gist_feature(req)
            return rsp.status, rsp.features
        finally:
            self.client.transport.close()

    def hist_feature(self, data, uri=''):
        req = FeatureReq(data, uri)
        try:
            self.client.transport.open()
            rsp = self.client.hist_feature(req)
            return rsp.status, rsp.features
        finally:
            self.client.transport.close()

    def sift_feature(self, data, uri=''):
        req = FeatureReq(data, uri)
        try:
            self.client.transport.open()
            rsp = self.client.sift_feature(req)
            return rsp.status, rsp.nodes, rsp.attr
        finally:
            self.client.transport.close()

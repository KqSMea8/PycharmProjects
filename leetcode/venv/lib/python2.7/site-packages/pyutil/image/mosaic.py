# -*-coding:utf-8 -*-

import json
import logging
import mimetypes

import sys

if sys.version_info[0] == 2:
    PY3 = False
    from urllib import urlencode
    from httplib import HTTPConnection

elif sys.version_info[0] == 3:
    PY3 = True
    from urllib.parse import urlencode
    from http.client import HTTPConnection

allow_mimetypes = set(mimetypes.types_map.values())
allow_mimetypes.add("image/webp")
allow_mimetypes.add("audio/m4a")

DEFAULT_TIMEOUT = 5


def parse_date(ims):
    import time
    from email.utils import parsedate_tz
    """ Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch. """
    try:
        ts = parsedate_tz(ims)
        return int(time.mktime(ts[:8] + (0, )) - (ts[9] or 0) - time.timezone)
    except (TypeError, ValueError, IndexError, OverflowError):
        return 0


class MosaicExpcetion(Exception):
    def __init__(self, code, msg):
        self.code = code
        self.msg = msg
        Exception.__init__(self, "%s:%s" % (self.code, self.msg))


class MosaicClient(object):
    def __init__(self, token="", namespace="", **kwargs):
        self.token = token
        self.namespace = namespace
        self.cluster = kwargs.get("cluster") or "toutiao"
        self.image_cluster = kwargs.get("image_cluster") or "default"
        self.timeout = kwargs.get("timeout", DEFAULT_TIMEOUT)

    def _get_conn(self, is_image=False):
        from pyutil.namekeeper import namekeeper
        if is_image:
            s = namekeeper.getone("storage.mimg.ttuploader", cluster=self.image_cluster)
        else:
            s = namekeeper.getone("storage.mosaic.proxy", cluster=self.cluster)
        return HTTPConnection(s[0], s[1], timeout=self.timeout)

    def _req(self, method, url, body=None, headers=None, is_image=False):
        if body and not isinstance(body, bytes):
            raise MosaicExpcetion(400, "data not bytes")
        if self.token and not self.namespace:
            logging.warn("mosaic: no namespace specified")
        _headers = {
            "X-Mosaic-Token": self.token,
            "X-Mosaic-Namespace": self.namespace
        }
        if headers:
            _headers.update(headers)

        conn = self._get_conn(is_image=is_image)
        conn.request(method, url, body, _headers)
        response = conn.getresponse()
        status = response.status
        data = response.read()
        conn.close()

        headers = response.getheaders()
        if PY3:
            headers = [(k.lower(), v) for k, v in headers]
        return status, data, dict(headers)

    def post_raw(self, data, content_type=""):
        if content_type and content_type not in allow_mimetypes:
            raise MosaicExpcetion(400, "%s type not supported" % content_type)
        headers = {"Content-type": content_type} if content_type else {}
        status, data, _ = self._req("POST", "/obj", data, headers)
        data = data.decode("utf8")
        if status != 200:
            raise MosaicExpcetion(status, data)
        return json.loads(data)

    def head(self, key):
        """ get namespace/size/time of the object
            dict if key exists or None
        """
        status, data, headers = self._req("HEAD", "/obj/" + key)
        if status in (404, 410):
            return None
        if status != 200:
            raise MosaicExpcetion(status, data.decode("utf8"))
        ret = {}
        ret["namespace"] = headers.get("x-mosaic-namespace")
        ret["size"] = int(headers.get("content-length", -1))
        ret["time"] = parse_date(headers.get("last-modified"))
        return ret

    def exists(self, key):
        return self.head(key) is not None

    def get(self, key):
        status, data, _ = self._req("GET", "/obj/" + key)
        if status in (404, 410):
            raise MosaicExpcetion(404, "Not Found")
        if status != 200:
            raise MosaicExpcetion(status, data.decode("utf8"))
        return data

    def delete(self, key):
        status, data, _ = self._req("DELETE", "/obj/" + key)
        if status in (404, 410):
            raise MosaicExpcetion(404, "Not Found")
        if status != 200:
            raise MosaicExpcetion(status, data.decode("utf8"))
        return True

    # mimg apis:
    def post_image(self, data):
        status, data, _ = self._req("POST", "/images", data, is_image=True)
        data = data.decode("utf8")
        if status != 200:
            raise MosaicExpcetion(status, data)
        return json.loads(data)

    def post_crop_image(self, data, x1, y1, x2, y2, w=None, h=None):
        """
        x1, y1, x2, y2 indicates upper-left & bottom-right point of image
        w, h indicates the expect size
        """
        params = dict(x1=x1, y1=y1, x2=x2, y2=y2)
        w and params.update(w=w)
        h and params.update(h=h)
        uri = "/images?%s" % urlencode(params)
        status, data, _ = self._req("POST", uri, data, is_image=True)
        data = data.decode("utf8")
        if status != 200:
            raise MosaicExpcetion(status, data)
        return json.loads(data)

    def image_info(self, key):
        status, data, _ = self._req("GET", "/images/info/" + key, is_image=True)
        if status != 200:
            raise MosaicExpcetion(status, data.decode("utf8"))
        return json.loads(data.decode("utf8"))


# 头条集群上传用默认参数:
testcli = MosaicClient(namespace="test1", token="ZAzqTb^brjF4bVaZ2VtfCNotkgURj,TR")
# 如果你的业务单独分配了 mosaic clsuter 和 mimg cluster, 根据分配填写:
# mcli = MosaicClient(namespace="aaa", token="bbb", cluster="toutiao-xxx", image_cluster="toutiao-xxx")


if __name__ == "__main__":
    fn = "test.webp"
    cluster = "toutiao"
    image_cluster = "default"

    # python mosaic.py test.webp toutiao default
    if len(sys.argv) > 1:
        fn = sys.argv[1]
    if len(sys.argv) > 2:
        cluster = sys.argv[2]
    if len(sys.argv) > 3:
        image_cluster = sys.argv[3]

    with open(fn) as f:
        mcli = MosaicClient(namespace="test1", token="ZAzqTb^brjF4bVaZ2VtfCNotkgURj,TR",
                            cluster=cluster, image_cluster=image_cluster)
        data = f.read()
        # test mosaic post obj
        ret = mcli.post_raw(data)
        print(json.dumps(ret))
        # test mimg get image info
        info = mcli.image_info(ret['key'])
        print(json.dumps(info))
        # test mosaic delete obj
        mcli.delete(ret['key'])

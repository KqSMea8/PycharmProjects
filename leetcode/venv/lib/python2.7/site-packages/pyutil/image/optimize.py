#coding=utf8
import logging
from PIL import Image

from pyutil.image.compat import BytesIO

def get_optimized_jpeg_data(image, quality=75, **kwargs):
    '''
    image - PIL.Image
    quality - yeah.

    returns optimized jpeg image data
    '''
    from exceptions import IOError
    from PIL import ImageFile
    outf = BytesIO()
    # 这里假设jpeg压缩后的bpp约为2
    image_filesize = (image.size[0] * image.size[1] * 2) / 8
    try:
        # see https://github.com/wiredfool/Pillow/commit/c68044bf7fa63f7e6642393cb4ea344753c34d35
        ImageFile.MAXBLOCK = max(512*1024, image.size[0] * image.size[1])
        kwargs = dict(quality=quality, optimize=True)
        # for large image use progressive
        if image_filesize >= 8096:
            # PIL save as progressive if 'progressive' in kwargs
            # ambiguous for kwargs['progressive'] = False
            kwargs['progressive'] = True
        image.save(outf, "JPEG", **kwargs)
    except IOError:
        image.save(outf, "JPEG", quality=quality)

    return outf.getvalue()

def strip_alpha(image):
    if image.mode not in ("LA", "RGBA", "P"):
        return image
    if image.mode == "P":
        if image.info.get("transparency"):
            image = image.convert("RGBA")
        else:
            return image
    assert image.mode in ("RGBA", "LA"), image.mode
    mask_idx = image.mode.index("A")
    try:
        image.load()
        splits = image.split()
        if len(splits) >= mask_idx + 1:
            mask = splits[mask_idx]
            background = Image.new("RGB", image.size, (255, 255, 255))
            background.paste(image, mask)
            return background
    except:
        pass
    return image


def save_as(image, expect_fmt, **kwargs):
    """
    kwargs:
    quality - yeah.
    """
    quality = kwargs.get("quality", 75)

    if expect_fmt in ("JPEG", ):
        image = strip_alpha(image) # convert to RGB with white background
        if image.mode in ("P", "L", "I", "CMYK"):
            image = image.convert("RGB")

    if expect_fmt in ("WEBP", ):
        if image.mode in ("P", "L", "I", "CMYK"):
            image = image.convert("RGB")
        if image.mode in ("LA", ):
            # WEBP not support mode LA
            image = image.convert("RGBA")

    if expect_fmt == "JPEG":
        return get_optimized_jpeg_data(image, quality=quality)

    outf = BytesIO()
    image.save(outf, expect_fmt, quality=quality)
    return outf.getvalue()

from PIL import Image, ImageFile
from pyutil.image.orientation import auto_orientate
from pyutil.image.optimize import save_as
from pyutil.image.compat import BytesIO, rnd

ImageFile.LOAD_TRUNCATED_IMAGES = True  # compatible with truncated file


def decode(buf):
    img = Image.open(BytesIO(buf))
    img.load()
    return img


def resize(image, size):
    # fix resize in "1" or "P" mode using Image.NEAREST
    if image.mode in ("1", "P"):
        if image.info.get("transparency"):
            image = image.convert("RGBA")
        else:
            image = image.convert("RGB")
    return image.resize(size, Image.ANTIALIAS)


def autosize(size, w=None, h=None, stretch=False):
    _w, _h = size
    if not stretch:
        if w and _w < w:
            return size
        if h and _h < h:
            return size
    if h:
        w = rnd(_w * float(h) / _h)
        return (w, h)
    else:
        h = rnd(_h * float(w) / _w)
        return (w, h)
    return size


def resize_1080p(image):
    image = auto_orientate(image)
    size = image.size
    ratio = size[0] / size[1]
    if max(size) > 1920 and (ratio < 1 / 3 or ratio > 3):  # by pixels
        max_pixels = 1920 * 1080
        h_ratio = 1 / (ratio + 1)
        size = autosize(size, h=max_pixels * h_ratio)
        return resize(image, size)

    if size[0] > size[1]:
        size = autosize(size, w=1920)
        size = autosize(size, h=1080)
    else:
        size = autosize(size, w=1080)
        size = autosize(size, h=1920)
    return resize(image, size)


def convert_1080p(buf, **kwargs):
    image = resize_1080p(decode(buf))
    kwargs.setdefault("expect_fmt", "JPEG")
    return save_as(image, **kwargs)


def resize_with_width(image, w):
    image = auto_orientate(image)
    size = image.size
    size = autosize(size, w=w)
    if size == image.size:
        return
    return resize(image, size)


def convert_with_width(buf, w, **kwargs):
    image = resize_with_width(decode(buf), w)
    kwargs.setdefault("expect_fmt", "JPEG")
    return save_as(image, **kwargs)

#!/usr/bin/env python
import os, sys, logging, signal
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import TSocketPool
from pyutil.program.icrawler_util import str_dict
from ss.image.search import search
from ss.image.search.ttypes import image_attr_t, ft_node_t, search_req_t, search_rsp_t

class ThriftSearch(object):

    def __init__(self, host, port):
        transport = TSocketPool.TSocketPool(host, port)
        self.transport = TTransport.TBufferedTransport(transport)
        self.protocol = TBinaryProtocol.TBinaryProtocol(self.transport)
        self.client = search.Client(self.protocol)
    
    def add(self, sign, width, height, nodes):
        attr = image_attr_t(width, height)
        nodes = [ft_node_t(int(word), int(x), int(y)) for word, x, y in nodes]
        req = search_req_t(sign, attr, nodes)
        self.transport.open()
        try:
            rsp = self.client.add(req)
        finally:
            self.transport.close()
        return rsp.status

    def get(self, sign, width, height, nodes):
        attr = image_attr_t(width, height)
        nodes = [ft_node_t(int(word), int(x), int(y)) for word, x, y in nodes]
        req = search_req_t(sign, attr, nodes)
        self.transport.open()
        try:
            rsp = self.client.get(req)
        finally:
            self.transport.close()
        return rsp.status, rsp.signs

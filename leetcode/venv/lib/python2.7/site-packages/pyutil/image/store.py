#!/usr/bin/env python
#coding=utf8
import logging, signal
from cStringIO import StringIO
from songshulin.imagestore.ttypes import Blob, PutReq, GetReq, GetStatus, PutStatus
from songshulin.imagestore import ImageStore
from image_service import ImageService
from image_service.ttypes import PutOpt
from pyutil.thrift.thrift_util import ThriftClient
from pyutil.image.size import get_size

k_mode_origin, k_mode_thumb, k_mode_medium, k_mode_large = range(4)
k_max_widths = [120, 202]
k_large_width = 640
k_all_max_widths = k_max_widths + [k_large_width]
logger = logging.getLogger(__name__) or logging

class ImageStoreHelper(object):
    def __init__(self, store_servers, aws=False):
        self._aws = aws
        if aws:
            service_client = ImageService.Client
        else:
            service_client = ImageStore.Client

        self._store_helper = ThriftClient(store_servers, service_client, 50000)
        self._image_accesor = ImageAccessor(client=self._store_helper, aws=self._aws)

    def __enter__(self):
        self._store_helper.open()
        return self

    def __exit__(self, type, value, traceback):
        self._store_helper.close()

    def exists(self, uri, verify_data=False):
        if self._aws:
            raise Exception('no rpc exist method as aws service %s' % uri)

        ret = self._store_helper.exists(uri, verify_data)
        if ret == 0:
            return True
        if ret == 2:
            return False
        raise Exception("rpc exists(%s), ret=%s" % (uri, ret))

    def put(self, body):
        '''
        store to imagestore
        assert: body is binary format instead of Image
        '''
        if body is None:
            raise ValueError("body is None")
        return self._image_accesor.put(body)

    def get(self, uri, index):
        '''
        get image from imagestore
        index: 0: original, 1: 100px, 2:202px
        '''
        if index not in range(len(k_max_widths)+1) or not uri:
            raise ValueError("param err")
        return self._image_accesor.get(uri, index)

    def get_size(self, width, height, index):
        return get_size(width, height, index)

class ImageAccessor(object):

    def __init__(self, client=None, aws=False):
        self._client = client
        self._aws = aws

    def put(self, body):
        '''
        save the given image to imagestore
        '''
        from PIL import Image
        image = Image.open(StringIO(body))
        image.load()  # test it is a image

        if self._aws:
            put_response = self._client.PutOffline(data=body, opt=PutOpt())
            if put_response.status != "OK":
                logger.warn('ImageAccessor put error: status=%s', put_response.status)
                return None
            return put_response.key

        image_blobs = [Blob(data=body)]
        put_response = self._client.put(req=PutReq(blobs=image_blobs))
        if put_response.status != PutStatus.OK:
            logger.warn('ImageAccessor put error: status=%s', put_response.status)
            return None
        return put_response.uri

    def get(self, uri, index):
        '''
        assert: index in k_max_widths
        '''
        try:
            if self._aws:
                get_response = self._client.Get(uri)
                if get_response.status == 'OK':
                    return get_response.data
                else:
                    logger.warn("ImageAccessor get uri:%s error status:%s", uri, get_response.status)
                    return None

            mask = 2 ** index
            get_response = self._client.get(req=GetReq(uri=uri, mask=mask))
            if get_response.status == GetStatus.OK:
                image_blobs = get_response.blobs
                return image_blobs[0].data
            else:
                logger.warn("ImageAccessor get uri:%s error status:%s", uri, get_response.status)
                return None
        except Exception as e:
            logger.exception('ImageAccessor get uri:%s ex:%s', uri, e)
            return None

    def get_gif_format(self, image):
        a = list(image.split()[-1].getdata())
        if a.count(255) == len(a):
            image_format = 'JPEG'
        else:
            image_format = 'PNG'
        return image_format


def main():
    signal.signal(signal.SIGTERM, signal.SIG_DFL)
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    hosts = ['10.4.16.208']
    ports = [7913]
    store_servers = zip(hosts, ports)
    with ImageStoreHelper(store_servers) as image_store_helper:
        body = "XXX"
        image_store_helper.put(body)

if __name__ == '__main__':
    main()

#!/usr/bin/env python
from cStringIO import StringIO
from PIL import Image


DEFAULT_MIDDLE_WIDTH = 202
DEFAULT_MIN_WIDTH = 120


def const_max_size(max_size):
    def _const_max_size(width=None, height=None):
        return max_size
    return _const_max_size


def as_similar_image_data(image_data):
    image = Image.open(StringIO(image_data))
    format = image.format
    if format == 'GIF':
        # use the first frame
        b = StringIO()
        format = 'PNG'
        image.save(b, format)
        b = StringIO(b.getvalue())
        image = Image.open(b)
    width, height = image.size
    if width / height > 3:
        image = image.crop((0, 0, height * 3, height))
    elif height / width > 3:
        image = image.crop((0, 0, width, width * 3))
    b = StringIO()
    image.save(b, format)
    return b.getvalue()


class ImageAccessor(object):

    def __init__(self, client):
        self._client = client

    def put(self, image_data, image_type=None):
        raise Exception("deprecated")

    def put_request(self, image_req):
        raise Exception("deprecated")

    def get(self, key):
        from songshulin.imagestore.ttypes import GetImageReq
        req = GetImageReq(key=key, type=7)
        rsp = self._client.get_image(req)
        if not rsp.medium.data:
            rsp.medium = rsp.origin
        if not rsp.thumb.data:
            rsp.thumb = rsp.medium
        return rsp


def DEFULT_WIDTH_FUNC(width, height):
    return width


def DEFULT_HEIGHT_FUNC(width, height):
    return height


class ImageNormalizer(object):

    def __init__(self, width_func=DEFULT_WIDTH_FUNC, height_func=DEFULT_HEIGHT_FUNC):
        self._width_func = width_func
        self._height_func = height_func

    def normalize_image(self, image):
        '''
        return the normalized image or None if no normalization is necessary
        '''
        if image is None:
            return None

        width, height = image.size
        needs_resize = True
        needs_crop = True
        max_width = self._width_func(width, height)
        if width <= max_width:
            needs_resize = False
        if self._height_func is None or self._height_func(width, height) >= height:
            needs_crop = False
        if not needs_resize and not needs_crop:
            return None

        if needs_resize:
            new_height = int(max_width * float(height) / width)
            image = image.resize((max_width, new_height), Image.ANTIALIAS)
            height = new_height
            width = max_width

        if needs_crop:
            max_height = self._height_func(width, height)
            if max_height < height:
                image = image.crop((0, 0, width, max_height))

        return image

    def normalize_image_data(self, image_data):
        image = Image.open(StringIO(image_data))
        format = image.format
        image = self.normalize_image(image)
        if image is None:
            return None
        b = StringIO()
        image.save(b, format)
        return b.getvalue()

    def get_size(self, width, height):
        new_width = width
        new_height = height
        max_width = self._width_func(width, height)
        if new_width > max_width:
            new_width = max_width
            new_height = int((float(new_width) / width) * height)
        if self._height_func:
            new_height = self._height_func(new_width, new_height)
        return new_width, new_height


def get_image_frame_cnt(image_data):
    import exceptions
    # image_data: PIL image  object
    frame_cnt = 1
    if not image_data:
        return 0
    if image_data.format != 'GIF':
        return frame_cnt
    try:
        while True:
            image_data.seek(image_data.tell() + 1)
            frame_cnt += 1
    except exceptions.EOFError:
        return frame_cnt
    except:
        return frame_cnt


if __name__ == '__main__':
    ia = ImageAccessor(client=None)
    urls = []
    url = 'http://longcat.de/gif_example.gif'
    urls.append(url)
    url = 'http://i0.pstatp.com/origin/639/141874336'
    urls.append(url)
    url = 'http://i0.pstatp.com/origin/604/1563047384'
    urls.append(url)
    url = 'http://i0.pstatp.com/origin/649/875638108'
    urls.append(url)
    url = 'http://i0.pstatp.com/origin/646/1220408302'
    urls.append(url)
    url = 'http://i0.pstatp.com/origin/609/664970504'
    urls.append(url)
    url = 'http://i.pstatp.com/origin/656/4836692120'
    urls.append(url)
    url = 'http://i.pstatp.com/origin/145/689048695.jpg'
    urls.append(url)
    for i, url in enumerate(urls):
        print i, url
        import urllib2
        body = urllib2.urlopen(url).read()
        print 'original', len(body) * 1.0 / 1000, 'K'
        req = ia.as_put_image_request(body)
        for size_type in ('thumb', 'medium', 'origin'):
            img = getattr(req, size_type)
            print img.width, img.height, img.format, len(img.data) * 1.0 / 1000, 'K'
            f_name = 'test_image_%s_%s.%s' % (i, size_type, img.format.lower())
            print f_name
            with open(f_name, 'w') as f:
                f.write(img.data)
        print

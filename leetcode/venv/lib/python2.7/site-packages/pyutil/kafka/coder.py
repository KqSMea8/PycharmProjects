#coding=utf-8
from datetime import datetime
from pyutil.program.dateutil import date2timestamp

class EmptyCoder(object):
    @staticmethod
    def encode(v): return v
    @staticmethod
    def decode(v): return v

class TypeCoder(object):
    def __init__(self, for_type):
        self.for_type = for_type

    def encode(self, v):
        return v

    def decode(self, v):
        if v is None: return None
        return self.for_type(v)

class DateTimeCoder(object):
    @staticmethod
    def encode(dt):
        if dt is None: return None
        return dt.strftime('%Y-%m-%d %H:%M:%S')

    @staticmethod
    def decode(dt_str):
        if dt_str is None or isinstance(dt_str, datetime):
            return dt_str
        elif isinstance(dt_str, (int, float)):
            return datetime.fromtimestamp(dt_str)
        else:
            return datetime.strptime(dt_str, '%Y-%m-%d %H:%M:%S')

class TimestampCoder(object):
    @staticmethod
    def encode(dt):
        if dt is None: return None
        if isinstance(dt, (int, float)): return dt
        return date2timestamp(dt)

    @staticmethod
    def decode(dt):
        if dt is None or isinstance(dt, datetime):
            return dt
        else:
            return datetime.fromtimestamp(dt)

_TYPE2CODER = {
        datetime: DateTimeCoder,
        int: TypeCoder(int),
        float: TypeCoder(float),
        long: TypeCoder(long),
        bool: TypeCoder(bool),
        'timestamp': TimestampCoder,
        str: EmptyCoder,
        unicode: EmptyCoder,
        }

def register_type_coder(type_, coder):
    _TYPE2CODER[type_] = coder

def get_type_coder(type_):
    coder = _TYPE2CODER.get(type_)
    if not coder:
        if hasattr(type_, 'encode') and hasattr(type_, 'decode'):
            coder = type_
        else:
            coder = EmptyCoder
    return coder

import logging, ujson
import time
import kafka
from consumer import *
from pyutil.program.conf import Conf
from pyutil.redis.redis_proxy import make_redis_proxy_cli
from pyutil.program.log import logging_config

logging_config("./consumer.log", log_level=logging.INFO, console_log_level=logging.INFO, category="")
#def transform_message(msgs):
#    return [msg[1].message.value for msg in msgs]

def transform_message(topic, group, partition, offset, message):
    return {'id':"%d_%d"%(partition,offset), 'value':message.value}


conf = Conf('/opt/tiger/ss_conf/ss/redis.conf')
servers = conf.get_values('redis_storm')
if not servers or not servers[0]:
    print 'servers for cluster not found'
    sys.exit(-1)

try:
    # By default, StrictRedis is created
    cli = make_redis_proxy_cli(servers, socket_timeout=0.3)
except Exception, ex:
    print ex

def create_kafka_client(timeout):
    conf = Conf('/opt/tiger/ss_conf/ss/kafka.conf')
    if not isinstance(conf.kafka_broker_list, (list, tuple)):
        broker_list = conf.get_values('kafka_broker_list')
    else:
        broker_list = conf.kafka_broker_list
    if not broker_list:
        logging.error("no available kafka broker found.")
        return None
    try:
        kafka_client = kafka.KafkaClient(host=broker_list, timeout=timeout)
    except Exception:
        logging.exception('connect to kafka broker %s failed.', broker_list)
        kafka_client = None
    finally:
        return kafka_client

kafka_client = create_kafka_client(0.4)

acker = MessageAcker(cli)
consumer = AckConsumer(acker, kafka_client, "storm_test", "user_action_log", partitions=range(1), transform_message=transform_message)
#cli.delete("kafka_pending/user_action_log/storm_test/0")
#print cli.zrange("kafka_pending/user_action_log/storm_test/0",0, -1, withscores=True)
#consumer.seek(0, 2)
#consumer.commit()
for i in range(10):
    ts = time.time()
    msg = consumer.get_messages(count=1000)
    print 'get_messages',time.time() - ts
#print msg
#print transform_message(msg)
#print msg[0]
#partition = msg[0][0]
#aa = msg[0][1]
#print aa.message.value
#key = acker._get_pending_key("user_action_log", "storm_test", 0)
#consumer.ack(0, aa.offset)
#print cli.smembers(key)

#print cli.srandmember(key, 2)
#ts = time.time()
print consumer.get_pending_messages(count=10)
#print time.time() - ts
#ts = time.time()
#print consumer.get_oldest_offsets(1)
#print time.time() - ts
print consumer.get_pending_num()

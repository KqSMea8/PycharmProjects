#!/usr/bin/env python
#coding: utf-8
import requests, simplejson, logging, time, random
from threading import Thread

def load_cluster_mapping():
    try:
        r = requests.get('http://inf.byted.org/databus/topics.json')
        if r.status_code != 200:
            return {}
        return simplejson.loads(r.text)
    except:
        return {}

def load_redirections():
    try:
        with open('/opt/tiger/ss_conf/ss/kafka_redirections.json', 'r') as f:
            return simplejson.loads(f.read())
    except:
        return {}

CLUSTER_MAPPING = load_cluster_mapping()
DEFAULT_CLUSTER = 'kafka_misc'
REDIRECTIONS = None

def reload_redirection():
    global REDIRECTIONS
    value = load_redirections()
    if len(value) == 0:
        return
    REDIRECTIONS = value

# FIXME: what if this fails? correctness may not be ensured without redirections
# however, using local file implies that no error can occur unless there is a deploy issue
reload_redirection()

def redirection_reloader():
    while True:
        time.sleep(1800 + random.uniform(0, 1) * 600)
        reload_redirection()

# kafka_router is imported and only imported lazily by kafka_proxy
# hence creating thread is safe here
reloader_thread = Thread(target=redirection_reloader)
reloader_thread.daemon = True
reloader_thread.start()

def get_cluster(topic):
    if topic in CLUSTER_MAPPING:
        cluster = CLUSTER_MAPPING[topic]
    else:
        cluster = DEFAULT_CLUSTER
    logging.info('Routing topic %s to cluster %s' % (topic, cluster))
    # convert unicode to str
    return str(cluster)

def get_redirection(cluster, topic, read_only):
    ref_redirections = REDIRECTIONS
    key = '%s:%s:%s' % (cluster, topic, read_only)
    if ref_redirections is None or key not in ref_redirections:
        return None
    return ref_redirections[key]

if __name__ == '__main__':
    import sys
    # print get_cluster(sys.argv[1])
    print get_redirection('kafka_streaming', 'server_impression_log_write', False)

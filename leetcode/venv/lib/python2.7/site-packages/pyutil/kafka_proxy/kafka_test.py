#!/usr/bin/env python
#coding: utf-8

import ujson
import time
from kafka_proxy import KafkaProxy
from pyutil.program.conf import Conf
import logging
from pyutil.program.log import init_logging

def main():
    conf = Conf("/opt/tiger/ss_conf/ss/kafka.conf")
    read_handler = KafkaProxy(cluster_name="kafka_push", topic="sandbox",consumer_group="manual_commit_sandbox_test1", partitions=[1,2,3], conf=conf, key_hash=True, retry_partition=True)
    write_handler = KafkaProxy(cluster_name="kafka_push", topic="sandbox",consumer_group="manual_commit_sandbox_test", conf=conf, key_hash=True, retry_partition=True)

    index = 0
    while index < 5000:
        datas = []
        for i in xrange(32):
            datas.append(i)
        line = ujson.dumps(datas)
        if index % 128 == 0:
            print index, line
        msgs = [(str(x), "value_%s"%x) for x in datas]
        #msgs = ["value_%s"%x for x in datas]
        write_handler.write_msgs(msgs)
        index += 1
    print "write index", index 

    read_index = 0
    retry = 0
    while True:
        rets = read_handler.fetch_msgs_with_offset(count=1024)
        print read_handler.kafka_client.client_id
        #read_handler.commit()
        if rets:
            for k,ret in rets:
                #print k, ret
                #if read_index % 127 == 0:
                #    #print read_index, k, ret 
                #    print read_index, k
                read_index += 1
                print k
        else:
            print "no data"
            time.sleep(1)
            retry += 1
            #if retry >=25:
            #    break
    print "read index", read_index
    time.sleep(1)

class LogConf:
    log_level = logging.INFO
    console_log_level= logging.CRITICAL
    disable_scribe_log = True
    log_format = '%(asctime)s %(levelname)-5s %(message)s %(process)d:%(filename)s:%(lineno)d'
    def __init__(self, log_file, category=None):
        self.log_file = log_file
        self.log_category = category


if __name__ == "__main__":
    log_file = './log.log'
    log_conf = LogConf(log_file)
    init_logging(log_conf)
    main()
    i = 0
    while True:
        print i
        i += 1
        time.sleep(1)


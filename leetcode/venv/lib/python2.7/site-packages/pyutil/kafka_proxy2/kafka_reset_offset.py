#!/usr/bin/env python
# coding: utf-8

import argparse
import kafka2
from kafka2.structs import TopicPartition
from pyutil.program.conf import Conf


def parse_cmd():
    parse = argparse.ArgumentParser(description='reset offsets of the specified consumer group.')
    parse.add_argument('-c', "--cluster", type=str, required=True, help="Kafka cluster")
    parse.add_argument('-t', "--topic", type=str, required=True, help="Kafka topic")
    parse.add_argument('-g', "--group", type=str, required=True, help="Kafka consumer group name")
    parse.add_argument('-o', "--offset", type=int, required=True,
                       help="the offset corresponding to the whence per partition")
    parse.add_argument('-w', "--whence", type=int, required=True,
                       help="whence, 0 means oldest, 1 means current and 2 means newest")
    return parse


def _main(cluster, topic, consumer_group, offset, whence):
    conf = Conf("/opt/tiger/ss_conf/ss/kafka.conf")
    if cluster not in conf.get_values("valid_cluster"):
        raise ValueError('not support cluster name %s' % cluster)
    brokers = conf.get_values(cluster)
    consumer = kafka2.KafkaConsumer(group_id=consumer_group,
                                    bootstrap_servers=brokers) #api_version=(0, 10, 1)
    partitions = consumer.partitions_for_topic(topic)
    tps = [TopicPartition(topic, p) for p in partitions]
    consumer.assign(tps)
    if whence == 0:
        consumer.seek_to_beginning_with_offsets(relative_offsets=offset)
    elif whence == 1:
        for partition in consumer.assignment():
            offset_now = consumer.committed(partition)
            if offset_now is not None:
                consumer.seek(partition, offset_now + offset)
            else:
                # 没获取到该group的offset,跳到最新的位置
                consumer.seek_to_end_with_offsets(partitions=[partition], relative_offsets=offset)
    elif whence == 2:
        consumer.seek_to_end_with_offsets(relative_offsets=offset)
    else:
        raise ValueError("whence should be 0,1,2")
    consumer.update_positions()
    consumer.commit()
    consumer.close()


if __name__ == "__main__":
    parser = parse_cmd()
    args = parser.parse_args()
    _main(args.cluster, args.topic, args.group, args.offset, args.whence)


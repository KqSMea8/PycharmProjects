#!/usr/bin/env python
# coding: utf-8

import ujson
import time
from kafka_proxy import KafkaProxy
from pyutil.program.conf import Conf
import logging
import argparse
from pyutil.program.log import init_logging


def parse_cmd():
    parse = argparse.ArgumentParser(description='Auto rebalance')
    parse.add_argument('-so', "--set_offset", action="store_true", dest="set_offset", default=False, help="set_offset")
    parse.add_argument('-go', "--get_offset", action="store_true", dest="get_offset", default=False, help="get_offset")
    parse.add_argument('-gp', "--get_partition", action="store_true", dest="get_partition", default=False, help="get_partition")
    parse.add_argument('-f', "--fetch", action="store_true", dest="fetch", default=False, help="fetch")
    parse.add_argument('-p', "--produce", action="store_true", dest="produce", default=False, help="produce")
    return parse


def main():
    args = parse_cmd().parse_args()
    read_handler = KafkaProxy(cluster_name="kafka_test", topic="test_offset", consumer_group="test_offset_group")
    if args.set_offset:
        read_handler.set_consumer_offset(-10000, 0, True)
    elif args.get_offset:
        consumer_offset = read_handler.get_consumer_offset()
        print consumer_offset
    elif args.get_partition:
        print read_handler.get_partitions()
    elif args.fetch:
        while True:
            print read_handler.fetch_msgs()
            print read_handler.fetch_msgs_with_meta(1)
            print read_handler.fetch_msgs_with_offset(1)
            print read_handler.get_partitions()
    elif args.produce:
        i = 0
        while True:
            i += 1
            read_handler.write_msgs("value%d" % i)


if __name__ == "__main__":
    main()

#!/usr/bin/env python
# coding: utf-8

import argparse
import kafka2
from kafka2.vendor import six
from kafka2.structs import TopicPartition
from pyutil.program.conf import Conf


def parse_cmd():
    parse = argparse.ArgumentParser(description='Group offset migrate')
    parse.add_argument('-c', '--cluster', type=str, required=True, help='kafka cluster')
    parse.add_argument('-t', '--topic', type=str, required=True, help='topic name')
    parse.add_argument('-g', '--group', type=str, required=True, help='consumer group id')
    parse.add_argument('-s', '--storage', action='store_true', default=False,
                       help='source offset storage, True in kafka, False in zookeeper')
    parse.add_argument('-e', '--execute', action='store_true', default=False, help='execute it')
    return parse


def get_consumer_offset(brokers, group_id, topic, version=(0, 8, 1)):
    consumer = kafka2.KafkaConsumer(group_id=group_id,
                                    bootstrap_servers=brokers,
                                    api_version=version)
    partitions = consumer.partitions_for_topic(topic)
    tps = [TopicPartition(topic, p) for p in partitions]
    consumer.assign(tps)
    offsets = consumer._coordinator.fetch_committed_offsets(tps)
    consumer.close()
    return offsets


def set_consumer_offset(brokers, group_id, topic, offsets, version=(0, 10, 1)):
    consumer = kafka2.KafkaConsumer(group_id=group_id,
                                    bootstrap_servers=brokers,
                                    api_version=version)
    consumer.assign(offsets.keys())
    consumer.commit(offsets)
    consumer.close()


def main():
    args = parse_cmd().parse_args()
    conf = Conf('/opt/tiger/ss_conf/ss/kafka.conf')
    if args.cluster not in conf.get_values("valid_cluster"):
        raise ValueError('not support cluster name %s' % args.cluster)
    brokers = conf.get_values(args.cluster)
    src_version = (0, 10, 1) if args.storage else (0, 8, 1)
    dest_version = (0, 8, 1) if args.storage else (0, 10, 1)
    offsets = get_consumer_offset(brokers, args.group, args.topic, version=src_version)
    print 'Set consumer offsets from', src_version, 'to', dest_version
    print "{:<15} {:<30} {:<3} {:<15}".format("Group", "Topic", "Pid", "Offset")
    for partition, offset in six.iteritems(offsets):
        print "{:<15} {:<30} {:<3} {:<15}".format(args.group, partition.topic, partition.partition, offset.offset)
    if args.execute:
        set_consumer_offset(brokers, args.group, args.topic, offsets, version=dest_version)
        print 'Success to set consumer offsets from', src_version, 'to', dest_version


if __name__ == "__main__":
    main()


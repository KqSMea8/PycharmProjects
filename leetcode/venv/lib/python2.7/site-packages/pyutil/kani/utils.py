# coding=utf8
from __future__ import unicode_literals
import logging
import requests
import ujson
from requests.auth import HTTPBasicAuth

from pyutil.i18n.util import is_i18n_env, get_region
from ss_data.domain.const.region import Region


if is_i18n_env():
    if Region.SG in get_region():
        kani_dsn = 'https://sg-ee.byted.org/'
    else:
        kani_dsn = 'https://i-ee.byted.org/'
else:
    kani_dsn = 'https://ee.byted.org/'


class KaniSystemConfError(Exception):
    def __init__(self, options):
        self.message = 'Can not get inner app conf, please check your settings*.py'
        self.options = options

    def __str__(self):
        error_info = '%s, current options is: %s' % (self.message, repr(self.options))
        return error_info


class BadKaniRequest(Exception):
    def __init__(self, response):
        self.response = response
        try:
            self.message = ujson.loads(self.response.content).get('message', '')
        except Exception as ex:
            logging.exception(ex)
            self.message = ''

    def __str__(self):
        error_info = '[Kani] code: %d, message: %s' % (self.response.status_code, self.message)
        return error_info


class KaniSystemHandler(object):

    register_resource_api = kani_dsn + 'ratak/resources/'
    register_permission_api = kani_dsn + 'ratak/permissions/'

    resource_info_api = kani_dsn + 'ratak/resources/{resource_key}/'
    resource_permission_api = kani_dsn + 'ratak/employees/{employee_key}/resources/{resource_keys}/'
    employee_permissions_api = kani_dsn + 'ratak/employees/{employee_key}/permissions/'
    employee_groups_api = kani_dsn + 'ratak/employees/{employee_key}/groups/'
    group_permissions_api = kani_dsn + 'ratak/groups/{group_ids}/permissions/'

    def __init__(self, app_id, app_secret_key):
        self.auth = HTTPBasicAuth(app_id, app_secret_key)
        self.session = requests.Session()

    def _post(self, url, data=None, auth=None, verify=False, *args, **kwargs):
        res = self.session.post(url, data=data, auth=auth or self.auth, verify=verify, *args, **kwargs)
        try:
            content = ujson.loads(res.content)
        except Exception as ex:
            logging.error('Bad kani post.')
            logging.exception(ex)
            return {}
        if res.status_code != 200:
            raise BadKaniRequest(res)
        return content

    def _put(self, url, data=None, auth=None, verify=False, *args, **kwargs):
        res = self.session.put(url, data=data, auth=auth or self.auth, verify=verify, *args, **kwargs)
        try:
            content = ujson.loads(res.content)
        except Exception as ex:
            logging.error('Bad kani put.')
            logging.exception(ex)
            return {}
        if res.status_code != 200:
            raise BadKaniRequest(res)
        return content

    def _get(self, url, data=None, auth=None, verify=False, *args, **kwargs):
        res = self.session.get(url, data=data, auth=auth or self.auth, verify=verify, *args, **kwargs)
        try:
            content = ujson.loads(res.content)
        except Exception as ex:
            logging.error('Bad kani get.')
            logging.exception(ex)
            return {}
        if res.status_code != 200:
            raise BadKaniRequest(res)
        return content

    def register_resource(self, name, key, creator_key, owner_keys, description='', url='', admin_url='', temporary_authorize=False):
        lookup = ujson.dumps(dict(
            name=name,
            key=key,
            creator_key=creator_key,
            url=url,
            admin_url=admin_url,
            owner_keys=owner_keys,
            temporary_authorize=temporary_authorize,
            description=description,
        ))
        r = self._post(self.register_resource_api, data=lookup)
        return r

    def register_permission(self, name, action, resource_key, creator_key):
        lookup = ujson.dumps(dict(
            name=name,
            action=action,
            creator_key=creator_key,
            resource_key=resource_key
        ))
        r = self._post(self.register_permission_api, data=lookup)
        return r

    def get_resource_info(self, resource_key):
        api = self.resource_info_api.format(resource_key=str(resource_key))
        r = self._get(api)
        return r

    def get_employee_perms_by_resource_key(self, employee_key, resource_keys):
        api = self.resource_permission_api.format(employee_key=employee_key, resource_keys=','.join(resource_keys))
        r = self._get(api)
        return r

    def get_employee_perms_by_employee_key(self, employee_key):
        api = self.employee_permissions_api.format(employee_key=employee_key)
        r = self._get(api)
        return r

    def get_employee_groups(self, employee_key):
        api = self.employee_groups_api.format(employee_key=employee_key)
        r = self._get(api)
        return r

    def get_group_perms(self, group_ids):
        if isinstance(group_ids, (list, tuple)):
            group_ids_ = ','.join(group_ids)
        else:
            group_ids_ = group_ids
        api = self.group_permissions_api.format(group_ids=group_ids_)
        r = self._get(api)
        return r

    def update_resource_info(self, resource_key, **kwargs):
        lookup = {}
        update_keys = ['name', 'key', 'creator_key', 'owner_keys', 'description', 'url', 'temporary_authorize']
        api = self.resource_info_api.format(resource_key=resource_key)
        for update_key in update_keys:
            update_val = (kwargs or {}).get(update_key, None)
            if update_val is not None:
                lookup.update({update_key: update_val})
        if not lookup:
            return {}
        lookup = ujson.dumps(lookup)
        r = self._put(api, data=lookup)
        return r


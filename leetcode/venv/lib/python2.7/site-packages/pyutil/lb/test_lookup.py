#!/usr/bin/env python
# -*- coding: utf-8 -*-

import socket

import mock
import requests
from nose import tools as nosetools

from pyutil.consul import discovery
from pyutil.lb import lookup

REAL_ARCH_MARATHON = "arch.marathon"

def test_lookup_local():
    host, port = lookup.lookup_local(REAL_ARCH_MARATHON)
    nosetools.ok_(host)
    nosetools.ok_(port)
    nosetools.ok_(isinstance(port, int))

    port = int(port)
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)

    try:
        sock.connect((host, port))
    finally:
        sock.close()

    url = "http://%s:%s/v2/info" % (host, port)
    resp = requests.get(url)
    nosetools.ok_(resp)
    nosetools.eq_(200, resp.status_code)

@nosetools.raises(LookupError)
@mock.patch("pyutil.lb.client.request_bootstrap_attempt")
def test_lookup_error(mock_request_bootstrap_attempt):
    lookup.lookup_local(REAL_ARCH_MARATHON)

@nosetools.raises(LookupError)
@mock.patch("pyutil.lb.lookup.client")
def test_lookup_with_dc_suffix_0(client):
    client.request_bootstrap_attempt = mock.MagicMock(return_value=[mock.MagicMock(), None])
    lookup.lookup_local("test.service.lf")
    nosetools.eq_("test", build_request.call_args[0])

@nosetools.raises(LookupError)
@mock.patch("pyutil.lb.lookup.client")
def test_lookup_with_dc_suffix_1(client):
    client.request_bootstrap_attempt = mock.MagicMock(return_value=[mock.MagicMock(), None])
    lookup.lookup_local("test.service")
    nosetools.eq_("test.service", build_request.call_args[0])

@nosetools.raises(LookupError)
@mock.patch("pyutil.lb.lookup.client")
def test_lookup_with_dc_suffix_2(client):
    client.request_bootstrap_attempt = mock.MagicMock(return_value=[mock.MagicMock(), None])
    lookup.lookup_local("test")
    nosetools.eq_("test", build_request.call_args[0])

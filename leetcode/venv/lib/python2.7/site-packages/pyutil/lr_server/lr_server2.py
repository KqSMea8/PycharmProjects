#! /usr/bin/python
#encoding:utf8

import logging, threading
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SocketPool
from pyutil.program.conf import Conf

from ss.article.lr_server import VWPredict 
from ss.article.lr_server.ttypes import GroupScore
from ss.article.lr_server.ttypes import VWPredReq 
from ss.article.lr_server.ttypes import VWPredResp 
from ss.article.lr_server.ttypes import VWPredReq2 
from ss.article.lr_server.ttypes import VWPredResp2 
from ss.article.lr_server.ttypes import GroupFeature
#
#import VWPredict
#from ttypes import VWPredReq
#from ttypes import VWPredReq2
#from ttypes import GroupFeature

class LRServerPredictClient(threading.local):

    def __init__(self, hosts, ports, timeout=0.1, conn_timeout=0.05, retries = 2):
        self._retries = retries
        transport = SocketPool.TSocketPool(hosts, ports, timeout, conn_timeout)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)
        self.client = VWPredict.Client(protocol)
        self.client.transport = transport

    def predict(self, user_feature, group_features, model_type):
        result = None
        retry = 0
        req = VWPredReq(user_feature, group_features, model_type)
        while retry < self._retries:
            try:
                self.client.transport.open()
                result = self.client.predict(req)
            except Exception, tx:
                logging.warning("%s, retry:%d" % (tx.message, retry))
                retry += 1
            finally:
                self.client.transport.close()
            if result:
                return result
        return result


    def predict2(self, user_feature, group_features, model_type):
        result = None
        retry = 0
        new_group_features = ""
        use_new_flag = True
        for gft in group_features:
            if '#' in group_features or '$' in group_features:
                use_new_flag = False
                break
            new_group_features += "%d#%s$" %(gft.gid, gft.feature)
        if not use_new_flag:
            return predict(user_feature, group_features, model_type)

        req = VWPredReq2(user_feature, new_group_features[:-1], model_type)
        while retry < self._retries:
            try:
                self.client.transport.open()
                result = self.client.predict2(req)
            except Exception, tx:
                logging.warning("%s, retry:%d" % (tx.message, retry))
                retry += 1
            finally:
                self.client.transport.close()
            if result:
                break
        if not result:
            return None
        old_rsp = VWPredResp(model_type = result.model_type, return_type = result.return_type, scores=[])
        old_scores = []
        gss = result.scores.split('$')
        for gs in gss:
            if len(gs.strip()) < 1:
                continue
            gid,weight = gs.split('#') 
            old_scores.append(GroupScore(gid=int(gid), score=float(weight)))
            print old_scores
        old_rsp.scores.extend(old_scores)
        return old_rsp



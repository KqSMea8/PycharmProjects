import time
from ss.article.lr_server.ttypes import GroupFeature
#from lr_server import LRServerPredictClient
from lr_server import LRServerPredictClient

class TestLRServerPredict:
    def __init__(self, hosts, ports):
        self.hosts=hosts
        self.ports=ports
        pass
       
    def predict_rel(self, user_feature=None, group_features=None):
        import random
        client = LRServerPredictClient(self.hosts, self.ports)
        if user_feature==None:
            user_feature = "|p 3 184 74 66 833 35 605 6 22 21 14 202 60 686 77 1479 2911 1534 1557 1501 1515 1491 1877 1493 1889 3628 3613 3647 3606 3666 3620 3604 3599 3587 3584 3612 3646 3610 3589 3590 3654 3601 3586 3609 3592 3672 3669 3681 3671 3674 3668 3670 3673"
        if group_features==None:
            group_features = [GroupFeature(gid=int(random.random()*1000000000),feature="|h  |c news_entertainment |o 47 67 51 "), GroupFeature(gid=int(random.random()*1000000000),feature="|h  |c news_car |o 58 0 22")] 
    
        time1 = time.time()
        ret = client.predict(user_feature, group_features, 1)
        time2 = time.time()
        print "predict_rel cost :%.6f" % (time2-time1)
        print ret
    
       
    def predict_rel3(self, user_feature=None, group_features=None):
        import random
        client = LRServerPredictClient(self.hosts, self.ports)
        if user_feature==None:
            user_feature = "|p 3 184 74 66 833 35 605 6 22 21 14 202 60 686 77 1479 2911 1534 1557 1501 1515 1491 1877 1493 1889 3628 3613 3647 3606 3666 3620 3604 3599 3587 3584 3612 3646 3610 3589 3590 3654 3601 3586 3609 3592 3672 3669 3681 3671 3674 3668 3670 3673"
        if group_features==None:
            group_features = [GroupFeature(gid=int(random.random()*1000000000),feature="|h  |c news_entertainment |o 47 67 51 "), GroupFeature(gid=int(random.random()*1000000000),feature="|h  |c news_car |o 58 0 22")] 
    
        time1 = time.time()
        ret = client.predict2(user_feature, group_features, 1)
        time2 = time.time()
        print "predict_rel cost :%.6f" % (time2-time1)
        print ret
    
       
    def predict_rel2(self, user_feature=None, group_features=None):
        import random
        client = LRServerPredictClient(self.hosts, self.ports)
        if user_feature==None:
            user_feature = "|p 3 184 74 66 833 35 605 6 22 21 14 202 60 686 77 1479 2911 1534 1557 1501 1515 1491 1877 1493 1889 3628 3613 3647 3606 3666 3620 3604 3599 3587 3584 3612 3646 3610 3589 3590 3654 3601 3586 3609 3592 3672 3669 3681 3671 3674 3668 3670 3673"
        if group_features==None:
            group_features = "1233445#|h  |c news_entertainment |o 47 67 51 $1232143242#|h  |c news_car |o 58 0 22 $1232143249#|h  |c news_car |o 58 0 22 "

        time1 = time.time()
        ret = client.predict2(user_feature, group_features, 1)
        time2 = time.time()
        print "predict_rel2 cost :%.6f" % (time2-time1)
        print ret

    def predict_rel_new(self, user_feature=None, group_features=None):
        import random
        client = LRServerPredictClient(self.hosts, self.ports)
        if user_feature==None:
            user_feature = "|u UT12 MC1649 MALE4 "
        if group_features==None:
            group_features = [GroupFeature(gid=int(random.random()*1000000000),feature="|b RT4 |e  |o  |r F13 ctr_iuf:0.498366581287  grate_iuf:3.52289551543  src_cat_ctr_rel:0.469428  avgst_rel_ctr:0.0939607 GOODRELCTR111:1.0  gtagreadratio_rel:0.1604 nl_fr:0.4704 fr:0.0699 nl_su_rate:0.2710 su_rate:0.0214 rel_x_su_rate:0.0059 nl_i2:0.3415 i2:-1.3740 rel_x_i2:-0.9971 nl_rel_x_i2:0.2040 age:-0.0694 nl_stay_time:0.5908 stay_time:3.5025 nl_frn:0.5567 frn:0.5857 nl_g_rate:0.5229 g_rate:0.6516 low_quality:0.5185 simid_ctr_0:0.0922 rel_x_simid_ctr_0:0.0253 nl_rel_x_simid_ctr_0:0.4160 src_cat_ctr:0.0454 clip_simid_ctr_0:0.0922 simid_ctr:0.0922 simid_ctr_sub:0.0000 ctr_impr:0.0085 gtag_read_ratio:0.5849 good_ratio:-0.1297 extend_media:0.0000 |v  rel_x_ul_category0:0.2824  rel_x_ul_gender:0.3074  rel_x_ul_topic_cluster50:0.4871  category_match_6:1  ds:2.7116 in:0.5750 dl_t_rel:0.0455 dl_lt_t_rel:0.0752 lk_st_word:0.0756 search_keyword:0.0000 channel_category:0.0000 rel_x_channel_category_rel:0.0000 nl_lk_topic512:0.4919 lk_topic512:0.2743 nl_repin_topic512:0.6889 repin_topic512:0.0911 share_topic512:0.6064 nl_keyword_rate:0.1350 keyword_rate:0.0000 nl_topic2048_rate:0.2936 topic2048_rate:0.0000 source_rate:0.0000 nl_lk_optim_keyword:0.7555 lk_optim_keyword:0.0741 ext_category:0.1249 lk_keyword:0.1154 category_quality:0.1000 category_ctr:0.1000 category_ccr:0.1000 nl_category_symbol:0.7532 category_symbol:0.1000 category_titlelen:0.1000 category_picmode:0.1000 nl_category_staytime:0.5105 category_staytime:0.1000 gbdt2:0.2024 strategy_weight:0.5000 strategy_weight_max:0.5000 strategy_ctr_max:0.3200 strategy_ctr:0.3200 nl_st_keyword2:0.5188 st_keyword2:0.6312 st_cat_source:0.1400 st_dl_kw:0.0000 user_label_gender:0.0000 nl_st_kw_impr:0.4879 st_kw_impr:0.0000 ul_category0:0.0030 ul_city:0.0000 ul_register_age:0.0000 ul_login:0.0000 ul_platform:0.0000 ul_keyword:0.0000 ul_cluster50:0.0000 ul_cluster200:0.0000 ul_cluster500:0.0000 ul_cluster1000:0.0000 dl_keyword_3:0.0000 lk_category_match:6.0000 |s  nl_si_score:0.4748 si_score:0.0000 rel_x_si_score:0.0000 si_mscore:0.8666 |d  |l  IL0 DL0 UDL2 |x gbdt2_x_IL0:0.2024 topic2048_rate_x_IL0:0.0000 channel_category_x_IL0:0.0000 lk_st_word_x_IL0:0.1154 ctr_iuf_x_IL0:0.4984  staytime_x_grate:3.7651  rpr_rel_ctr:0.4402 lsr_rel_ctr:0.3617 simid_ctr_M_6:0.0922 |n  ctr_iuf_x_ukn_MALE4_2:0.4984 gbdt2_x_ukn_MALE4_2:0.2024 channel_category_x_ukn_MALE4_2:0.0000 lk_st_word_x_ukn_MALE4_2:0.1154 frn_x_ukn_MALE4_2:0.5857  |t wn |p age_dct0:2.5649 "), GroupFeature(gid=int(random.random()*1000000000),feature= "|b RT4 |e  |o  |r F13 ctr_iuf:0.498366581287  grate_iuf:3.52289551543  src_cat_ctr_rel:0.469428  avgst_rel_ctr:0.0939607 GOODRELCTR111:1.0  gtagreadratio_rel:0.1604 nl_fr:0.4704 fr:0.0699 nl_su_rate:0.2710 su_rate:0.0214 rel_x_su_rate:0.0059 nl_i2:0.3415 i2:-1.3740 rel_x_i2:-0.9971 nl_rel_x_i2:0.2040 age:-0.0694 nl_stay_time:0.5908 stay_time:3.5025 nl_frn:0.5567 frn:0.5857 nl_g_rate:0.5229 g_rate:0.6516 low_quality:0.5185 simid_ctr_0:0.0922 rel_x_simid_ctr_0:0.0253 nl_rel_x_simid_ctr_0:0.4160 src_cat_ctr:0.0454 clip_simid_ctr_0:0.0922 simid_ctr:0.0922 simid_ctr_sub:0.0000 ctr_impr:0.0085 gtag_read_ratio:0.5849 good_ratio:-0.1297 extend_media:0.0000 |v  rel_x_ul_category0:0.2824  rel_x_ul_gender:0.3074  rel_x_ul_topic_cluster50:0.4871  category_match_6:1  ds:2.7116 in:0.5750 dl_t_rel:0.0455 dl_lt_t_rel:0.0752 lk_st_word:0.0756 search_keyword:0.0000 channel_category:0.0000 rel_x_channel_category_rel:0.0000 nl_lk_topic512:0.4919 lk_topic512:0.2743 nl_repin_topic512:0.6889 repin_topic512:0.0911 share_topic512:0.6064 nl_keyword_rate:0.1350 keyword_rate:0.0000 nl_topic2048_rate:0.2936 topic2048_rate:0.0000 source_rate:0.0000 nl_lk_optim_keyword:0.7555 lk_optim_keyword:0.0741 ext_category:0.1249 lk_keyword:0.1154 category_quality:0.1000 category_ctr:0.1000 category_ccr:0.1000 nl_category_symbol:0.7532 category_symbol:0.1000 category_titlelen:0.1000 category_picmode:0.1000 nl_category_staytime:0.5105 category_staytime:0.1000 gbdt2:0.2024 strategy_weight:0.5000 strategy_weight_max:0.5000 strategy_ctr_max:0.3200 strategy_ctr:0.3200 nl_st_keyword2:0.5188 st_keyword2:0.6312 st_cat_source:0.1400 st_dl_kw:0.0000 user_label_gender:0.0000 nl_st_kw_impr:0.4879 st_kw_impr:0.0000 ul_category0:0.0030 ul_city:0.0000 ul_register_age:0.0000 ul_login:0.0000 ul_platform:0.0000 ul_keyword:0.0000 ul_cluster50:0.0000 ul_cluster200:0.0000 ul_cluster500:0.0000 ul_cluster1000:0.0000 dl_keyword_3:0.0000 lk_category_match:6.0000 |s  nl_si_score:0.4748 si_score:0.0000 rel_x_si_score:0.0000 si_mscore:0.8666 |d  |l  IL0 DL0 UDL2 |x gbdt2_x_IL0:0.2024 topic2048_rate_x_IL0:0.0000 channel_category_x_IL0:0.0000 lk_st_word_x_IL0:0.1154 ctr_iuf_x_IL0:0.4984  staytime_x_grate:3.7651  rpr_rel_ctr:0.4402 lsr_rel_ctr:0.3617 simid_ctr_M_6:0.0922 |n  ctr_iuf_x_ukn_MALE4_2:0.4984 gbdt2_x_ukn_MALE4_2:0.2024 channel_category_x_ukn_MALE4_2:0.0000 lk_st_word_x_ukn_MALE4_2:0.1154 frn_x_ukn_MALE4_2:0.5857  |t wn |p age_dct0:2.5649")] 

        time1 = time.time()
        ret = client.predict(user_feature, group_features, 1)
        ret2 = client.predict(user_feature, group_features, 1, disturbance=0.005)
        time2 = time.time()
        print "predict_rel2 cost :%.6f" % (time2-time1)
        print ret
        print ret2
    
    
    def process_socres(self, scores):
        import math
        for score in scores:
            real_score = 1/(math.pow(math.e, -score.score)+1)
            print "gid:%d, score:%.4f, real_score:%.4f" % (score.gid, score.score,  real_score)
    

if __name__ == "__main__":
    from pyutil.program.conf import Conf
    conf = Conf('/opt/tiger/ss_conf/ss/thrift_article.conf')
    hosts = conf.get_values('lr_server_host')
    ports = conf.get_values('lr_server_port')
    print hosts
    print ports
    hosts = ["192.168.20.41"]
    ports = ["8603"]
    test = TestLRServerPredict(hosts, ports)
    #ret = test.predict_rel()
    #if ret != None:
    #    test.process_socres(ret.scores)
    #ret = test.predict_rel3()
    #if ret != None:
    #    test.process_socres(ret.scores)
    #ret = test.predict_mm()
    #if ret != None:
    #    test.process_socres(ret.scores)

    ret = test.predict_rel_new()
    if ret != None:
        test.process_socres(ret.scores)



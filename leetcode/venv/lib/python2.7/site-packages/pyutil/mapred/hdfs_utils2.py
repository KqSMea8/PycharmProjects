#!/usr/bin/env python
#coding=utf8

import os
import sys
import subprocess

hadoop_path = "/opt/tiger/yarn_deploy/hadoop-2.3.0-cdh5.1.0/bin/hadoop "
SEP = "/"

def _check_cmd (_cmd):
    cmd = "%s fs %s" % (hadoop_path, _cmd)
    ret = os.system (cmd)
#    print "exe: %s \tret=%d" % (cmd, ret)
    return ret

def exist (file_path):
    return _check_cmd("-test -e %s" % file_path) == 0

def is_dir (file_path):
    return exist(file_path) and \
        _check_cmd("-test -d %s" % file_path) == 0

def is_file(file_path):
    return exist(file_path) and \
        _check_cmd("-test -d %s" % file_path) != 0

def remove (file_path):
    if not exist(file_path):
        return 0
    return _check_cmd("-rmr %s" % file_path)

def _run_sh (_cmd):
    cmd = "%s fs %s" % (hadoop_path, _cmd)
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    ret = p.wait()
    if ret != 0:
        print >> sys.stderr, "error! cmd=%s" % cmd
        print >> sys.stderr, str(p.stderr.read())
        return None

    else:
        return p.stdout.readlines()


class FileItem(object):
    def __init__(self, line):
        item = line.split()
        self.mod = item[0]
        self.t = item[1]
        self.user = item[2]
        self.group = item[3]
        self.size = int(item[4])
        self.date = item[5]
        self.time = item[6]
        self.path = item[7]

def ls (file_path, detail=False):
    if not exist(file_path):
        return None

    files = _run_sh("-ls %s" % file_path)
    if files is None:
        return None
        
    file_items = []
    for i in range(len(files))[1:]:
        item = FileItem(files[i])
        file_items.append(item)

    if detail:
        return file_items
    else:
        return [f.path for f in file_items]

def _file_path_nor (file_path):
    p = file_path.strip()
    if len(p) == 1 and p[0] == SEP:
        return p
    else:
        return p[:(len(p)-1)] if p.endswith(SEP) else p

def parent_path(file_path):
    '''
    if file_path is a directory, return the father directory
    if file_path is a plain file, return the directory where it is
    '''
    p = _file_path_nor(file_path)
    idx = p.rfind(SEP) + 1
    return p[:idx]

def size (file_path):
    if not exist(file_path):
        return None;
    ret = _run_sh("-dus %s" % file_path)[0]
    ss = ret.split()
    return int (ss[1])

if __name__ == "__main__":
    input_path = sys.argv[1] if len(sys.argv) == 2 else "/recommend/data/user_age/deposit/"
    #rst = is_dir ("/recommend/data/user_date/all20140503/")
    #print rst
    print "remove_file=%d" % remove('/zhuliang/test_')
    print "is_file=%s" % is_file ("/zhuliang/test_")
    print "is_file=%s" % is_file ("/zhuliang/test_mapred_job.data")
    print "is_dir=%s" % is_dir ("/zhuliang/test_mapred_job.data")
    print "is_file=%s" % is_file (input_path)
    print "is_dir=%s" % is_dir (input_path)
    print "size=%s" % size (input_path)
    

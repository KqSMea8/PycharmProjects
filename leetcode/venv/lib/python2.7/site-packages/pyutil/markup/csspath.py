import re
from lxml.cssselect import CSSSelector

def css2xpath(css_xpath, relative=False): # {{{
    '''
    Convert the css and xpath mixture to xpath

    css2xpath('td[1] a') is not yet supported

    >>> css2xpath('div.list.active')
    u"//div[@class and contains(concat(' ', normalize-space(@class), ' '), ' list ') and (@class and contains(concat(' ', normalize-space(@class), ' '), ' active '))]"
    >>> css2xpath('./span#red')
    u"./span[@id = 'red']"
    >>> css2xpath('span')
    u'//span'
    >>> css2xpath('span', relative=True)
    u'span'
    >>> css2xpath('span | div#id1')
    u"//span | //div[@id = 'id1']"
    >>> css2xpath('span, div#id1')
    u"//span | //div[@id = 'id1']"
    >>> css2xpath('div span')
    u'//div/descendant-or-self::*/span'
    >>> css2xpath('div > span')
    u'//div/span'
    >>> css2xpath('div>span')
    u'//div/span'
    >>> css2xpath('span.red')
    u"//span[@class and contains(concat(' ', normalize-space(@class), ' '), ' red ')]"
    >>> css2xpath('.red')
    u"//*[@class and contains(concat(' ', normalize-space(@class), ' '), ' red ')]"
    >>> css2xpath('div#red')
    u"//div[@id = 'red']"
    >>> css2xpath('#red')
    u"//*[@id = 'red']"
    >>> css2xpath('//h1 span/b')
    u'//h1//span/b'
    >>> css2xpath('//span[contains(concat(" ", @class, " "), " red ")]')
    u'//span[contains(concat(" ", @class, " "), " red ")]'
    >>> css2xpath('./span')
    u'./span'
    >>> css2xpath('@href')
    u'@href'
    >>> css2xpath('td[1]')
    u'//td[1]'
    >>> css2xpath('div#red[1]')
    u"//div[@id = 'red'][1]"
    >>> css2xpath('div.w645, /html/body/div[18]/div[3]/div[1]')
    u"//div[@class and contains(concat(' ', normalize-space(@class), ' '), ' w645 ')] | /html/body/div[18]/div[3]/div[1]"
    >>> css2xpath('body > div:nth-child(17) > div.col_left > div > div.w240.bgh > div:nth-child(3)')
    u"//body/*[name() = 'div' and (position() = 17)]/div[@class and contains(concat(' ', normalize-space(@class), ' '), ' col_left ')]/div/div[@class and contains(concat(' ', normalize-space(@class), ' '), ' w240 ') and (@class and contains(concat(' ', normalize-space(@class), ' '), ' bgh '))]/*[name() = 'div' and (position() = 3)]"
    >>> css2xpath('pubDate', relative=True)
    u'pubDate'
    '''

    from cssselect import HTMLTranslator
    try:
        return HTMLTranslator(xhtml=True).css_to_xpath(css_xpath, prefix='' if relative else '//')
    except:
        pass

    # div, span => //div | //span
    brackets = {']': '[', ')': '('}
    stack = []
    str_start = None
    left = 0
    parts = []
    for i, x in enumerate(css_xpath):
        if x in ['"', "'"]:
            if str_start == x:
                str_start = None
            elif str_start is None:
                str_start = x
        elif x in '''[(''':
            stack.append(x)
        elif x in '''])''':
            if stack and stack[-1] == brackets[x]:
                stack = stack[:-1]
            else:
                raise Exception('bad csspath %s' % css_xpath)
        elif x in ',|' and not stack:
            parts.append(css_xpath[left:i])
            left = i + 1
    if len(css_xpath) > left:
        parts.append(css_xpath[left:])
    parts = [x.strip() for x in parts]
    parts = [x for x in parts if x]
    if len(parts) > 1:
        return ' | '.join(map(css2xpath, parts))

    parts = re.split('(/+)', css_xpath)
    parts = filter(lambda x: x, parts)
    new_parts = []
    if is_css_path(parts[0]) and not relative:
        new_parts.append('//')

    for part in parts:
        if not part or re.match('/+', part):
            new_part = part
        elif part:
            new_part = term(part)
        if new_part:
            new_parts.append(new_part)


    return u''.join(new_parts)
# end def }}}

def is_css_path(path):
    '''
    >>> is_css_path('div.list.active')
    True
    '''
    yes = re.search(r'[.#]?[\w]+(\[.+\])?$', path) and re.match(r'[ >\w#.-]+(\[.+\])?$', path)
    return bool(yes)

def term(css_or_xpath): # {{{
    if not is_css_path(css_or_xpath): # skip non css path
        return css_or_xpath

    m = re.search(r'^(.+)(\[.+\])$', css_or_xpath)
    if m:
        css_or_xpath, tail = tuple(m.groups())
    else:
        tail = ''

    parts = re.split('([ >]+)', css_or_xpath)
    parts = filter(lambda x: x, parts)
    new_parts = []
    for part in parts:
        if re.match('^ +$', part):
            new_part = '//'
        elif re.match('[ >]+', part):
            new_part = '/'
        else:
            new_part = operand(part)
        new_parts.append(new_part)

    return ''.join(new_parts) + tail
# end def }}}

def operand(css_xpath): # {{{
    '''
    >>> operand('div.list.active')
    u"div[contains(concat(' ', normalize-space(@class), ' '), ' list ') and (contains(concat(' ', normalize-space(@class), ' '), ' active '))]"
    >>> operand('div#foo')
    u"div[@id = 'foo']"
    '''
    css_xpath = css_xpath.strip()
    name2regex = {
            'p.red': r'([-\w]+)\.([-\w]+)',
            'p#red': r'([-\w]+)#([-\w]+)',
            '.red': r'\.([-\w]+)',
            '#red': r'#([-\w]+)',
            }
    for name, regex in name2regex.iteritems():
        m = re.match(regex, css_xpath)
        if not m:
            continue
        return re.sub('^descendant-or-self::', '', CSSSelector(css_xpath).path)
    return css_xpath
# end def }}}

if __name__ == "__main__":
    import doctest
    doctest.testmod()

# -*- coding: utf-8 -*-

class MemcacheClientPair(object):
    def __init__(self, client_list):
        if not isinstance(client_list, list):
            self.client_list = [client_list]
        else:
            self.client_list = client_list

    def set(self, key, val, timeout=None, key_tmpl=None):
        final = True
        for mc in self.client_list:
            result = mc.set(key, val, timeout, key_tmpl)
            if result == 0:
                final = 0
        return final

    def get(self, key, key_tmpl=None):
        for mc in self.client_list:
            result = mc.get(key, key_tmpl)
            if result is not None:
                return result
        return None

    def mset(self, mapping, timeout=None, key_tmpl=None, split_num=1024):
        final = []
        final_set = set()
        def push_result(result):
            if isinstance(result, list):
                for k in result:
                    if k not in final_set:
                        final.append(k)
                        final_set.add(k)

        for mc in self.client_list:
            push_result(mc.mset(mapping, timeout, key_tmpl, split_num))
        return final

    def mget(self, keys, key_tmpl=None, split_num=1024):
        final = {}
        def push_result(result):
            if isinstance(result, dict):
                for k, v in result.items():
                    final[k] = v 

        keys_left = keys
        for mc in self.client_list:
            push_result(mc.mget(keys_left, key_tmpl, split_num))
            keys_not_found = [k for k in keys_left if k not in final.keys()]
            if not len(keys_not_found):
                break
            keys_left = keys_not_found

        return final


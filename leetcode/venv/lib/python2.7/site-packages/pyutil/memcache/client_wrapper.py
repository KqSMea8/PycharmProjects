#!/usr/bin/env python
# coding: utf-8
__author__ = 'zhenghuabin'

import time

import memcache
import pyutil.program.metrics2 as metrics


class ClientWrapper(object):
    METRIC_PREFIX = 'inf.memcacheclient'
    DC_POSTFIXES = ['_hy', '_lf']

    def __init__(self, conf, cluster, *args, **kwargs):
        servers = conf.get_values(cluster)
        self.client = memcache.Client(servers, *args, **kwargs)
        self.metrics_cluster = cluster
        for dc in self.DC_POSTFIXES:
            if self.metrics_cluster.endswith(dc):
                self.metrics_cluster = self.metrics_cluster[:-len(dc)]
        self._define_metrics()


    def _define_metrics(self):
        metrics.define_counter('throughput', prefix=self.METRIC_PREFIX)
        metrics.define_counter('error', prefix=self.METRIC_PREFIX)
        metrics.define_timer('latency', prefix=self.METRIC_PREFIX)
        cmds = []
        for method in dir(self.client):
            if method.startswith('_'):
                continue
            if method[0].isupper():
                continue
            if not callable(getattr(self.client, method)):
                continue
            cmds.append(method)
        metrics.define_tagkv('cmd', cmds)
        metrics.define_tagkv('cluster', [self.metrics_cluster, ])

    def __getattr__(self, item):
        '''
        :param item:
        :return:
        '''

        def wrap(*args, **kwargs):
            tagkv = {
                'cluster': self.metrics_cluster,
                'cmd': item,
            }
            func = getattr(self.client, item)
            ts = time.time()
            try:
                return func(*args, **kwargs)
            except:
                metrics.emit_counter('error', 1, self.METRIC_PREFIX)
            finally:
                latency = int((time.time() - ts) * 1000000)
                metrics.emit_counter('throughput', 1, self.METRIC_PREFIX, tagkv)
                metrics.emit_timer('latency', latency, self.METRIC_PREFIX, tagkv)

        return wrap


if __name__ == '__main__':
    from pyutil.program.conf2 import Conf
    import logging

    logging.getLogger().setLevel(logging.INFO)
    conf = Conf('/etc/ss_conf/memcache.conf')
    cli = ClientWrapper(conf, 'memcache_11211')
    key, value = 'key', 'value'
    cli.set(key, value, 5)
    logging.info('get %s -> %s', key, value)

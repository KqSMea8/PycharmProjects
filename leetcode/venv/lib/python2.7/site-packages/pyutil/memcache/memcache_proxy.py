import memcache
import random

class MemcacheProxy(memcache.Client):
    '''
    Extends python-memcache to use specific strategy to select server.
    If the client is connected to proxy, it will not need to use the server hash.
    '''

    def __init__(self, servers, *k, **kw):
        memcache.Client.__init__(self, servers, *k, **kw)
        self.last_server = None

    def _get_server(self, key):
        if isinstance(key, tuple):
            serverhash, key = key
        else:
            serverhash = memcache.serverHashFunction(key)

        '''
        We try to use the last server if connected,
        otherwise, select randomly until got a connected server
        (max retry _SERVER_RETRIES times)
        '''

        if self.last_server and self.last_server.connect():
            return self.last_server, key
        
        self.last_server = None
        if len(self.buckets) == 0:
            return None, None
        for i in range(self._SERVER_RETRIES):
            serverhash = random.randint(0, len(self.buckets) - 1)
            server = self.buckets[serverhash % len(self.buckets)]
            if server.connect():
                #print "(using server %s)" % server,
                self.last_server = server
                return self.last_server, key

        return None, None

# -*- coding: utf-8 -*-
from client import MemcacheClient

class MultMemcacheClient(object):
    def __init__(self, mc_name, key_tmpl=None, timeout=900, client=None, cpp_server_hash=True, hash_ring=False, prefix=None, use_proxy=False, socket_timeout=0.25, stats_interval=None, failure_limit=10, **kwargs):
        self.mc_conf_map = MemcacheClient.get_servers(mc_name)
        self.mc_map = {}
        for k,v in self.mc_conf_map.items():
            self.mc_map[k] = MemcacheClient(v, key_tmpl, timeout, client, cpp_server_hash, hash_ring, prefix, use_proxy, socket_timeout, stats_interval, failure_limit, **kwargs)

    def mset(self, mapping, timeout=None, key_tmpl=None, split_num=1024):
        ret = False 
        except_list = []
        for name, mc in self.mc_map.iteritems():
            try:
                result = mc.mset(mapping, timeout, key_tmpl, split_num)
                ret = len(result) == 0
            except:
                except_list.append(name)
        if except_list:
            raise Exception("%s %s mset failure!"%(except_list, self.__class__.__name__))
        return ret

    def set(self, key, val, timeout=None, key_tmpl=None):
        ret = False 
        except_list = []
        for name, mc in self.mc_map.iteritems():
            try:
                ret = mc.set(key, val, timeout, key_tmpl)
            except:
                except_list.append(name)
        if except_list:
            raise Exception("%s %s mset failure!"%(except_list, self.__class__.__name__))
        return ret

if __name__ == '__main__':
    client=MultMemcacheClient('memcache_profile_online')
    print client.mset({'ww_test':'123'})
    print client.set('ww_test', '123')

#!/usr/bin/env python
# coding: utf-8
__author__ = 'zhenghuabin'
from pyutil.consul.idc import Idc


class MultiClient(object):
    READ_CMDS = {
        'get',
        'gets',
        'get_multi',
        'mget',
    }

    def __init__(self, clients, local_update_cmds=[]):
        '''
        :param clients:
            dict: idc->client
            where client should by compatible with  memcache.Client
            @see https://pypi.python.org/pypi/python-memcached
            eg: {'hy':c1, 'lf':c2}
        :param local_update_cmds:
            all update commands will go to all clients, except that listed
            in local_update_cmds
        :return:
        '''
        self_dc = Idc.get_local_dc()
        self.clients = []
        for dc, client in clients.iteritems():
            if self_dc == dc:
                self.clients.insert(0, client)
            else:
                self.clients.append(client)
        self.local_cmds = set(self.READ_CMDS)
        self.local_cmds.update(local_update_cmds)

    def __getattr__(self, item):
        '''
        call the first client, that connects to local idc, for read commands
        call all clients for write commands
        :param item:
        :return:
        '''

        def wrap(*args, **kwargs):
            ret = None
            for client in self.clients:
                func = getattr(client, item)
                ret = func(*args, **kwargs)
                if item in self.local_cmds:
                    break
            return ret

        return wrap



#!/usr/bin/env python
# -*- coding: utf-8 -*-
import time, string, logging

logging.getLogger().setLevel(logging.DEBUG)

def basic():
    from pyutil.program.conf2 import Conf
    conf = Conf('/opt/tiger/ss_conf/ss/memcache.conf')

    from pyutil.memcache import MemcacheClient
    # 假设app名称为memcache_11211，请和memcache维护人员确定app的名称，并在ss_conf中添加对应的配置
    mc_servers = conf.get_values('memcache_11211')
    mc = MemcacheClient(mc_servers)

    time.sleep(1000)

    print 'set: %r' % mc.set('a', 'a', 100)
    print 'get: %r' % mc.get('a')

def combo():
    from pyutil.program.conf2 import Conf
    conf = Conf('/opt/tiger/ss_conf/ss/memcache.conf')

    from pyutil.memcache import SpringMemcacheClient
    # 依次传入SpringDBClient、MemcacheClient的参数
    # 更多的参数请见构造函数：local cache的参数、disable_mc、disable_lc
    c = SpringMemcacheClient({'cluster': 'springdb_sandbox', 'table': 'sandbox'},
                             {'memcache_servers': conf.get_values('memcache_11211')})

    # SpringMemcacheClient的接口和MemcacheClient的类似，暂时不支持key_tmpl
    result = c.set('a', 'aaa', 60)
    if result != True:
        print 'set failed'
    else:
        print 'set ok'

    result = c.get('a')
    if result == None:
        print 'get failed or not found'
    else:
        print 'get result:', result

    result = c.mset({'a': 1, 'b': 2}, 60)
    if result != []:
        print 'mset failed. failed keys: %s' % result
    else:
        print 'mset ok'

    result = c.mget(['a', 'b'])
    print 'mget result:', result

if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s')
    logging.getLogger().setLevel(logging.DEBUG)

    basic()
    #combo()


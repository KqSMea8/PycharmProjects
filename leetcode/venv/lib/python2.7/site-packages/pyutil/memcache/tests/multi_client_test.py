#!/usr/bin/env python
# coding: utf-8
__author__ = 'zhenghuabin'

import unittest

import mockcache
from pyutil.memcache.multi_client import MultiClient


class MockMemcache(mockcache.Client):
    def __init__(self, *args, **kwargs):
        super(MockMemcache, self).__init__(args, kwargs)

    def set_multi(self, mapping, time=0, key_prefix='', min_compress_len=0):
        for k, v in mapping.iteritems():
            self.set(k, v, time)

    def get_multi(self, keys, key_prefix=''):
        return super(MockMemcache, self).get_multi(keys)


class TestMultiClient(unittest.TestCase):
    def test_set_get(self):
        clients = {
            "hy": MockMemcache(),
            "lf": MockMemcache(),
        }
        multi_client = MultiClient(clients)
        key, value = 'foo', 'bar'
        multi_client.set(key, value)
        self.assertEqual(value, clients["hy"].get(key))
        self.assertEqual(value, clients["lf"].get(key))

    def test_get_multi(self):
        clients = {
            "hy": MockMemcache(),
            "lf": MockMemcache(),
        }
        multi_client = MultiClient(clients)
        kvs = {
            'foo': 'bar',
            'xx': 'oo',
        }
        for k, v in kvs.iteritems():
            multi_client.set(k, v)
        self.assertDictEqual(kvs, multi_client.get_multi(kvs.keys()))

    def test_set_multi(self):
        clients = {
            "hy": MockMemcache(),
            "lf": MockMemcache(),
        }
        multi_client = MultiClient(clients)
        kvs = {
            'foo': 'bar',
            'xx': 'oo',
        }
        multi_client.set_multi(kvs)
        self.assertDictEqual(kvs, multi_client.get_multi(kvs.keys()))

    def test_delete(self):
        clients = {
            "hy": MockMemcache(),
            "lf": MockMemcache(),
        }
        multi_client = MultiClient(clients)
        kvs = {
            'foo': 'bar',
            'xx': 'oo',
        }
        multi_client.set_multi(kvs)
        key = 'foo'
        multi_client.delete(key)
        kvs.pop(key)
        self.assertDictEqual(kvs, clients["hy"].get_multi(kvs.keys()))
        self.assertDictEqual(kvs, clients["lf"].get_multi(kvs.keys()))


if __name__ == '__main__':
    unittest.main()



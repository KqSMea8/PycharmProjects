#!/usr/bin/env python
# -*- coding: utf-8 -*-

import time, string, random, logging
from pyutil.program.thread import ThreadPool

import yappi

#from pyutil.memcache import MemcacheClient, MemcacheClientPair
from pyutil.memcache.extensions import MemcacheClient, MemcacheClientPair

NORMAL_SERVER_LIST = ['127.0.0.1:5096', '127.0.0.1:5096', '127.0.0.1:5096', '127.0.0.1:5096'] 
SOCKET_TIMEOUT = 0.25
EXPTIME = 600

def rand_str(n=10, prefix=''):
    #return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(n))
    if prefix:
        prefix = str(prefix) + '_'
    return str(prefix) + ''.join(random.choice(string.ascii_uppercase) for _ in xrange(n))

seq_i = 0
def gen_seq():
    global seq_i
    seq_i += 1
    return seq_i

def gen_kv_pair(num=16, rand=True):
    if rand:
        return {rand_str(16, i) : rand_str(64, i) for i in xrange(0, num)}
    else:
        return {str(i) : str(i) for i in xrange(0, num)}

loop_num = 300
batch_num = 100

key = rand_str(16)
val = rand_str(128)
kvs = gen_kv_pair(batch_num, rand=False)

def case_set(mc):
    ret = mc.set(key, val)
    if ret == 0:
        print 'E',

def case_get(mc):
    ret = mc.get(key)
    if ret is None:
        print 'E',

def case_mset(mc, kvs=kvs):
    ret = mc.set_multi(kvs)
    if len(ret) != 0:
        print 'E',

def case_mget(mc, kvs=kvs):
    ret = mc.mget(kvs.keys())
    if len(ret) != len(kvs):
        print 'E',

mc_list = {
    'mc': MemcacheClient(NORMAL_SERVER_LIST, timeout=EXPTIME, key_tmpl='mc_perf_%s', socket_timeout=SOCKET_TIMEOUT),
}
def run():
    kvs = gen_kv_pair(batch_num)
    for mc_name, mc in mc_list.items():
        case_mset(mc, kvs)

        ts = time.time()
        for idx in xrange(loop_num):
            #case_set(mc)
            case_mget(mc, kvs)
            #case_mget(mc)
        te = time.time()
        print 'mc_name  total: %s s, avg: %s ms' % (te - ts, (te - ts) / loop_num * 1000)

def multi_run():
    threadpool = ThreadPool(5)
    for x in xrange(5):
        threadpool.queue_task(run)
    threadpool.join_all()

def main():
    yappi.start()
    yappi.set_clock_type('CPU')

    run()
    #multi_run()
        
    yappi.stop()
    o = yappi.get_func_stats()
    o.sort('tsub')
    o.print_all(columns={0:("name",80), 1:("ncall", 5), 2:("tsub", 8), 3:("ttot", 8), 4:("tavg",8)})

main()


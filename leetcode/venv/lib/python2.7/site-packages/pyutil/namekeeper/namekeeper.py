import logging
import os
import socket
import sys
import random
import tempfile
import getpass
import json
from datetime import datetime, timedelta
from time import time

try:
    import msgpack
    if msgpack.version < (0, 4):
        from . import msgpack
except ImportError:
    from . import msgpack

PY2 = sys.version_info[0] == 2
logging = logging.getLogger("namekeeper")

try:
    import snappy
except ImportError:
    snappy = None

_cache = {}


def getone(name, cluster="default", cachetime=3):
    instances = getservice(name, cluster=cluster, cachetime=cachetime)
    total = 0
    for i in instances:
        total += i[3]
    total = random.randint(0, total)
    for i in instances:
        total -= i[3]
        if total <= 0:
            return i[:2]
    return random.choice(instances)


def getservice(name, cluster="default", cachetime=3):
    now = time()
    key = name + "|" + cluster
    item = _cache.get(key)
    if item and now - item[1] < cachetime:
        return item[0]
    _refresh_namekeeper(now)
    try:
        ii = _getservice(name, cluster=cluster)
        if not ii:
            raise ValueError("service:%s cluster:%s namekeeper resp empty" %
                             (name, cluster))
        _cache[key] = item = (ii, now)
    except Exception as e:
        logging.exception("getservice ex %s", e)
        if not item:
            raise
        _cache[key] = item = (item[0], now)
    return item[0]


INSTANCES = "ii"
SERVICE = "s"
ADDR = "a"
WEIGHT = "w"
RID = "rid"
NOCOMPRESS = "nc"
LIMIT = "l"
OP = "op"
CLUSTER = "c"

servers = []


def _jointmp(n):
    return os.path.join(tempfile.gettempdir(), n)


nkcache = _jointmp("namekeeper.%s.cache" % (getpass.getuser() or "nobody"))

_q_dns = True
try:
    with open(nkcache) as f:
        j = json.load(f)
    servers = [h.split(":") for h in j["addrs"]]
    servers = [(h[0], int(h[1])) for h in servers]
    u = datetime.strptime(j["u"][:19], "%Y-%m-%dT%H:%M:%S")
    age = datetime.now() - u
    if age < timedelta(hours=1):
        _q_dns = False
except Exception as e:
    if not isinstance(e, IOError):
        print(e)
    pass

utime = 0
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(0.1)


def _instances(ii):
    ret = []
    for i in random.sample(ii, len(ii)):
        r = i[ADDR].split(":")
        ret.append((r[0], int(r[1]), i[CLUSTER], i[WEIGHT]))
    return tuple(ret)  # (host, port, cluster, weight)


_q = dict(((NOCOMPRESS, snappy is None), (OP, 1), (LIMIT, 200)))


def _getservice(name, cluster="default"):
    rid = "%x" % random.getrandbits(128)
    q = _q.copy()
    q[RID] = rid
    q[SERVICE] = name
    q[CLUSTER] = cluster
    exceptions = []
    addrs = random.sample(servers, 3) if len(servers) > 3 else servers
    for addr in addrs:
        sock.sendto(msgpack.dumps(q), addr)
        while True:
            try:
                b, _ = sock.recvfrom(65535)
                b = snappy.uncompress(b) if snappy else b
                encoding = "utf8" if not PY2 else None
                r = msgpack.loads(b, encoding=encoding, use_list=False)
            except Exception as e:
                if len(exceptions) > 0:
                    logging.exception("recvfrom ex %s", e)
                exceptions.append(e)
                break
            if r.get(RID) != rid:
                continue
            return _instances(r.get(INSTANCES) or [])
    raise exceptions[0]


if _q_dns:
    try:
        hosts = socket.gethostbyname_ex("namekeeper-api.byted.org")[2]
        if len(hosts) > 0:
            servers = [(h, 2012) for h in hosts]
            ss = _getservice("toutiao.naming.namekeeper", cluster="")
            servers = [(s[0], s[1]) for s in ss]
            j = {}
            j["addrs"] = [s[0] + ":" + str(s[1]) for s in ss]
            j["u"] = datetime.now().strftime("%Y-%m-%dT%H:%M:%S") + "+08:00"
            tmpfile = _jointmp("%s-w.tmp" % os.getpid())
            with open(tmpfile, "w") as f:
                json.dump(j, f)
            os.rename(tmpfile, nkcache)
    except Exception as e:
        print(e)
        pass


def _refresh_namekeeper(t=None):
    global servers, utime
    t = t or time()
    if t - utime < 180:
        return servers
    try:
        ss = _getservice("toutiao.naming.namekeeper", cluster="")
    except Exception as e:
        logging.exception("refresh_servers ex %s", e)
        return servers
    if len(ss) == 0:
        return
    servers = tuple([s[:2] for s in ss])
    utime = t
    return servers


if __name__ == "__main__":

    def print_instances(ii):
        for i in sorted(ii):
            print(i)

    if len(sys.argv) == 1:
        print_instances(getservice("toutiao.naming.namekeeper", cluster=""))
    elif len(sys.argv) == 2:
        print_instances(getservice(sys.argv[1], cluster=""))
    elif len(sys.argv) == 3:
        print_instances(getservice(sys.argv[1], cluster=sys.argv[2]))

#coding:utf-8
from pyutil.pps.user_data_writer import UserDataWriter

# README
# 如果一个产品线要增加发送
# 1. 添加app_id到product名字的映射
# 2. 添加writer的构造参数到USER_DATA_WRITER_ARGS

# product是本脚本内部用的标示依据，往往是产品线的名字
PRODUCT_TO_APP_IDS = {
    'toutiao': set([13, 19, 26, 35]),
    'hotsoon': set([1112, 1115]),
    'hypstar': set([1145, 1257, 1164]),
    'trill': set([1180]),
    'aweme': set([1128]),
    'neihan': set([7,20,22]),
    'xigua': set([32]),
    'qudu': set([1206, 1226, 1183, 1212, 1221, 1261, 1218]),
    'muse': set([1233]),
    'motor': set([36]),
    'bds': set([1319]),
    'stock': set([1182]),
    'bcy': set([1250]),
}
APP_ID_TO_PRODUCT = {}
for product, app_ids in PRODUCT_TO_APP_IDS.iteritems():
    for app_id in app_ids:
        APP_ID_TO_PRODUCT[app_id] = product

# key是product
USER_DATA_WRITER_ARGS = {
    'toutiao': {'kafka_topic': 'strong_push_features', 'parts': 2048},
    'hotsoon': {'kafka_topic': 'pps_hotsoon_user_data', 'parts': 512},
    'hypstar': {'kafka_topic': 'pps_hypstar_user_data128', 'parts': 128},
    'trill': {'kafka_topic': 'pps_trill_user_data128', 'parts': 128},
    'aweme': {'kafka_topic': 'pps_aweme_user_data', 'parts': 512},
    'neihan': {'kafka_topic': 'pps_neihan_push_features', 'parts': 512},
    'qudu': {'kafka_topic': 'pps_qudu_push_features', 'parts': 512},
    'xigua': {'kafka_topic': 'pps_xigua_push_features', 'parts': 1024},
    'bds': {'kafka_topic': 'pps_bds_push_features', 'parts': 512},
    'stock': {'kafka_topic': 'pps_stock_push_feature', 'parts': 256},
    'bcy': {'kafka_topic': 'pps_bcy_user_data', 'parts': 512},
}

USER_DATA_WRITER_ARGS_US = {
    "hypstar": {'kafka_topic': 'pps_hypstar_user_data128', 'kafka_cluster': 'kafka_main_aws_us', 'parts': 128, 'buffer_time':60},
    "trill": {'kafka_topic': 'pps_trill_user_data128', 'kafka_cluster': 'kafka_main_aws_us', 'parts': 128, 'buffer_time': 60},
    'muse': {'kafka_topic': 'pps_muse_user_data', 'kafka_cluster': 'kafka_musical_maliva', 'parts': 512, 'buffer_time': 60},
}

USER_DATA_WRITER_ARGS_ALISG = {
    "trill": {'kafka_topic': 'pps_trill_user_data128', 'kafka_cluster': 'kafka_mm_alisg', 'parts': 128, 'buffer_time': 60},
    "hypstar": {'kafka_topic': 'pps_hypstar_user_data128', 'kafka_cluster': 'kafka_mm_alisg', 'parts': 128, 'buffer_time': 60},
}

PRIORITIZED_USER_DATA_WRITER_ARGS = {
    'hotsoon': {'kafka_topic': 'pps_hotsoon_prioritized_user_data', 'parts': 512, 'buffer_time': 60},
    'aweme': {'kafka_topic': 'pps_aweme_prioritized_user_data', 'parts': 512, 'buffer_time': 60},
    'toutiao': {'kafka_topic': 'pps_push_features', 'parts': 2048}  # 只有个推pps消费这个topic
}

PRIORITIZED_USER_DATA_WRITER_ARGS_US = {
}

def get_app_ids(product):
    if product not in PRODUCT_TO_APP_IDS:
        raise ValueError('product %s not found in PRODUCT_TO_APP_IDS' % product)
    return PRODUCT_TO_APP_IDS[product]

def get_product(app_id):
    return APP_ID_TO_PRODUCT.get(app_id, 'unknown')

_writers = {}
# lazy init, 如果有定制构造参数的话，可以考虑新增一个init_user_data_writer的接口，让业务显示初始化
def get_user_data_writer_helper(product, idc, priority, writers_args, from_job_name):
    global _writers
    if idc not in _writers:
        _writers[idc] = {}
    if priority not in _writers[idc]:
        _writers[idc][priority] = {}
    writers = _writers[idc][priority]
    writers_args[product]['from_job_name'] = from_job_name
    if product not in writers:
        if product not in writers_args:
            raise ValueError('product %s not found in USER_DATA_WRITER_ARGS' % product)
        writers[product] = UserDataWriter(**writers_args[product])
    return writers[product]

def get_user_data_writer(product, idc="cn", from_job_name = "no_define"):
    writers_args = USER_DATA_WRITER_ARGS
    if idc == 'us':
        writers_args = USER_DATA_WRITER_ARGS_US
    elif idc == 'alisg':
        writers_args = USER_DATA_WRITER_ARGS_ALISG
    return get_user_data_writer_helper(product, idc, 'default_writer', writers_args, from_job_name)

def get_prioritized_user_data_writer(product, idc="cn", from_job_name = "no_define"):
    writers_args = PRIORITIZED_USER_DATA_WRITER_ARGS_US if idc == 'us' else PRIORITIZED_USER_DATA_WRITER_ARGS
    return get_user_data_writer_helper(product, idc, 'prioritized_writer', writers_args, from_job_name)

if __name__ == '__main__':
    import pyutil.pps.push_task_pb2 as pps_pb
    writer = get_user_data_writer('toutiao')
    for i in range(1000):
        ud = pps_pb.UserData()
        ud.did = 39960872166
        ud.device_info.uid = 19850718
        ud.device_info.ut = 12
        writer.write(ud.did, ud)
#    print get_user_data_writer('essay')

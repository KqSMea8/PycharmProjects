#coding:utf-8
from pyutil.net.get_local_ip import get_local_ip
from pyutil.program.conf import Conf
from pyutil.program.lru import ExpiringLRUCache
from pyutil.thrift.thrift_util import ThriftClient
from ss_thrift_gen.device_info.ttypes import GetProductAppByMarksRequest
from ss_thrift_gen.base.ttypes import Base
import logging

class AppProduct(object):
    '''
    device service 服务是Growth同学维护，目前还不支持服务发现
    '''
    def __init__(self, conf='/opt/tiger/ss_conf/ss/thrift_device_info.conf', timeout=100, expire_timeout=5):
        from ss_thrift_gen.device_info.DeviceService import Client
        _conf = Conf(conf)
        servers = []
        for s in _conf.get_values('device_info_thrift_servers'):
            host, port = s.split(':')
            servers.append([host, int(port)])
        self._client = ThriftClient(servers, Client, timeout)
        self._base = Base(Caller='push.pps.app_name', Addr=get_local_ip())
        self._expire_lru_cache = ExpiringLRUCache(100000, default_timeout=expire_timeout)
        self._retry = 4

    def _get_app_info(self, app_name=None, app_id=None):
        for _ in range(self._retry):
            try:
                req = GetProductAppByMarksRequest()
                req.app_name = app_name
                req.app_id = app_id
                req.base = self._base
                self._client.open()
                rsp = self._client.GetProductAppByMarks(req)
                app_name = rsp.product_app.app_name
                app_id = rsp.product_app.app_id
                self._expire_lru_cache.set(app_name, app_id)
                self._expire_lru_cache.set(app_id, app_name)
                break
            except Exception as ex:
                logging.error('get_app_info exception, app_name: %s ex: %s', app_name, ex)
            finally:
                self._client.close()

    def get_app_name_from_app_id(self, app_id):
        if not self._expire_lru_cache.get(app_id):
            self._get_app_info(app_id=app_id)
        return self._expire_lru_cache.get(app_id)

    def get_app_id_from_app_name(self, app_name):
        if not self._expire_lru_cache.get(app_name):
            self._get_app_info(app_name=app_name)
        return self._expire_lru_cache.get(app_name)

if __name__ == '__main__':
    app_product = AppProduct()
    for app_name in ['live_stream', 'live_stream_pro', 'trill', 'live_i18n']:
        print app_product.get_app_id_from_app_name(app_name)
    for app_id in [1112, 1115, 1145]:
        print app_product.get_app_id_from_app_name(app_id)

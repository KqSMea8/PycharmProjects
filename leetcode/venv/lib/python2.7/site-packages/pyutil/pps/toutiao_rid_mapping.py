# encoding:utf-8
import datetime
import random
from pyutil.program.conf import Conf
from pyutil.program.db import DAL
from pyutil.program.lru import ExpiringLRUCache
from pyutil import pyredis

def make_key(*args):
    return ':'.join(map(str, args))

def get_today_version():
    today = datetime.date.today()
    return (today - datetime.date(2000, 1, 1)).days

class RidMapping(object):
    def __init__(self, use_test_db=False):
        self.redis_cache = None
        if use_test_db:
            self.redis_cache = pyredis.make_redis_client('toutiao.redis.push_rid_mapping_test')
            self.rate_db = DAL(host="10.6.19.35",
                               port=3307,
                               user='pushtestdb_w',
                               passwd='td1lgS4wr2nbxuY1_f2ZAkRSoWbryeTB',
                               name='pushtestdb')
        else:
            self.redis_cache = pyredis.make_redis_client('toutiao.redis.push_rid_mapping')
            conf = Conf('/opt/tiger/ss_conf/ss/db_ratedb.conf')
            self.rate_db = DAL(host=conf.ss_ratedb_write_host,
                               port=conf.ss_ratedb_write_port,
                               user=conf.ss_ratedb_write_user,
                               passwd=conf.ss_ratedb_write_password,
                               name=conf.ss_ratedb_name)

        # [l, r)
        self.source_ranges = {
            "app_alert_rule" : (0, 10000000),
            "try_push" : (10000000, 20000000),
            "city_try_push" : (20000000, 30000000),
            "notification" : (30000000, 40000000),
            "weather_auto" : (40000000, 41000000),
            "local_wenda" : (41000000, 42000000),
            "wenda": (42000000, 43000000),
            "long_term": (43000000, 44000000),
            "beauty": (44000000, 45000000),
            "activity": (50000000, 51000000),
            "from_strong": (51000000, 52000000),
            "qudu_push": (52000000, 53000000),
            "neihan": (53000000, 54000000),
            "bds": (54000000, 55000000)
        }
        self.default_range = (90000000, 100000000)
        self.cache = ExpiringLRUCache(1000000)

    def get_gid_by_rid(self, rid, version=None):
        if not version:
            version = get_today_version()
        gid = self.redis_cache.get(rid)
        if gid:
            return int(gid) if int(gid) >= 0 else None

        sql = "select gid from rid_mapping \
               where version in (%s, %s) and rid=%s order by version desc limit 1" % (version, version-1, rid)
        result = None
        try:
            result = self.rate_db.execute(sql).fetchall()
        except:
            pass

        if not result:
            self.redis_cache.set(rid, -1, ex=600)
            return None
        else:
            gid = result[0]['gid']
            self.redis_cache.set(rid, gid, ex=3600 * 24)
            return gid

    def get_rid(self, gid, source, extra, version=None):
        if not version:
            version = get_today_version()
        k = make_key('g', gid, source, extra, version)
        rid = self.cache.get(k)
        if rid:
            return rid
        sql = "select rid from rid_mapping \
               where gid=%s and source='%s' and extra='%s' and version=%s \
               order by version desc limit 1" % (gid, source, extra, version)
        result = None
        try:
            result = self.rate_db.execute(sql).fetchall()
        except:
            return None

        if result:
            rid = result[0]['rid']
            self.cache.set(k, rid)
            return rid
        else:
            return None

    def record_rid(self, rid, gid, source, extra='', version=None,
                       start_time=None, end_time=None, title='', content='', payload=''):
        if not version:
            version = get_today_version()

        k = make_key('record', version, rid)
        res = self.cache.get(k, None)
        if res is not None:
            return res

        sql = "insert ignore into rid_mapping(`version`,`rid`,`gid`,`source`,`extra`, `start_time`, `end_time`, `title`, `content`, `payload`)\
            values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"
        try:
            ret = self.rate_db.execute(sql, version, rid, gid, source, extra,
                                       start_time, end_time, title, content, payload)
            self.cache.set(k, False)
            self.redis_cache.set(rid, gid, ex=3600 * 24)

            return ret.rowcount > 0
        except:
            return False

    def record_rid_gid(self, task_id, gid, source, extra='', version=None,
                       start_time=None, end_time=None, title='', content='', payload=''):
        if not version:
            version = get_today_version()

        range_l, range_r = self.source_ranges.get(source, self.default_range)
        seed = task_id
        rid = range_l + seed % (range_r - range_l)

        k = make_key('record', version, rid)
        res = self.cache.get(k, None)
        if res is not None:
            return res

        sql = "insert ignore into rid_mapping(`version`,`rid`,`gid`,`source`,`extra`, `start_time`, `end_time`, `title`, `content`, `payload`)\
            values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"
        try:
            ret = self.rate_db.execute(sql, version, rid, gid, source, extra,
                                       start_time, end_time, title, content, payload)
            self.cache.set(k, False)
            self.redis_cache.set(rid, gid, ex=3600 * 24)

            return ret.rowcount > 0
        except:
            return False

    def alloc_rid(self, gid, source, extra='', hint=None, **kwargs):
        version = get_today_version()
        rid = self.get_rid(gid, source, extra, version)
        if rid:
            return rid

        if hint is None:
            try:
                hint = self.redis_cache.incr(make_key("atomincr:hint:", source))
            except:
                hint = hash(str(gid))
        range_l, range_r = self.source_ranges.get(source, self.default_range)
        seed = hint if hint else gid
        rid = range_l + seed % (range_r - range_l)
        self.record_rid_gid(rid, gid, source, extra, **kwargs)
        return rid


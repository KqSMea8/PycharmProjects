#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TQueryBackendType:
  HIVE = 0
  SPARK_SQL = 1
  IMPALA = 2
  PRESTO = 3
  KYLIN = 4

  _VALUES_TO_NAMES = {
    0: "HIVE",
    1: "SPARK_SQL",
    2: "IMPALA",
    3: "PRESTO",
    4: "KYLIN",
  }

  _NAMES_TO_VALUES = {
    "HIVE": 0,
    "SPARK_SQL": 1,
    "IMPALA": 2,
    "PRESTO": 3,
    "KYLIN": 4,
  }


class TQueryBackendAffinity:
  """
  Attributes:
   - type
   - affinity
   - rewrittenQuery
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.DOUBLE, 'affinity', None, None, ), # 2
    (3, TType.STRING, 'rewrittenQuery', None, None, ), # 3
  )

  def __init__(self, type=None, affinity=None, rewrittenQuery=None,):
    self.type = type
    self.affinity = affinity
    self.rewrittenQuery = rewrittenQuery

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.affinity = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.rewrittenQuery = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TQueryBackendAffinity')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.affinity is not None:
      oprot.writeFieldBegin('affinity', TType.DOUBLE, 2)
      oprot.writeDouble(self.affinity)
      oprot.writeFieldEnd()
    if self.rewrittenQuery is not None:
      oprot.writeFieldBegin('rewrittenQuery', TType.STRING, 3)
      oprot.writeString(self.rewrittenQuery)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.affinity is None:
      raise TProtocol.TProtocolException(message='Required field affinity is unset!')
    if self.rewrittenQuery is None:
      raise TProtocol.TProtocolException(message='Required field rewrittenQuery is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.affinity)
    value = (value * 31) ^ hash(self.rewrittenQuery)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TQueryResourceEstimation:
  """
  Attributes:
   - dataExchangeInMemory
   - dataExchangeWithDisk
   - memoryUsageInBytes
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dataExchangeInMemory', None, None, ), # 1
    (2, TType.I64, 'dataExchangeWithDisk', None, None, ), # 2
    (3, TType.I64, 'memoryUsageInBytes', None, None, ), # 3
  )

  def __init__(self, dataExchangeInMemory=None, dataExchangeWithDisk=None, memoryUsageInBytes=None,):
    self.dataExchangeInMemory = dataExchangeInMemory
    self.dataExchangeWithDisk = dataExchangeWithDisk
    self.memoryUsageInBytes = memoryUsageInBytes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dataExchangeInMemory = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.dataExchangeWithDisk = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.memoryUsageInBytes = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TQueryResourceEstimation')
    if self.dataExchangeInMemory is not None:
      oprot.writeFieldBegin('dataExchangeInMemory', TType.I64, 1)
      oprot.writeI64(self.dataExchangeInMemory)
      oprot.writeFieldEnd()
    if self.dataExchangeWithDisk is not None:
      oprot.writeFieldBegin('dataExchangeWithDisk', TType.I64, 2)
      oprot.writeI64(self.dataExchangeWithDisk)
      oprot.writeFieldEnd()
    if self.memoryUsageInBytes is not None:
      oprot.writeFieldBegin('memoryUsageInBytes', TType.I64, 3)
      oprot.writeI64(self.memoryUsageInBytes)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dataExchangeInMemory is None:
      raise TProtocol.TProtocolException(message='Required field dataExchangeInMemory is unset!')
    if self.dataExchangeWithDisk is None:
      raise TProtocol.TProtocolException(message='Required field dataExchangeWithDisk is unset!')
    if self.memoryUsageInBytes is None:
      raise TProtocol.TProtocolException(message='Required field memoryUsageInBytes is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataExchangeInMemory)
    value = (value * 31) ^ hash(self.dataExchangeWithDisk)
    value = (value * 31) ^ hash(self.memoryUsageInBytes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TQueryComplexityResponse:
  """
  Attributes:
   - formattedHql
   - backendAffinities
   - estimation
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'formattedHql', None, None, ), # 1
    (2, TType.LIST, 'backendAffinities', (TType.STRUCT,(TQueryBackendAffinity, TQueryBackendAffinity.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'estimation', (TQueryResourceEstimation, TQueryResourceEstimation.thrift_spec), None, ), # 3
  )

  def __init__(self, formattedHql=None, backendAffinities=None, estimation=None,):
    self.formattedHql = formattedHql
    self.backendAffinities = backendAffinities
    self.estimation = estimation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.formattedHql = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.backendAffinities = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = TQueryBackendAffinity()
            _elem5.read(iprot)
            self.backendAffinities.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.estimation = TQueryResourceEstimation()
          self.estimation.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TQueryComplexityResponse')
    if self.formattedHql is not None:
      oprot.writeFieldBegin('formattedHql', TType.STRING, 1)
      oprot.writeString(self.formattedHql)
      oprot.writeFieldEnd()
    if self.backendAffinities is not None:
      oprot.writeFieldBegin('backendAffinities', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.backendAffinities))
      for iter6 in self.backendAffinities:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.estimation is not None:
      oprot.writeFieldBegin('estimation', TType.STRUCT, 3)
      self.estimation.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.formattedHql is None:
      raise TProtocol.TProtocolException(message='Required field formattedHql is unset!')
    if self.backendAffinities is None:
      raise TProtocol.TProtocolException(message='Required field backendAffinities is unset!')
    if self.estimation is None:
      raise TProtocol.TProtocolException(message='Required field estimation is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.formattedHql)
    value = (value * 31) ^ hash(self.backendAffinities)
    value = (value * 31) ^ hash(self.estimation)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidHqlException(TException):
  """
  Attributes:
   - hql
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hql', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, hql=None, message=None,):
    self.hql = hql
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hql = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidHqlException')
    if self.hql is not None:
      oprot.writeFieldBegin('hql', TType.STRING, 1)
      oprot.writeString(self.hql)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.hql is None:
      raise TProtocol.TProtocolException(message='Required field hql is unset!')
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hql)
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

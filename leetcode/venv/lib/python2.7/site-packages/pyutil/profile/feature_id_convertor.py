#!/usr/bin/env python
#encoding=utf8
import MySQLdb, sys, logging, md5
from pyutil.program.conf import Conf

class FeatureIdConvertor:
    def __init__(self, conf):
        self.conf = conf
        self.feature_id_table = {}
        self.conn = None
        self.cursor = None
        self.__connect_db()

    def __connect_db(self):
        self.conn = MySQLdb.connect(host=self.conf.get('profile_write_host'),\
            port=int(self.conf.get('profile_write_port')),
            user=self.conf.get('profile_write_user'),
            passwd = self.conf.get('profile_write_password'),
            db = self.conf.get('profile_db_name'))
        self.cursor = self.conn.cursor()
        self.cursor.execute('SET CHARACTER SET utf8;')
        self.conn.autocommit(True)

    def query_db(self, family_id, origin):
        try:
            sql = 'SELECT id FROM feature_id_map WHERE family_id=%s AND sign=unhex(md5("%s"))' % (family_id, origin)
            self.cursor.execute(sql)
            rs = self.cursor.fetchall()
            if not rs:
                sql = 'INSERT IGNORE INTO feature_id_map(family_id,sign,origin) VALUES(%s,unhex(md5("%s")),"%s")' % (family_id, origin, origin)
                self.cursor.execute(sql)
                fid = self.conn.insert_id()
                logging.info('succeed add (family_id=%s, origin=%s) as %s' % (family_id, origin, fid))
                return fid
            return rs[0][0]
        except:
            logging.exception('failed to query db')
            self.__connect_db()
            return None

    def convert(self, family_id, origin):
        key = (family_id, origin)
        if key in self.feature_id_table:
            return self.feature_id_table[key]
        fid = self.query_db(family_id, origin)
        if fid != None:
            self.feature_id_table[key] = fid
        return fid

if __name__ == '__main__':
    conf = Conf('/opt/tiger/ss_conf/ss/db_profile.conf')
    id_convertor = FeatureIdConvertor(conf)
    print id_convertor.query_db(1, u'孟非'.encode('utf8'))

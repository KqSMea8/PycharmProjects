#!/usr/bin/env python
#coding:utf-8
import threading, logging
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SocketPool
from pyutil.program.icrawler_util import str_dict
from pyutil.program.retry_limiter import RetryLimiter
from ss_thrift_gen.profile.ProfileProvider import Client

class ThriftProfileClient(threading.local):

    def __init__(self, hosts, ports, timeout=0.1, conn_timeout=0.05, retries=3, nonblock=True):
        transport = SocketPool.TSocketPool(hosts, ports, timeout, conn_timeout)
        if nonblock:
            transport = TTransport.TFramedTransport(transport)
        else:
            transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self.client = Client(protocol)
        self.client.transport = transport
        self.retries = retries

    def _call(self, api, req, msg):
        retry_limiter = RetryLimiter("profile_server", self.retries)
        last_err_msg = ''
        while retry_limiter.can_retry():
            try:
                self.client.transport.open()
                fun = getattr(self.client, api)
                return fun(req)
            except Exception, ex:
                last_err_msg = str(ex)
            finally:
                self.client.transport.close()

        logging.warn('failed to %s after %d retries, %s',
                     msg, retry_limiter.retried(), last_err_msg)
        return None

    def get_user_profile(self, req):
        return self._call('up_get', req, 'get user profile')

    def get_user_profiles(self, req):
        return self._call('up_mget', req, 'get user profiles')

    def get_group_profile(self, req):
        return self._call('gp_get', req, 'get group profile')

    def get_group_profiles(self, req):
        return self._call('gp_mget', req, 'get group profiles')

    def set_user_profile(self, req):
        return self._call('up_put', req, 'set user profile')

    def set_group_profile(self, req):
        return self._call('gp_put', req, 'set group profile')


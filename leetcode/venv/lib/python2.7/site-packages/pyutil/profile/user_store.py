import logging, sys, json, time, os, pdb
from datetime import datetime
from pyutil.cache.locmem import LocMemCache

from profile_client import ThriftProfileClient
from conf import ALL_FEATURES, DISLIKE_FEATURES


class UserProfileStore:
    def __init__(self, feature_util, profile_client):
        self.feature_util = feature_util
        self.profile_client = profile_client 

    def get_profiles(self, users, fnames=ALL_FEATURES, encode=True):
        from struct import unpack_from, calcsize
        from ss_thrift_gen.profile.ttypes import UserProfileMGetReq, User, FeatureType, CachePolicy

        users_ = [User(uid_type=uid_type, uid=uid) for uid_type, uid in users]
        cp = CachePolicy(read_cache=True, update_cache=True)
        rsp = self.profile_client.get_user_profiles(UserProfileMGetReq(users_, fnames, cp))

        ret = {}
        for user, fs in rsp.features.iteritems():
            p = {}
            uid_type, uid = user.split(':')
            uid_type, uid = int(uid_type), long(uid) 
            for fname, value in fs.iteritems():
                profile = {} 
                item_size = calcsize('If')
                offset = 0
                while offset < len(value):
                    k, v = unpack_from('If', value, offset)
                    profile[k] = v
                    offset += item_size

                if not encode:
                    profile = {self.feature_util.get_feature_name(k):v for k, v in profile.iteritems()}

                p[fname] = profile 
            ret[(uid_type, uid)] = p
        
        return ret 


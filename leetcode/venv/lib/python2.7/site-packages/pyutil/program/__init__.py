import os, signal, time, logging, multiprocessing, sys

signal_names = {k: v for v, k in signal.__dict__.items() if v.startswith('SIG')}
def exit_signal_handler(sig=None, frame=None):
    # !!!WARNING
    # logging in a signal handler is strongly not recommended!
    # Because this may cause a deadlock in toutiao environment
    #   when multi-process-file-handler is used
    # See wiki: https://wiki.bytedance.net/pages/viewpage.action?pageId=51356544
    #
    # I suggest you writing your own signal handler with `logging` eliminated
    logging.info('catch signal %s, exit ...', signal_names.get(sig, sig))

    while(multiprocessing.active_children()):
        for p in multiprocessing.active_children():
            p.terminate()
        time.sleep(.1)
    os._exit(0)

if sys.version_info > (3, 0):
    is_python3 = True
else:
    is_python3 = False

#!/usr/bin/python
#--*-- coding: utf-8 --*--

import json
import requests
from pyutil.net.get_local_ip import get_local_ip
from pyutil.redis.redis_proxy import make_redis_proxy_cli

# author = {"app_id": "85527016272550", "sign": "5d378fa97e1bef26a4623bcbe49d075d"}

# backends_default = ["10.6.17.22:3706","10.6.17.32:3705","10.6.18.12:3714","10.6.18.84:3711","10.3.18.143:3714","10.3.18.139:3706","10.3.18.153:3714","10.3.18.164:3714"]
backends_default = ["10.10.45.36:3708", "10.11.58.229:3704", "10.11.59.14:3705", "10.3.34.33:3705"]
try:
    from pyutil.program.conf2 import Conf
    # backends = Conf("/opt/tiger/ss_conf/ss/redis.conf").get_values('redis_devops_lh')
    backends = Conf("/opt/tiger/ss_conf/ss/redis.conf").get_values('redis_ops_rms_tag')
    # if redis_devops_lh is not in redis.conf, backends is [''], orz.
    if not backends or backends[0].startswith("consul:") or backends == ['']:
        backends = backends_default
except:
    backends = backends_default

backends = [x for x in backends if x]
reclient = make_redis_proxy_cli(
    backends,
    socket_timeout=5.0, socket_connect_timeout=3.0, strict_redis=False)
host_tags_key = "redis_host_tags_key"


def _get_headers():
    import time, uuid, hashlib
    access_key = '151S8YV343'  # 分配的access_key
    access_secret = '2585GX5CT3R87NE7EVTW36P9T32Q3PWX4PJHH44F0VQR56TY1T'  # 分配的access_secret
    timestamp = str(int(time.time()))
    nonce = uuid.uuid1().get_hex()
    _list = [access_secret, timestamp, nonce]
    _list.sort()
    signature = hashlib.sha1(''.join(_list)).hexdigest()
    return {
        'X-AccessKey': access_key,
        'X-Signature': signature,
        'X-Timestamp': timestamp,
        'X-Nonce': nonce
    }


class Ams():
    def __init__(self, mode=0, redis_cluster="redis_tsdb_cost_model"):
        """
        mode 0: prefer to get info from redis; get info from ams when redis return null.
        mode 1: only get info from redis
        mode 2: only get info from ams
        """
        self.reclient = reclient
        self.mode = mode

    def reverse(self, a2bs):
        b2as = {}
        for k, vs in a2bs.items():
            for v in vs:
                if v in b2as:
                    b2as[v].append(k)
                else:
                    b2as[v] = [k]
        return b2as

    def _post(self, url, data):
        ret = requests.post(url, data=data, headers=_get_headers())
        if ret.status_code != 200:
            return {}
        rsp = ret.json()
        if rsp['code'] != 0:
            return {}
        return data['data']

    def _mget_all_from_remote(self):
        url = 'http://console.byted.org/tag/api/v1/tag/hosts/'
        return self._post(url)

    def _mget_all_from_cache(self):
        tag2hosts = self.reclient.hgetall(host_tags_key)
        r = {}
        for tag, hosts in tag2hosts.items():
            r[tag] = json.loads(hosts)
        return r

    def _mget_all(self):
        """
        tag: host
        """
        if self.mode == 2:
            return self._mget_all_from_remote()
        ret = self._mget_all_from_cache()
        if ret:
            return ret
        if self.mode == 0:
            return self._mget_all_from_remote()

    def _mget_cache(self, keys):
        results = {}
        ret = reclient.mget(keys)
        for i in range(len(keys)):
            results[keys[i]] = json.loads(ret[i]) if ret[i] else []
        return results

    def _mget_host_tags_from_remote(self, hosts):
        url = 'http://console.byted.org/tag/api/v1/host/tags/'
        payload = dict(
            hosts=','.join(hosts).replace(" ", "")
        )
        return self._post(url, payload)

    def _mget_host_tags_from_cache(self, hosts):
        return self._mget_cache(hosts)

    def _mget_tag_hosts_from_remote(self, tags):
        url = 'http://console.byted.org/tag/api/v1/tag/hosts/'
        payload = dict(
            tags=",".join(tags).replace(" ", "")
        )
        return self._post(url, payload)

    def _mget_tag_hosts_from_cache(self, tags):
        return self._mget_cache(tags)

    def mget_host_tags(self, hosts=[]):
        """
        hosts: ip list; default return all
        return {host: [tag1, tag2, ...],... }
        """
        if not hosts:
            return self.reverse(self._mget_all())
        if self.mode == 2:
            return self._mget_host_tags_from_remote(hosts)
        ret = self._mget_host_tags_from_cache(hosts)
        if ret:
            return ret
        return self._mget_host_tags_from_remote(hosts)

    def mget_tag_hosts(self, tags=[]):
        """
        tags: tags list; default return all
        return {tag: [ip1, ip2, ...],... }
        """
        if not tags:
            return self._mget_all()

        if self.mode == 2:
            return self.mget_tag_hosts_from_remote(tags)
        ret = self._mget_tag_hosts_from_cache(tags)
        if ret:
            return ret
        return self.mget_tag_hosts_from_remote(tags)

    def get_host_tags(self, host=""):
        """
        get tags of one host
        host: ip, default return local tags
        return [tag1, tag2, ...]
        """
        if not host:
            host = get_local_ip()
        if not isinstance(host, str):
            raise TypeError("must be str")
        return self.mget_host_tags([host])[host]

    def get_tag_hosts(self, tag):
        """
        get hosts of one tag
        host: ams tag
        return [ip1, ip2, ...]
        """
        if not isinstance(tag, str):
            raise TypeError("must be str")

        return list(self._mget_tag_hosts_from_cache([tag])[tag])

    def get_dc(self, host=""):
        tags = self.get_host_tags(host)
        for tag in tags:
            if tag.startswith("idc."):
                return tag
        return None

if __name__ == "__main__":
    import time
    ams = Ams(mode=0)
    #print ams.mget_host_tags()
    print ams.mget_tag_hosts()
    print "---------test get_tags"
    print ams.get_host_tags()
    time.sleep(2)
    print "---------test get_hosts"
    print ams.get_tag_hosts("inf.tsdb")
    time.sleep(2)
    print "---------test mget_tag_hosts"
    print ams.mget_tag_hosts(["inf.tsdb", "i"])
    time.sleep(2)
    print "---------test mget_host_tags"
    print ams.mget_host_tags(["10.6.129.86", "10.4.17.163", "0"])
    time.sleep(2)
    print "---------test mget_host_tags"
    print ams.mget_host_tags()
    time.sleep(2)
    print "---------test get_dc"
    print ams.get_dc(host="0")
    time.sleep(2)
    print "---------test mget_tag_hosts"
    print ams.mget_tag_hosts()

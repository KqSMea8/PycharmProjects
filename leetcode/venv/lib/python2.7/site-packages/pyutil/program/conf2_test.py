# -*- coding: utf-8 -*-
import os
import tempfile

import mock
import nose.tools
from pyutil.consul import bridge
from pyutil.consul import discovery
from pyutil.program import conf2

lazyload_env_key = "TRANSLATE_LAZY"

no_exist_error = ValueError("No JSON object could be decoded")
NoExistError = discovery.ServiceDiscoveryException(str(no_exist_error), no_exist_error)

def setup():
    try:
        del os.environ["RAISE_TRANSLATE_EXCEPTION"]
    except KeyError:
        pass

    bridge.local_dc = "test"
    conf2.ConfParse.CacheHash = {}
    try:
        del os.environ[lazyload_env_key]
    except KeyError:
        pass

def setup_lazyload():
    try:
        del os.environ["RAISE_TRANSLATE_EXCEPTION"]
    except KeyError:
        pass

    bridge.local_dc = "test"
    conf2.ConfParse.CacheHash = {}
    os.environ[lazyload_env_key] = "1"

def gen_confile(content):
    filepath = tempfile.mktemp()
    with open(filepath, "w") as fp:
        fp.write(content)
    return filepath

@nose.tools.with_setup(setup)
@mock.patch("pyutil.consul.bridge.translate_conf")
def test_get_without_lazy(translate_conf):
    inst = "10.6.129.86:8888,10.4.17.163:8888"
    translate_conf.return_value = dict(
        foo=inst,
        foo_hosts="10.6.129.86,10.4.17.163",
        foo_ports="8888,8888",
        foo_users="root,admin",
        foo_extras="root++8888,admin++8888",
        foo_unknowns="unknown:unknown",
    )
    confile = gen_confile("""\
foo consul:foo
foo_hosts consul:foo?ip
foo_ports consul:foo?port
foo_users consul:foo?user
foo_extras consul:foo?user++port
foo_unknowns consul:foo?unknown""")
    conf = conf2.Conf(confile)
    nose.tools.eq_(inst, conf.foo)
    nose.tools.eq_("10.6.129.86,10.4.17.163", conf.foo_hosts)
    nose.tools.eq_("8888,8888", conf.foo_ports)
    nose.tools.eq_("root,admin", conf.foo_users)
    nose.tools.eq_("root++8888,admin++8888", conf.foo_extras)
    nose.tools.eq_("unknown:unknown", conf.foo_unknowns)
    nose.tools.eq_("", conf.unknown_conf_key)

@nose.tools.with_setup(setup_lazyload)
def test_get_lazy():
    
    def _test():
        confile = gen_confile("""\
const const

foo consul:foo
foo_hosts consul:foo?ip
foo_ports consul:foo?port#port=3306
foo_users consul:foo?user#user=adm
foo_extras consul:foo?@@user++passwd++unknown--#passwd=incorrect
foo_unknowns consul:foo?unknown

noexists: consul:noexists""")
        conf = conf2.Conf(confile)
        nose.tools.eq_({}, conf._conf.service_instances)
        nose.tools.eq_("const", conf.const)
        nose.tools.eq_("10.6.129.86:8888,10.4.17.163:8888", conf.foo)
        nose.tools.eq_("unknown,unknown", conf.foo_unknowns)
        nose.tools.eq_("10.6.129.86,10.4.17.163", conf.foo_hosts)
        nose.tools.eq_("8888,8888", conf.foo_ports)
        nose.tools.eq_("sa,root", conf.foo_users)
        nose.tools.eq_("@@sa++sap++unknown--,@@root++passwd++unknown--", conf.foo_extras)
        nose.tools.eq_("", conf.noexists)
        nose.tools.eq_("", conf.unknow_conf_key)
        nose.tools.eq_({"consul:foo": insts}, conf._conf.service_instances)

    def dummy_translate_one(server, need_tag=False, raises=False):
        if server == "foo":
            return insts
        raise NoExistError

    insts = [("10.6.129.86", 8888, dict(user="sa", passwd="sap")),
             ("10.4.17.163", 8888, dict(user="root"))]
    orig_translate_one = bridge.translate_one
    bridge.translate_one = dummy_translate_one
    try:
        _test()
    finally:
        bridge.translate_one = orig_translate_one

@nose.tools.with_setup(setup_lazyload)
def test_get_lazy_multiple():

    def _test():
        confile = gen_confile("""\
const const

foo consul:foo
foo_hosts consul:foo?ip
foo_ports consul:foo?port
foo_users consul:foo?user
foo_extras consul:foo?<user+passwd@unknown?
foo_unknowns consul:foo?unknown

bar consul:bar
bar_hosts consul:bar?ip
bar_ports consul:bar?port
bar_users consul:bar?user
bar_extras consul:bar?user,passwd,unknown
bar_unknowns consul:bar?unknown

noexists: consul:noexists""")
        conf = conf2.Conf(confile)
        nose.tools.eq_({}, conf._conf.service_instances)
        nose.tools.eq_("10.6.129.86:8888,10.4.17.163:8888", conf.foo)
        nose.tools.eq_("unknown,unknown", conf.foo_unknowns)
        nose.tools.eq_("10.6.129.86,10.4.17.163", conf.foo_hosts)
        nose.tools.eq_("8888,8888", conf.foo_ports)
        nose.tools.eq_("sa,root", conf.foo_users)
        nose.tools.eq_("<sa+sap@unknown?,<root+passwd@unknown?", conf.foo_extras)
        nose.tools.eq_("", conf.noexists)
        nose.tools.eq_("const", conf.const)
        nose.tools.eq_("", conf.unknow_conf_key)
        nose.tools.eq_({"consul:foo": foo_insts}, conf._conf.service_instances)

        nose.tools.eq_("10.6.129.86:9999,10.4.17.163:9999", conf.bar)
        nose.tools.eq_("unknown,unknown", conf.bar_unknowns)
        nose.tools.eq_("10.6.129.86,10.4.17.163", conf.bar_hosts)
        nose.tools.eq_("9999,9999", conf.bar_ports)
        nose.tools.eq_("sa,root", conf.bar_users)
        nose.tools.eq_("sa,sap,unknown,root,passwd,unknown", conf.bar_extras)
        nose.tools.eq_("", conf.noexists)
        nose.tools.eq_("const", conf.const)
        nose.tools.eq_("", conf.unknow_conf_key)
        nose.tools.eq_({"consul:foo": foo_insts, "consul:bar": bar_insts},
                       conf._conf.service_instances)

    def dummy_translate_one(server, need_tag=False, raises=False):
        if server == "foo":
            return foo_insts
        elif server == "bar":
            return bar_insts
        else:
            raise NoExistError
        
    foo_insts = [("10.6.129.86", 8888, dict(user="sa", passwd="sap")),
                 ("10.4.17.163", 8888, dict(user="root"))]
    bar_insts = [("10.6.129.86", 9999, dict(user="sa", passwd="sap")),
                 ("10.4.17.163", 9999, dict(user="root"))]
    orig_translate_one = bridge.translate_one
    bridge.translate_one = dummy_translate_one
    try:
        _test()
    finally:
        bridge.translate_one = orig_translate_one

@nose.tools.with_setup(setup_lazyload)
def test_get_lazy_after_changed():

    def _test():
        confile = gen_confile("""\
const const

foo consul:foo
foo_hosts consul:foo?ip
foo_ports consul:foo?port
foo_users consul:foo?user
foo_extras consul:foo?user++passwd++unknown
foo_unknowns consul:foo?unknown

noexists consul:noexists?user""")
        conf = conf2.Conf(confile)
        nose.tools.eq_({}, conf._conf.service_instances)
        nose.tools.eq_("10.6.129.86:8888,10.4.17.163:8888", conf.foo)
        nose.tools.eq_("unknown,unknown", conf.foo_unknowns)
        nose.tools.eq_("10.6.129.86,10.4.17.163", conf.foo_hosts)
        nose.tools.eq_("8888,8888", conf.foo_ports)
        nose.tools.eq_("sa,root", conf.foo_users)
        nose.tools.eq_("sa++sap++unknown,root++passwd++unknown", conf.foo_extras)
        nose.tools.eq_("", conf.noexists)
        nose.tools.eq_("const", conf.const)
        nose.tools.eq_("", conf.unknow_conf_key)
        nose.tools.eq_({"consul:foo": insts}, conf._conf.service_instances)

        conf._conf.service_instances = {"consul:foo": [("10.6.129.86", 6666, dict(user="sa", passwd="pwd"))]}
        nose.tools.eq_("10.6.129.86:6666", conf.foo)
        nose.tools.eq_("unknown", conf.foo_unknowns)
        nose.tools.eq_("10.6.129.86", conf.foo_hosts)
        nose.tools.eq_("6666", conf.foo_ports)
        nose.tools.eq_("sa", conf.foo_users)
        nose.tools.eq_("sa++pwd++unknown", conf.foo_extras)
        nose.tools.eq_("", conf.noexists)
        nose.tools.eq_("const", conf.const)
        nose.tools.eq_("", conf.unknow_conf_key)

    def dummy_translate_one(server, need_tag=False, raises=False):
        if server == "foo":
            return insts
        raise NoExistError

    insts = [("10.6.129.86", 8888, dict(user="sa", passwd="sap")),
             ("10.4.17.163", 8888, dict(user="root"))]
    orig_translate_one = bridge.translate_one
    bridge.translate_one = dummy_translate_one
    try:
        _test()
    finally:
        bridge.translate_one = orig_translate_one

@nose.tools.with_setup(setup_lazyload)
def test_get_dummy():
    confile = gen_confile("""\
foo_host_hy 10.4.17.163
foo_port_hy 8888

foo_host_lf 10.6.129.86
foo_port_lf 6666

foo_host consul:dummy?host&enforce_hy={{foo_host_hy}}&enforce_lf={{foo_host_lf}}
foo_port consul:dummy?port&enforce_hy={{foo_port_hy}}&enforce_lf={{foo_port_lf}}""")
    conf = conf2.Conf(confile)

    bridge.local_dc = "lf"
    nose.tools.eq_("10.6.129.86", conf.foo_host)
    nose.tools.eq_("6666", conf.foo_port)
    
    bridge.local_dc = "hy"
    nose.tools.eq_("10.4.17.163", conf.foo_host)
    nose.tools.eq_("8888", conf.foo_port)

@nose.tools.with_setup(setup_lazyload)
@mock.patch("pyutil.consul.bridge.translate_one", side_effect=ValueError())
def test_get_fail_as_translate_error(translate_one):
    confile = gen_confile("foo consul:foo")
    conf = conf2.Conf(confile)
    nose.tools.eq_("consul:foo", conf.foo)

@nose.tools.with_setup(setup_lazyload)
@nose.tools.raises(ValueError)
@mock.patch("pyutil.consul.bridge.translate_one", side_effect=ValueError())
def test_get_fail_as_translate_error_with_raises_env(translate_one):
    os.environ["RAISE_TRANSLATE_EXCEPTION"] = "1"
    confile = gen_confile("foo consul:foo")
    conf = conf2.Conf(confile)
    print conf.foo

@nose.tools.with_setup(setup)
def test_get_dummy_without_failover():
    confile = gen_confile("""
alpha consul:dummy?ip&enforce_test=127.0.0.1 # comments
bravo consul:dummy?user&enforce_test=sa;""")
    conf = conf2.Conf(confile)
    nose.tools.eq_("127.0.0.1", conf.alpha)
    nose.tools.eq_("sa", conf.bravo)

@nose.tools.with_setup(setup_lazyload)
def test_get_lazyload_dummy_without_failover():
    confile = gen_confile("""
alpha consul:dummy?ip&enforce_test=127.0.0.1 # comments
bravo consul:dummy?user&enforce_test=sa;""")
    conf = conf2.Conf(confile)
    nose.tools.eq_("127.0.0.1", conf.alpha)
    nose.tools.eq_("sa", conf.bravo)

@nose.tools.with_setup(setup)
@mock.patch("pyutil.consul.bridge.translate_conf", side_effect=ValueError())
def test_get_failover_without_lazy(translate_conf):
    confile = gen_confile("""\
alpha consul:alpha#ip=192.168.1.1&port=80&ip=192.168.1.1&port=22 #comments
bravo consul:bravo?ip#ip=192.168.1.10 #comments
charlie consul:charlie?user++passwd#user=sa&passwd=guest #comments
delta consul:delta?user#passwd=guest #comments
# comments
echo consul:echo?port#port=80&ip=localhost&port=22 #comments
foxtrot consul:foxtrot #comments
golf consul:golf?user=passwd#user=sa&passwd=guest&user=root #comments""")
    exp_tr_args = dict(golf='consul:golf?user=passwd#user=sa&passwd=guest&user=root',
                       charlie='consul:charlie?user++passwd#user=sa&passwd=guest',
                       echo='consul:echo?port#port=80&ip=localhost&port=22',
                       delta='consul:delta?user#passwd=guest',
                       bravo='consul:bravo?ip#ip=192.168.1.10',
                       alpha='consul:alpha#ip=192.168.1.1&port=80&ip=192.168.1.1&port=22',
                       foxtrot='consul:foxtrot')
    conf = conf2.Conf(confile)
    nose.tools.eq_("192.168.1.1:80,192.168.1.1:22", conf.alpha)
    nose.tools.eq_(exp_tr_args, translate_conf.call_args[0][0])
    nose.tools.eq_("192.168.1.10", conf.bravo)
    nose.tools.eq_(exp_tr_args, translate_conf.call_args[0][0])
    nose.tools.eq_("sa++guest", conf.charlie)
    nose.tools.eq_(exp_tr_args, translate_conf.call_args[0][0])
    nose.tools.eq_("", conf.delta)
    nose.tools.eq_(exp_tr_args, translate_conf.call_args[0][0])
    nose.tools.eq_("80,22", conf.echo)
    nose.tools.eq_(exp_tr_args, translate_conf.call_args[0][0])
    nose.tools.eq_("consul:foxtrot", conf.foxtrot)
    nose.tools.eq_(exp_tr_args, translate_conf.call_args[0][0])
    nose.tools.eq_("sa=guest,root=", conf.golf)
    nose.tools.eq_(exp_tr_args, translate_conf.call_args[0][0])

@nose.tools.with_setup(setup_lazyload)
@mock.patch("pyutil.consul.bridge.translate_one", side_effect=ValueError())
def test_get_failover_with_lazy(translate_one):
    confile = gen_confile("""\
alpha consul:alpha#ip=192.168.1.1&port=80&ip=192.168.1.1&port=22#comments
bravo consul:bravo?ip#ip=192.168.1.10#comments
charlie consul:charlie?user++passwd#user=sa&passwd=guest#comments
delta consul:delta?user#passwd=guest#comments
# comments
echo consul:echo?port#port=80&ip=localhost&port=22#comments
foxtrot consul:foxtrot #comments
golf consul:golf?user=passwd#user=sa&passwd=guest&user=root#comments""")
    conf = conf2.Conf(confile)
    nose.tools.eq_("192.168.1.1:80,192.168.1.1:22", conf.alpha)
    translate_one.assert_called_with("alpha", need_tag=True, raises=True)
    nose.tools.eq_("192.168.1.10", conf.bravo)
    translate_one.assert_called_with("bravo", need_tag=True, raises=True)
    nose.tools.eq_("sa++guest", conf.charlie)
    translate_one.assert_called_with("charlie", need_tag=True, raises=True)
    nose.tools.eq_("", conf.delta)
    translate_one.assert_called_with("delta", need_tag=True, raises=True)
    nose.tools.eq_("80,22", conf.echo)
    translate_one.assert_called_with("echo", need_tag=True, raises=True)
    nose.tools.eq_("consul:foxtrot", conf.foxtrot)
    translate_one.assert_called_with("foxtrot", need_tag=True, raises=True)
    nose.tools.eq_("sa=guest,root=", conf.golf)
    translate_one.assert_called_with("golf", need_tag=True, raises=True)

@nose.tools.with_setup(setup_lazyload)
@mock.patch("pyutil.consul.bridge.translate_one", side_effect=ValueError())
def test_get_dummy_lazy_with_comments(translate_one):
    confile = gen_confile("delta consul:dummy?ip&enforce_test=localhost#comments")
    conf = conf2.Conf(confile)
    nose.tools.eq_("localhost", conf.delta)
    nose.tools.eq_(0, translate_one.call_count)
    
@nose.tools.with_setup(setup)
@mock.patch("pyutil.consul.bridge._translate_conf", side_effect=ValueError())
def test_get_dummy_with_comments(_translate_conf):
    confile = gen_confile("delta consul:dummy?ip&enforce_test=localhost#comments")
    conf = conf2.Conf(confile)
    exp_tr_args = dict(alpha="consul:alpha#ip=127.0.0.1",
                       bravo="consul:bravo")
    nose.tools.eq_("localhost", conf.delta)
    nose.tools.eq_(0, _translate_conf.call_count)

@mock.patch("pyutil.consul.bridge.translate_conf", return_value={})
def test_get_noexists_failover(translate_conf):
    confile = gen_confile("alpha consul:alpha#ip=localhost")
    conf = conf2.Conf(confile)
    nose.tools.eq_("", conf.alpha)
    translate_conf.assert_called_with(dict(alpha="consul:alpha#ip=localhost"), confile)

@nose.tools.with_setup(setup_lazyload)
@mock.patch("pyutil.consul.bridge.translate_one", side_effect=NoExistError)
def test_get_lazyload_noexists_failover(translate_one):
    confile = gen_confile("alpha consul:alpha#port=80")
    conf = conf2.Conf(confile)
    nose.tools.eq_("", conf.alpha)
    translate_one.assert_called_with("alpha", need_tag=True, raises=True)

def bench_remove_comments():
    cp = conf2.ConfParse("foo")
    for _ in xrange(100000):
        cp.remove_comments("alpha consul:alpha#ip=192.168.1.1&port=80&ip=192.168.1.1&port=22#comments")

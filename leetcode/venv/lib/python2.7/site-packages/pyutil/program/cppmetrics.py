# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cppmetrics', [dirname(__file__)])
        except ImportError:
            import _cppmetrics
            return _cppmetrics
        if fp is not None:
            try:
                _mod = imp.load_module('_cppmetrics', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cppmetrics = swig_import_helper()
    del swig_import_helper
else:
    import _cppmetrics
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class MetricCollectorConf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetricCollectorConf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetricCollectorConf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flush_interval"] = _cppmetrics.MetricCollectorConf_flush_interval_set
    __swig_getmethods__["flush_interval"] = _cppmetrics.MetricCollectorConf_flush_interval_get
    if _newclass:flush_interval = _swig_property(_cppmetrics.MetricCollectorConf_flush_interval_get, _cppmetrics.MetricCollectorConf_flush_interval_set)
    __swig_setmethods__["enabled_backends"] = _cppmetrics.MetricCollectorConf_enabled_backends_set
    __swig_getmethods__["enabled_backends"] = _cppmetrics.MetricCollectorConf_enabled_backends_get
    if _newclass:enabled_backends = _swig_property(_cppmetrics.MetricCollectorConf_enabled_backends_get, _cppmetrics.MetricCollectorConf_enabled_backends_set)
    __swig_setmethods__["backend_file_path_name"] = _cppmetrics.MetricCollectorConf_backend_file_path_name_set
    __swig_getmethods__["backend_file_path_name"] = _cppmetrics.MetricCollectorConf_backend_file_path_name_get
    if _newclass:backend_file_path_name = _swig_property(_cppmetrics.MetricCollectorConf_backend_file_path_name_get, _cppmetrics.MetricCollectorConf_backend_file_path_name_set)
    __swig_setmethods__["backend_ganglia_endpoints"] = _cppmetrics.MetricCollectorConf_backend_ganglia_endpoints_set
    __swig_getmethods__["backend_ganglia_endpoints"] = _cppmetrics.MetricCollectorConf_backend_ganglia_endpoints_get
    if _newclass:backend_ganglia_endpoints = _swig_property(_cppmetrics.MetricCollectorConf_backend_ganglia_endpoints_get, _cppmetrics.MetricCollectorConf_backend_ganglia_endpoints_set)
    __swig_setmethods__["backend_opentsdb_endpoints"] = _cppmetrics.MetricCollectorConf_backend_opentsdb_endpoints_set
    __swig_getmethods__["backend_opentsdb_endpoints"] = _cppmetrics.MetricCollectorConf_backend_opentsdb_endpoints_get
    if _newclass:backend_opentsdb_endpoints = _swig_property(_cppmetrics.MetricCollectorConf_backend_opentsdb_endpoints_get, _cppmetrics.MetricCollectorConf_backend_opentsdb_endpoints_set)
    __swig_setmethods__["listening_port"] = _cppmetrics.MetricCollectorConf_listening_port_set
    __swig_getmethods__["listening_port"] = _cppmetrics.MetricCollectorConf_listening_port_get
    if _newclass:listening_port = _swig_property(_cppmetrics.MetricCollectorConf_listening_port_get, _cppmetrics.MetricCollectorConf_listening_port_set)
    __swig_setmethods__["namespace_prefix"] = _cppmetrics.MetricCollectorConf_namespace_prefix_set
    __swig_getmethods__["namespace_prefix"] = _cppmetrics.MetricCollectorConf_namespace_prefix_get
    if _newclass:namespace_prefix = _swig_property(_cppmetrics.MetricCollectorConf_namespace_prefix_get, _cppmetrics.MetricCollectorConf_namespace_prefix_set)
    def __init__(self): 
        this = _cppmetrics.new_MetricCollectorConf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppmetrics.delete_MetricCollectorConf
    __del__ = lambda self : None;
MetricCollectorConf_swigregister = _cppmetrics.MetricCollectorConf_swigregister
MetricCollectorConf_swigregister(MetricCollectorConf)

class MetricCollector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetricCollector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetricCollector, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cppmetrics.new_MetricCollector()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cppmetrics.delete_MetricCollector
    __del__ = lambda self : None;
    def init(self, *args): return _cppmetrics.MetricCollector_init(self, *args)
    def define_counter(self, *args): return _cppmetrics.MetricCollector_define_counter(self, *args)
    def define_timer(self, *args): return _cppmetrics.MetricCollector_define_timer(self, *args)
    def define_store(self, *args): return _cppmetrics.MetricCollector_define_store(self, *args)
    def emit_counter(self, *args): return _cppmetrics.MetricCollector_emit_counter(self, *args)
    def emit_timer(self, *args): return _cppmetrics.MetricCollector_emit_timer(self, *args)
    def emit_store(self, *args): return _cppmetrics.MetricCollector_emit_store(self, *args)
    def reset_counter(self, *args): return _cppmetrics.MetricCollector_reset_counter(self, *args)
    def reset_timer(self, *args): return _cppmetrics.MetricCollector_reset_timer(self, *args)
    def reset_store(self, *args): return _cppmetrics.MetricCollector_reset_store(self, *args)
    def start_flush_thread(self): return _cppmetrics.MetricCollector_start_flush_thread(self)
    def start_listening_thread(self): return _cppmetrics.MetricCollector_start_listening_thread(self)
MetricCollector_swigregister = _cppmetrics.MetricCollector_swigregister
MetricCollector_swigregister(MetricCollector)

# This file is compatible with both classic and new-style classes.



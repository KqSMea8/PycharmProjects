import pykhtml
import re
from pykhtml.dom import DOMString

'''a util module for pykhtml'''

def getAttributeValue(elem, attrName):
        '''
        return the attribute value as a unicode string. The way provided by pykhtml
        doesn't work if the attribute value is Chinese.
        Parameters:
                elem - An Element
                attrName - the name of the attribute
        Returns:
                the value of the atrribute, a unicode string
        '''
        return unicode(elem._.getAttribute(DOMString(attrName)).string())

def getInnerHTML(elem):
        '''
        Parameters:
                elem - An Element
        Returns:
                A unicode string, which is the innerHTML of the given element
        '''
        return unicode(elem._.innerHTML().string())

def getElementsTexts(elems):
        '''
        extract text strings from a list of elements
        Parameters:
                elems - An iterator type object that holds a collection of Elements
        Returns:
                A list of texts, one string object for one Element
        '''
        extractor = lambda(elem): elem.text
        return [extractor(elem) for elem in elems]

def getChildrenByTagName(elem, tagName):
        '''
        get a children list of the given element whose tag name is the given tagName
        Parameters:
                elem - The Element object
                tagName - The tag name of the child objects, case insensitive
        Returns:
                A list of Elements, which are the children of the given element and 
                have the given tagName
        '''
        return [child for child in elem.children \
                if \
                child.isA(pykhtml.dom.Element) and child.tagName.lower() == tagName.lower()]

def getElementByXPath(document, path):
        '''
        get an element from a document based on the given XPath(path)
        Parameters:
                document - The document object from a Browser
                path - The XPath
        Returns:
                An Element identified by the given path in the given document, or None 
                if the element can't be found
        '''
        pathElems = path.split('/')[1:]
        if not len(pathElems):
                return None
        pathElems = [__parsePathElem(e) for e in pathElems]
        subElems = list(document.getElementsByTagName(pathElems[0][0]))
        if len(subElems) <= pathElems[0][1]:
                return None
        elem = subElems[pathElems[0][1]]
        for pathElem in pathElems[1:]:
                if elem is None:
                        return None
                subElems = getChildrenByTagName(elem, pathElem[0])

                if len(subElems) <= pathElem[1]:
                        return None
                elem = subElems[pathElem[1]]
        return elem


PATH_ELEM_P = re.compile('(\w+)\[(\d)+\]')

def __parsePathElem(pathElem):
        "convert a XPath element to a tuple of name and node index"
        m = PATH_ELEM_P.match(pathElem)
        if m is None:
                return (pathElem, 0)
        return (m.group(1), int(m.group(2)) - 1)

def test(browser):
        p = '/html/body/table[2]/tbody/tr[2]/td[2]'
        elem = getElementByXPath(browser.document, p)
        pykhtml.stopEventLoop()

if __name__ == '__main__':
        b = pykhtml.Browser()
        b.load('file:///home/liangrubo/svn/liangrubo/bjfdc/website/fdc/t.html', test)
        pykhtml.startEventLoop()

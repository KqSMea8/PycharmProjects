#!/usr/bin/env python
# coding: utf-8
__author__ = 'zhenghuabin'

def make_frame_memcache_client(cluster, psm=None, servers=None, key_tmpl=None, exptime=900, raw_compatible=True, **kwargs):
    """
    make_frame_memcache_client(service, key_tmpl=None, exptime=60, **kwargs)
    return a memcache client
        cluster:        memcache service psm
        key_tmpl:       default key template, use:key = key_tmpl % key
        exptime:        default expire time
        raw_compatible: is compatible with memcache.py
        kwargs include: see raw memcache client
            pickleProtocol:
            pickler:
            socket_timeout:
            dead_retry:
            failure_limit:
            ...
    """
    from memcache_client import MemcacheClient, PyutilMemcacheClient
    if raw_compatible:
        return MemcacheClient(cluster, psm=psm, servers=servers, key_tmpl=key_tmpl, timeout=exptime, **kwargs)
    return PyutilMemcacheClient(cluster, psm=psm, servers=servers, key_tmpl=key_tmpl, timeout=exptime, **kwargs)

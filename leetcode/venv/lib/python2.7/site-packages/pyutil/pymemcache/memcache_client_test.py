#!/usr/bin/env python
# coding: utf-8
__author__ = 'zhenghuabin'

import random
import time

from memcache_client import MemcacheClient,PyutilMemcacheClient


def execute(stats):
    for i in stats:
        print '%s(%s):' % (i[0], ','.join(str(e) for e in i[1])),
        func = c.__getattribute__(i[0])
        r = func(*i[1])
        print r,
        if r != i[2]:
            print '*******Error expect:', i[2]
        else:
            print

def single(c):
    stats = [
        ('set', ['hello', 'world'], True),
        ('get', ['hello'], 'world'),
        ('add', ['hello', 'world'], False),
        ('delete', ['hello'], 1),
        ('get', ['hello'], None),
        ('add', ['hello', 'world'], True),
        ('set', ['a', 10], True),
        ('incr', ['a'], 11),
        ('decr', ['a'], 10),
        ('incr', ['a', 10], 20),
        ('decr', ['a', 10], 10),
        ('mset', [{'a':'A','b':'B', 'c':'C'}], []),
        ('mget', [['a', 'b', 'c']], {'a':'A','b':'B', 'c':'C'}),
        ('mget', [['a', 'b', 'c', 'd']], {'a':'A','b':'B', 'c':'C'}),
        ('delete_multi', [['a', 'b', 'c']], 1),
        ('get', ['a'], None),
        ('mget', [['a', 'b', 'c', 'd']], {}),
        ('set', ['hello', 'world'], True),
        ('replace', ['hello', 'python'], True),
        ('get', ['hello'], 'python'),
        ('prepend', ['hello', 'c'], True),
        ('get', ['hello'], 'cpython'),
        ('append', ['hello', 'fast'], True),
        ('get', ['hello'], 'cpythonfast'),
        ('gets', ['hello'], 'cpythonfast'),
        ('cas', ['hello', 'python'], True),
        ('get', ['hello'], 'python'),
    ]
    execute(stats)

def multi(c):
    m = {}
    cnt = 5000
    while len(m) < cnt:
        key = str(random.randint(1, 10000))
        m[key] = random.randint(1, 10000)
    ts = time.time()
    r = c.mset(m)
    print 'mset',cnt,':',r, 'elapsed:', time.time() - ts
    ts = time.time()
    r = c.mget(m.keys())
    print 'mget:', len(r), 'elapsed:', time.time() - ts
    ts = time.time()
    r = c.delete_multi(m.keys())
    print 'delete_multi:', r, 'elapsed:', time.time() - ts

def expire(c):
    print 'set(hello, world, 5)'
    c.set('hello', 'world', 5)
    r = c.get('hello')
    print 'get(hello):', r
    print 'sleep(5)...'
    time.sleep(5)
    r = c.get('hello')
    print 'get(hello):', r
    print 'mset({hello:world,what:happen}, 5)'
    c.mset({'hello':'world','what':'happen'}, 5)
    r = c.mget(['hello', 'what'])
    print 'mget([hello, what]):', r
    print 'sleep(5)...'
    time.sleep(5)
    r = c.mget(['hello', 'what'])
    print 'mget([hello, what]):', r

def old_test(c):
    stats = [
        ('set', ['hello', 'w'*1024, 10, 'Old_%s'], True),
        ('get', ['hello', 'Old_%s'], 'w'*1024),
        ('delete', ['hello'], 1),
        ('mset', [{'a':'A','b':'B', 'c':'C'}, 0, 'Prefix%s'], []),
        ('mget', [['a', 'b', 'c'], 'Prefix%s'], {'a':'A','b':'B', 'c':'C'}),
        ('delete_multi', [['a', 'b', 'c'], 0, 'Prefix%s'], 1),
        ('get', ['a'], None),
        ('mget', [['a', 'b', 'c', 'd'], 'Prefix%s'], {}),
    ]
    execute(stats)


def raw_test(c):
    stats = [
        ('set', ['hello', 'w'*1024, 10, 128], True),
        ('get', ['hello'], 'w'*1024),
        ('delete', ['hello'], 1),
        ('mset', [{'a':'A','b':'B', 'c':'C'}, 0, 'Prefix'], []),
        ('mget', [['a', 'b', 'c'], 'Prefix'], {'a':'A','b':'B', 'c':'C'}),
        ('delete_multi', [['a', 'b', 'c'], 0, 'Prefix'], 1),
        ('get', ['Prefixa'], None),
        ('mget', [['a', 'b', 'c', 'd'], 'Prefix'], {}),
    ]
    execute(stats)


if __name__ == '__main__':
    import sys
    if len(sys.argv) < 3:
        sys.stderr.write('Usage:%s <cluster> <psm> [servers]\n' % (sys.argv[0]))
        sys.exit(1)
    cluster = sys.argv[1]
    psm = sys.argv[2]
    servers = None
    if len(sys.argv) > 3:
        servers = sys.argv[3].split()
    c = PyutilMemcacheClient(cluster, psm, servers, enable_metrics=True);

    single(c)
    multi(c)
    expire(c)
    old_test(c)
    print '-------------for raw_compatible--------------'
    c = MemcacheClient(cluster, psm, servers, enable_metrics=True);
    single(c)
    multi(c)
    expire(c)
    raw_test(c)

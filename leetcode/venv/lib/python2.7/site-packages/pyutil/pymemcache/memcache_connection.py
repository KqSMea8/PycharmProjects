#!/usr/bin/env python
# coding: utf-8
__author__ = 'zhenghuabin'

import threading

import memcache


class ClusterClient(object):
    clients = {}
    lock = threading.RLock()

    @classmethod
    def get(cls, cluster, servers, **kwargs):
        with cls.lock:
            k = unicode((cluster, servers, kwargs))
            cs = cls.clients.get(k, [])
            if len(cs) == 0:
                c = memcache.Client(servers, **kwargs)
                cs.append(c)
            c = cs[0]
            cls.clients[k] = cs[1:]
            return c

    @classmethod
    def release(cls, c, cluster, servers, **kwargs):
        with cls.lock:
            k = unicode((cluster, servers, kwargs))
            cls.clients[k].append(c)

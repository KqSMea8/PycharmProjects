
def _new_make_redis_client(cluster, retry=1, **kwargs):
    """
    make_redis_client(cluster, retry=3, **kwargs)
    Return a redis client with redis proxy connection pool
        cluster:    redis cluster name, eg:'redis_web_dev'
        retry:      max try count, default:3
        kwargs include:
            socket_timeout:         default:0.25
            socket_connect_timeout: default:0.05
            db:                     redis db, default:0
            password:               redis password, default:None

    example:
        make_redis_client('redis_web_dev', socket_timeout=0.2)
    """

    from redis_client import RedisClient
    return RedisClient(cluster, None, None, retry, **kwargs)

make_redis_client = _new_make_redis_client

'''
pyredis to replace toutiao/lib/storage
'''
if __file__.find('storage') >= 0:
    def _old_make_redis_client(cluster, psm, servs, retry=1, **kwargs):
        '''compatible toutiao/lib/storage/__init__.py make_redis_client'''
        from redis_client import RedisClient
        return RedisClient(cluster, psm, servs, retry, **kwargs)
    make_redis_client = _old_make_redis_client
    def make_frame_redis_client(service, retry=1, **kwargs):
        '''compatible toutiao/lib/storage/__init__.py make_frame_redis_client'''
        return _new_make_redis_client(service, retry, **kwargs)
    from .storage import make_frame_memcache_client

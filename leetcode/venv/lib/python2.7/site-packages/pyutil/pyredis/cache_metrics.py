#!/usr/bin/env python

from pyutil.program import metrics2 as metrics

LANG_VER='py_v3.0'

class CacheMetrics(object):

    def __init__(self, cluster, prefix, psm = None):
        self.cluster = cluster
        self.prefix = prefix
        self.psm = psm
        self.service = None
        self.frame = None
        if psm == None:
            self.psm = 'None'
        else:
            self.service = 'toutiao.redis.' + cluster[len('redis_'):]
            self.frame = 'toutiao.service.thrift.' + psm
            metrics.define_counter('call.success.throughput', prefix=self.frame)
            metrics.define_counter('call.error.throughput', prefix=self.frame)
            metrics.define_timer('call.success.latency.us', prefix=self.frame)
            metrics.define_timer('call.error.latency.us', prefix=self.frame)
            metrics.define_tagkv('to', [self.service])
            metrics.define_tagkv('to_dc', ['hy', 'lf', 'None'])
        metrics.define_tagkv('cluster', [cluster])
        metrics.define_tagkv('caller', [self.psm])
        metrics.define_tagkv('lang', [LANG_VER])
        metrics.define_counter('throughput', prefix=prefix)
        metrics.define_counter('error', prefix=prefix)
        metrics.define_timer('latency', prefix=prefix)

    @staticmethod
    def add_tagkv(key, tags):
        metrics.define_tagkv(key, tags)

    def get_tags(self, cmd = None, backend = None):
        tags = {'cluster':self.cluster, 'caller':self.psm, 'lang':LANG_VER}
        if cmd:
            cmd = cmd.upper()
            metrics.define_tagkv('cmd', [cmd])
            tags['cmd'] = cmd
        if backend:
            metrics.define_tagkv('backend', [backend])
            tags['backend'] = backend
        return tags

    def get_service_tags(self, cmd, backend = None):
        cmd = cmd.upper()
        metrics.define_tagkv('method', [cmd])
        dc = 'None'
        if backend:
            if backend.startswith('10.4.'):
                dc = 'hy'
            elif backend.startswith('10.6.') or backend.startswith('10.3.'):
                dc = 'lf'
        tags = {'to':self.service, 'method':cmd, 'to_dc':dc}
        return tags

    def add_call_metrics(self, cmd, latency, is_ok, backend = None):

        tags = self.get_tags(cmd, backend)

        latency = latency * 1000000
        metrics.emit_counter('throughput', 1, self.prefix, tags)
        if latency >= 0:
            metrics.emit_timer('latency', latency, self.prefix, tags)
        if is_ok is not None and is_ok is False:
            metrics.emit_counter('error', 1, self.prefix, tags)
        if self.service:
            tags = self.get_service_tags(cmd, backend)
            name = 'success'
            if is_ok is not None and is_ok is False:
                name = 'error'
            metrics.emit_counter('call.%s.throughput' % name, 1, self.frame, tags)
            if latency >= 0:
                metrics.emit_timer('call.%s.latency.us' % name, latency, self.frame, tags)

class NullMetrics(object):
    def __init__(self, *args, **kwargs):
        pass
    def process(self, *k, **a):
        pass
    def __getattr__(self, cmd):
        return self.process

#!/usr/bin/env python

import os
import logging
from pyutil.program.conf import Conf

REDIS_CONF='redis_conf'

def get_frame_psm():
    try:
        import frame
        return frame.get_psm()
    except:
        return None

def get_psm(psm):
    return os.getenv('TCE_PSM') or os.getenv('SVC_NAME') or os.getenv('PSM') or get_frame_psm() or psm

def get_values_from_conf(cluster, conffile):
    conf = Conf(conffile)
    v = conf.get_values(cluster)
    if len(v) == 1 and len(v[0]) == 0:
        v = []
    return v

def get_service(name):
    service = name
    if name.startswith('redis_'):
        service = 'toutiao.redis.' + name[len('redis_'):]
    elif name.startswith('memcache_'):
        service = 'toutiao.memcache.' + name[len('memcache_'):]
    return service

def get_values_from_consul(name):
    from pyutil.consul.bridge import translate_one
    service = get_service(name)
    try:
        v = translate_one(service, raises=True)
        if len(v) == 1 and v[0] == service:
            return []
        if len(v) == 1 and service in v[0]:
            return []
        return ['%s:%s' % (h, p) for h, p in v]
    except:
        return []

def get_values_from_redis(name):
    from redis_client import RedisClient
    service = get_service(name)
    try:
        servs = get_values_from_conf(REDIS_CONF, '/opt/tiger/ss_conf/ss/redis_web.conf')
        c = RedisClient(REDIS_CONF, servers=servs)
        v = c.hget(service, 'proxys')
        if v == None:
            return []
        return v.split(',')
    except:
        return []

def get_cluster_servers(cluster):
    try:
        if cluster.startswith('redis_'):
            servs = get_values_from_conf(cluster, '/opt/tiger/ss_conf/ss/redis_web.conf')
            if servs:
                return servs
            servs = get_values_from_conf(cluster, '/opt/tiger/ss_conf/ss/redis.conf')
            if servs:
                return servs
        elif cluster.startswith('memcache_'):
            servs = get_values_from_conf(cluster, '/opt/tiger/ss_conf/ss/memcache.conf')
            if servs:
                return servs
        servs = get_values_from_consul(cluster)
        if servs:
            return servs
        # temporary rm for multi dc support
        # servs = get_values_from_redis(cluster)
        # if servs:
        #     return servs
        return []
    except Exception as excp:
        logging.error('get cluster(%s) servers excp:%s' % (cluster, excp))
        return []

def update_cluster_servers(cluster):
    try:
        servs = get_values_from_consul(cluster)
        if servs:
            return servs
        if cluster.startswith('redis_'):
            servs = get_values_from_conf(cluster, "/opt/tiger/ss_conf/ss/redis_web.conf")
            if servs:
                return servs
            servs = get_values_from_conf(cluster, "/opt/tiger/ss_conf/ss/redis.conf")
            if servs:
                return servs
        elif cluster.startswith('memcache_'):
            servs = get_values_from_conf(cluster, "/opt/tiger/ss_conf/ss/memcache.conf")
            if servs:
                return servs
        return []
    except Exception as excp:
        logging.error('get cluster(%s) servers excp:%s' % (cluster, excp))
        return None


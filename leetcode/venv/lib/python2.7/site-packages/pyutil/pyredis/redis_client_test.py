#!/usr/bin/env python

from redis_client import RedisClient
import redis
import time
import logging
import argparse

def single(c):
    print 'set hello world:', c.set('hello', 'world')
    print 'get hello:', c.get('hello')
    print 'getset("hello", "what"):', c.getset('hello', 'what')
    print 'exists("hello"):',c.exists("hello")
    print 'delete hello:', c.delete('hello')
    print 'get hello:', c.get('hello')
    print 'exists("hello"):',c.exists("hello")
    print "mset({'one':1,'two':2,'three':3,'four':4}):",c.mset({'one':1,'two':2,'three':3,'four':4})
    print "mget('one', 'two', 'three', 'four', 'five'):", c.mget('one', 'two', 'three', 'four', 'five')
    print 'hset("week","monday",1):', c.hset("week","monday",1)
    print 'hget("week", "monday"):', c.hget("week", "monday")
    print 'hdel("week","monday"):', c.hdel("week","monday")
    print 'hget("week", "monday"):', c.hget("week", "monday")
    print 'hmset("week",{"monday":1,"friday":5}:',c.hmset("week",{"monday":1,"friday":5})
    print 'hmget("week","monday","tuesday","friday"):',c.hmget("week","monday","tuesday","friday")
    print 'hkeys("week"):',c.hkeys("week")
    print 'hgetall("week"):',c.hgetall("week")
    print 'hlen("week"):',c.hlen("week")

 
def set_qps(c):
    n = 10000
    b = time.time()
    for i in xrange(0, n):
        c.set('hello', 'world')
    e = time.time() - b
    print 'set qps:', int(n / e)

def get_qps(c):
    n = 10000
    b = time.time()
    for i in xrange(0, n):
        c.get('hello')
    e = time.time() - b
    print 'get qps:', int(n / e)


def thread_test(cli):
    import threading
    class Runner(threading.Thread):
        def __init__(self, id, cli, cnt):
            threading.Thread.__init__(self)
            self.id = id
            self.cli = cli
            self.cnt = cnt
        def run(self):
            print 'Running:%d' % self.id
            for i in xrange(0, self.cnt):
                self.cli.incr('counter')
                key = 'Runner%02d.%d' % (self.id,i)
                self.cli.set(key, i)
                val = self.cli.get(key)
                if str(i) != str(val):
                    print key, ' unmatch(%s, %s):'%(val,i)
                self.cli.delete(key)
    t = []
    cnt = 10000
    cnt = 1000000
    cli.set('counter', 0)
    for i in xrange(0, 10):
        t.append(Runner(i, cli, cnt))
        t[-1].start()
    for r in t:
        r.join()
    val = cli.get('counter')
    if int(val) != cnt * len(t):
        print 'counter unmatch(%s, %d)' % (val, cnt * len(t))
    print 'threading test finish'

def pipeline(c):
    pipe = c.pipeline()
    print "pipe.set('a', 0).incr('a').incr('a').incr('a').get('a')"
    pipe.set('a', 0).incr('a').incr('a').incr('a').get('a')
    print pipe.execute()
    try:
        print "pipe.set('a','a').incr('a').get('a')"
        pipe.set('a','a').incr('a').get('a')
        print pipe.execute()
    except redis.exceptions.ResponseError, e:
        print 'ok, we get excp:', e
    else:
        print 'error:expect excp'

if __name__ == '__main__':
    p = argparse.ArgumentParser('redis_client_test')
    p.add_argument('-c', '--cluster', default='redis_web_dev', help='cluster')
    p.add_argument('-m', '--psm', default=None, type=str, help='psm')
    p.add_argument('-s', '--servs', default=None, type=str, help='servers')
    p.add_argument('-t', '--slowlogging', default=0, type=float, help='slowlogging')
    p.add_argument('-l', '--loglevel', default=logging.INFO, type=int, help='loglevel')
    args = p.parse_args()
    servs = args.servs.split() if args.servs != None else None
    logging.getLogger().setLevel(args.loglevel)
    c = RedisClient(args.cluster, args.psm, servs, slowlogging=args.slowlogging)

    single(c)
    set_qps(c)
    get_qps(c)
    thread_test(c)
    pipeline(c)


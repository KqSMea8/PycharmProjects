#!/usr/bin/env python
# coding=utf8
import threading, signal

from random import randint
from rabbitmq import RabbitMQ

class Producer(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        while True:
            _produce()

class Consumer(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        _consume()

def _produce():
    import time
    host = '192.168.20.53'
    start = time.time()
    mq = RabbitMQ(host=host, exchange='demo4_x', routing_key='demo4_k', queue='demo4_q')
    print 'iconnect use: %ssec' % (time.time() - start)

    for i in range(1000):
        start = time.time()
        count = 1000
        for i in range(count):
            mq.put('hello world!')
        end = time.time()
        spent = (end - start) * 1000 / 100.0
        if spent > 1:
            print 'isend spent: %sms, %s' % (spent, threading.current_thread())
        time.sleep(1)

def _dump_message(message):
    if randint(0, 10000) == 1:
        print("Body:'%s', Proeprties:'%s', DeliveryInfo:'%s'" % (
            message.body, message.properties, message.delivery_info))
    message.ack()

def _consume():
    import time
    host = '192.168.20.54'
    start = time.time()
    mq = RabbitMQ(host=host, exchange='demo4_x', routing_key='demo4_k', queue='demo4_q')
    print 'iconnect use: %ssec' % (time.time() - start)
    mq.consume(_dump_message)

if __name__ == '__main__':
    signal.signal(signal.SIGTERM, signal.SIG_DFL)
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    import sys
    if len(sys.argv) > 1 and sys.argv[1] == 'c':
        for i in range(1):
            Consumer().start()
    else:
        for i in range(200):
            Producer().start()

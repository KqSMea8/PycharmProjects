import logging
import urllib3
import random
import json
import time

from pyutil.program import metrics2 as metrics
from pyutil.queue import tce_perf_test

logger = logging.getLogger("nsq")
rand = random.SystemRandom()

TIMEOUT = 4

#for metrics
THROUGHPUT_SUBFIX = ".throughput"
ERROR_THROUGHPUT_SUBFIX = ".error.throughput"
LATENCY_SUBFIX = ".latency"
PREFIX = "nsq.produce"

class NsqdProxy(object):

    def __init__(self, proxy_http_addresses):
        self.proxies = [h.rstrip("/") for h in proxy_http_addresses]
        self.pick_proxy()

    def pick_proxy(self):
        proxy = rand.choice(self.proxies)
        self.conn = urllib3.connection_from_url(proxy, maxsize=30)
        self.proxy = proxy.replace(":", "_")
        metrics.define_tagkv("proxy", [self.proxy])
        self.tagkv = {"proxy": self.proxy}

    def put(self, topic, msg, max_tries=3, defer=None, timeout=1):
        topic = tce_perf_test.adjust_topic_name(topic)
        while 1:
            try:
                url = "/put?topic=" + topic
                if defer is not None:
                    try:
                        defer = int(defer)
                    except ValueError as e:
                        logger.exception("defer argument %s is not a valid integer or can not be converted to an integer", defer)
                        raise
                    url += "&defer=%s" % defer
                if not hasattr(self, "thoughput_key"):
                    self.thoughput_key = topic + THROUGHPUT_SUBFIX
                    metrics.define_counter(self.thoughput_key, prefix=PREFIX)
                if not hasattr(self, "error_thoughput_key"):
                    self.error_thoughput_key = topic + ERROR_THROUGHPUT_SUBFIX
                    metrics.define_counter(self.error_thoughput_key, prefix=PREFIX)
                if not hasattr(self, "latency_key"):
                    self.latency_key = topic + LATENCY_SUBFIX
                    metrics.define_timer(self.latency_key, prefix=PREFIX)
                msg_start = time.time()
                r = self.conn.urlopen("POST", url, body=msg, timeout=timeout)
                msg_end = time.time()
                assert r.status == 200, "http code(%s) != 200" % r.status

                metrics.emit_counter(self.thoughput_key, 1,  tagkv=self.tagkv, prefix=PREFIX)
                metrics.emit_timer(self.latency_key, (msg_end - msg_start) * 1000, tagkv=self.tagkv, prefix=PREFIX)
                return
            except Exception as e:
                logger.warn("NSQ_PUT %s url: %s, %s" % (self.conn, url, e))
                metrics.emit_counter(self.error_thoughput_key, 1,  tagkv=self.tagkv, prefix=PREFIX)
                self.pick_proxy()
                max_tries -= 1
                if max_tries < 0:
                    raise

    def del_channel(self, topic, channel, max_tries=3):
        topic = tce_perf_test.adjust_topic_name(topic)
        try:
            url = "/delete_channel?topic=%s&channel=%s"%(topic, channel)
            r = self.conn.urlopen("GET", url, body=None)
            assert r.status == 200, "http code(%s) != 200" % r.status
        except Exception as e:
            print e
            return False
        return True

class NsqHttpWriter(object):

    def __init__(self, lookupd_http_addresses, update_nsqd_nodes_interval=60, keepalive=False, timeout_ratio=1.0):
        self.lookupd_http_addresses = [
            h.rstrip("/") for h in lookupd_http_addresses]
        self.last_update_nsqd_nodes = 0
        self.update_nsqd_nodes_interval = update_nsqd_nodes_interval
        self.keepalive = keepalive
        self.http = urllib3.PoolManager(num_pools=30, timeout=timeout_ratio*TIMEOUT)

    def update_nsqd_nodes(self):
        now = time.time()
        if now - self.last_update_nsqd_nodes < self.update_nsqd_nodes_interval:
            return
        lookupd_http_addresses = self.lookupd_http_addresses
        random.shuffle(lookupd_http_addresses)
        producers = None
        for h in lookupd_http_addresses:
            try:
                r = self.http.request("GET", h + "/nodes")
                assert r.status == 200
                producers = json.loads(r.data)["data"]["producers"]
                if producers:
                    break
            except:
                logger.exception("call lookupd nodes api")
        assert producers, "NOT_FOUND_AVAILABLE_NSQD"
        nsqd_nodes = []
        for nsqd in producers:
            ip_addr = nsqd["remote_address"].split(":")[0]
            http_port = nsqd["http_port"]
            url = "http://" + ip_addr + ":" + str(http_port) + "/put?topic=%s"
            tomb = set()
            for tombstone, topic in zip(nsqd["tombstones"], nsqd["topics"]):
                if tombstone:
                    tomb.add(topic)
            nsqd_nodes.append({"url": url, "tomb": tomb})
        random.shuffle(nsqd_nodes)
        self.nsqd_nodes = nsqd_nodes
        self.last_update_nsqd_nodes = now

    def put(self, topic, msg, max_tries=3, defer=None):
        topic = tce_perf_test.adjust_topic_name(topic)
        self.update_nsqd_nodes()
        nodes = [n for n in self.nsqd_nodes if topic not in n["tomb"]]
        total_nodes = len(nodes)
        idx = random.randint(0, total_nodes - 1)
        while 1:
            try:
                node = nodes[idx]
                if defer is None:
                    url = str(node["url"] % topic)
                else:
                    try:
                        defer = int(defer)
                    except ValueError as e:
                        logger.exception("defer argument %s is not a valid integer or can not be converted to an integer", defer)
                        raise
                    url = str(node["url"] % topic) + "&defer=%s" % defer
                r = self.http.urlopen("POST", url, body=msg)
                assert r.status == 200, "http code(%s) != 200" % r.status
                if self.keepalive is False:
                    self.http.clear()
                return
            except Exception as e:
                logger.warn("NSQ_PUT url: %s, %s" % (url, e))
                max_tries -= 1
                if max_tries < 0:
                    raise
                idx = (idx + 1) % total_nodes

if __name__ == "__main__":
    # USAGE:
    h = ["http://127.0.0.1:4161"]
    w = NsqHttpWriter(h, keepalive=False)
    w.put("test", "helloworld")
    w = NsqdProxy(["http://127.0.0.1:4151"])
    w.put("test", "helloworld")

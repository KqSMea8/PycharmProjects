import json
import logging
import urllib2
import random
import socket
import struct
from time import time

logger = logging.getLogger("nsq")

SOCKET_TIMEOUT = 4
IDLE_TIMEOUT = 15

CMD_NOP = "NOP"
NL = "\n"
MAGIC = "  V2"

# [ 4-byte size ][ 4-byte frame-type][PAYLOAD]
OK = "OK"
OK_PKG_LEN = 8 + len(OK)
HEARTBEAT = "_heartbeat_"
HEARTBEAT_PKG_LEN = 8 + len(HEARTBEAT)

# implement of http://nsq.io/clients/tcp_protocol_spec.html
def send_cmd(s, cmd, data=None):
    assert isinstance(cmd, str)
    if data:
        # CMD\n[ 4-byte size ][ N-byte data ]
        assert isinstance(data, str)
        buf = cmd + NL + struct.pack('>i', len(data)) + data
    else:
        buf = cmd + NL
    s.sendall(buf)

def check_response(s):
    rsp = ""
    done = False
    while 1:
        buf = s.recv(1024)
        if len(buf) == 0:
            raise Exception("socket recv 0 bytes from remote")
        rsp += buf
        if rsp[:OK_PKG_LEN].endswith(OK):
            rsp = rsp[OK_PKG_LEN:]
            done = True
        elif rsp[:HEARTBEAT_PKG_LEN].endswith(HEARTBEAT):
            rsp = rsp[HEARTBEAT_PKG_LEN:]
            send_cmd(s, CMD_NOP)
        else:
            raise ValueError("unknown response: 0x%s[%s]" % (rsp.encode("hex"), len(rsp)))

        if not rsp and done:
            break

class NsqTcpWriter(object):
    def __init__(self, lookupd_http_addresses, update_nsqd_nodes_interval=60):
        self.lookupd_http_addresses = [h.rstrip("/") for h in lookupd_http_addresses]
        self.conn_pool = {}
        self.last_update_nsqd_nodes = 0
        self.update_nsqd_nodes_interval = update_nsqd_nodes_interval

    def update_nsqd_nodes(self):
        now = time()
        if now - self.last_update_nsqd_nodes < self.update_nsqd_nodes_interval:
            return
        lookupd_http_addresses = self.lookupd_http_addresses
        random.shuffle(lookupd_http_addresses)
        producers = None
        for h in lookupd_http_addresses:
            try:
                r = urllib2.urlopen(h + "/nodes")
                assert r.code == 200
                producers = json.loads(r.read())["data"]["producers"]
                if producers:
                    break
            except:
                logger.exception("call lookupd nodes api")
        assert producers, "NOT_FOUND_AVAILABLE_NSQD"
        nsqd_nodes = []
        for nsqd in producers:
            ip_addr = nsqd["remote_address"].split(":")[0]
            tcp_port = nsqd["tcp_port"]
            tomb = set()
            for tombstone, topic in zip(nsqd["tombstones"], nsqd["topics"]):
                if tombstone:
                    tomb.add(topic)
            nsqd_nodes.append({"addr": ip_addr + ":" + str(tcp_port), "tomb":tomb})
        random.shuffle(nsqd_nodes)
        self.nsqd_nodes = nsqd_nodes
        self.last_update_nsqd_nodes = now

    def get_socket(self, addr):
        now = time()
        sk, lasttime = self.conn_pool.get(addr, (None, 0))
        if sk is None or now - lasttime > IDLE_TIMEOUT:
            sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sk.settimeout(SOCKET_TIMEOUT)
            self.conn_pool[addr] = sk
            ip, port = addr.split(":")
            sk.connect((ip, int(port)))
            sk.sendall(MAGIC)
        lasttime = now
        self.conn_pool[addr] = (sk, lasttime)
        return sk

    def reset_socket(self, addr):
        self.conn_pool.pop(addr, None)

    def put(self, topic, msg, max_tries=5):
        self.update_nsqd_nodes()
        nodes = [n for n in self.nsqd_nodes if topic not in n["tomb"]]
        assert NL not in topic
        cmd = " ".join(["PUB", str(topic)])
        while 1:
            addr = random.choice(nodes)["addr"]
            try:
                s = self.get_socket(addr)
                send_cmd(s, cmd, msg)
                check_response(s)
                return
            except:
                logger.exception("NSQ_PUT %s" % addr)
                self.reset_socket(addr)
                max_tries -= 1
                if max_tries < 0:
                    raise

if __name__ == "__main__":
    # USAGE:
    conf = json.load(open("/etc/ss_conf/nsq_web.json"))
    h = conf["cluster1"]["nsqlookupd_http"]
    w = NsqTcpWriter(h)
    s = time()
    for _ in range(10000):
        w.put(u"test-topic", "helloworld")
    e = time()
    print e - s



#!/usr/bin/env python
#coding:utf-8
import threading, logging
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SocketPool2
from pyutil.program.retry_limiter import RetryLimiter
from pyutil.thrift.transport import SmartSocketPool
from index_updater.IndexUpdater import Client

class ThriftIndexUpdaterClient(threading.local):

    def __init__(self, service_name, identity, timeout=0.1, conn_timeout=0.05, retries=3):
        _transport = SmartSocketPool.TSocketPool(service_name, identity, timeout, conn_timeout)
        transport = TTransport.TFramedTransport(_transport)
        protocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)
        self.client = Client(protocol)
        self.client.transport = transport
        self.retries = retries

    def __getattr__(self, attr):
        def wrap(*args, **kw):
            retry_limiter = RetryLimiter("index_updater", self.retries)
            last_err_msg = ''
            while retry_limiter.can_retry():
                try:
                    self.client.transport.open()
                    func = getattr(self.client, attr)
                    return func(*args, **kw)
                except Exception, ex:
                    last_err_msg = str(ex)
                finally:
                    self.client.transport.close()

            logging.error('failed to %s after %d retries, %s',
                     attr, retry_limiter.retried(), last_err_msg)
        return wrap

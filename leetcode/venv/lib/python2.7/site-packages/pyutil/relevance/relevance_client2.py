#!/usr/bin/env python
#coding:utf-8
import threading, logging, socket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SocketPool, SocketPool2
from ss_thrift_gen.relevance.RelevanceScore2 import Client

class ThriftRelevanceClient(threading.local):

    def __init__(self, hosts, ports, timeout=0.1, conn_timeout=0.05):
        transport = SocketPool2.TSocketPool(hosts, ports, timeout, conn_timeout)
        transport = TTransport.TBufferedTransport(transport)
        protocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)
        self.client = Client(protocol)
        self.client.transport = transport

    def get(self, req):
        rsp = None
        try:
            self.client.transport.open()
            rsp = self.client.get(req)
        except socket.timeout as e:
            logging.error('relevance service get timeout')
        except:
            logging.exception('failed to call relevance service get')
        finally:
            self.client.transport.close()
        return rsp

    def mget(self, req):
        rsp = None
        try:
            self.client.transport.open()
            rsp = self.client.mget(req)
        except socket.timeout as e:
            logging.error('relevance service mget timeout')
        except:
            logging.exception('failed to call relevance service mget')
        finally:
            self.client.transport.close()
        return rsp

    def mget2(self, req):
        rsp = None
        try:
            self.client.transport.open()
            rsp = self.client.mget2(req)
        except socket.timeout as e:
            logging.error('relevance service mget2 timeout')
        except Exception as e:
            logging.exception('relevance service mget2: %s' % e)
        finally:
            self.client.transport.close()
        return rsp

    def gen_feature(self, req):
        try:
            self.client.transport.open()
            self.client.gen_feature(req)
        except socket.timeout as e:
            logging.error('relevance service gen_feature timeout')
        except:
            logging.exception('failed to call relevance service gen_feature')
        finally:
            self.client.transport.close()


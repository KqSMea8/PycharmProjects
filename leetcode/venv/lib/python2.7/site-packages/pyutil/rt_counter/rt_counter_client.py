#!/usr/bin/env python
# coding:utf-8

import logging
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SmartSocketPool
from ss_thrift_gen.data.rt_counter.CounterQueryManager import Client
from ss_thrift_gen.data.rt_counter.ttypes import *
from pyutil.program.retry_limiter import RetryLimiter
from pyutil.net.get_local_ip import get_local_ip
from ss_thrift_gen.base.ttypes import Base, BaseResp


class RtCounterServiceClient(object):
    def __init__(self, product, subsys, module, timeout=0.1, conn_timeout=0.05, retries=1, cluster="data.rt_counter.online"):
        self.caller = "%s.%s.%s" % (product, subsys, module)
        _transport = SmartSocketPool.TSocketPool(cluster, self.caller, timeout, conn_timeout)
        transport = TTransport.TFramedTransport(_transport)
        protocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)
        self.client = Client(protocol)
        self.client.transport = transport
        self.retries = retries

    def _call(self, api, req, msg):
        retry_limiter = RetryLimiter("counter_service", self.retries)
        last_err_msg = ''
        while retry_limiter.can_retry():
            try:
                self.client.transport.open()
                fun = getattr(self.client, api)
                return fun(req)
            except Exception, ex:
                last_err_msg = str(ex)
            finally:
                self.client.transport.close()

        logging.warn('failed to %s after %d retries, %s',
                     msg, retry_limiter.retried(), last_err_msg)
        return None

    def get_count(self, lookup):
        if not lookup.get('counter_names') or not lookup.get('item_ids'):
            return []
        req = Request(counter_names=lookup.get('counter_names'),
                      item_ids=lookup.get('item_ids'),
                      time_slots=lookup.get('time_slots', None),
                      daily_time_slots=lookup.get('daily_time_slots', None),
                      secondary_keys=lookup.get('secondary_keys', None), cluster=lookup.get('cluster', 0),
                      Base=Base(Caller=self.caller, Addr=get_local_ip()))
        results = []
        try:
            resp = self._call('GetCount', req, 'get counter')
            if not resp or resp.BaseResp.StatusCode != 0 or not resp.counters:
                return results
            results.extend([dict(id=count.id, name=count.name, item_id=count.item_id, count=count.count,
                                 time_slot=count.time_slot, daily_time_slot=count.daily_time_slot)
                            for count in resp.counters])
        except Exception, e:
            raise e
        return results
    def write_count(self, counters):
        return self._call_write(counters, "WriteCount")
    def write_count_oneway(self, counters):
        return self._call_write(counters, "WriteCountOneWay")
    def _build_write_req(self, counters):
        write_req = WriteRequest()
        write_req.counters = counters
        write_req.Base = Base(Caller=self.caller, Addr=get_local_ip())
        return write_req
    def _call_write(self, counters, func):
        try:
            req = self._build_write_req(counters)
            resp = self._call(func, req, 'write counter')
            if not resp or resp.BaseResp.StatusCode != 0:
                return None
        except Exception as e:
            raise e
        return resp




if __name__ == '__main__':
    client = RtCounterServiceClient("data", "counter", "pythontest")
    item_ids = [12432324, 58273423]
    lookup = dict(counter_names=["test_table_name"],
                  item_ids=item_ids)
    # test write
    counters = []
    # WARN name and table must set equal and special
    for item_id in item_ids:
        c = Counter()
        c.name = "test_table_name"
        c.table = "test_table_name"
        c.count = 1
        c.item_id = item_id
        counters.append(c)
    client.write_count(counters) # test write sync
    client.write_count_oneway(counters) # test write oneway
    # test read
    counters = client.get_count(lookup)
    for counter in counters:
        print counter['name'], counter['count'], counter['id'], counter['item_id'], counter['time_slot'], counter[
            'daily_time_slot']

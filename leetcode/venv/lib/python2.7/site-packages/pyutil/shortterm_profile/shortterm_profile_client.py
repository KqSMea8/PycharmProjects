#!/usr/bin/env python
# coding:utf-8

import os, sys, logging, time, urllib2, re, datetime, uuid, json, pprint, hashlib, random
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SmartSocketPool
from ss_thrift_gen.sprofile.ttypes import *
from ss_thrift_gen.sprofile.Sprofile import Client 
from pyutil.program.retry_limiter import RetryLimiter
from pyutil.net.get_local_ip import get_local_ip
from ss_thrift_gen.base.ttypes import Base, BaseResp
from shortterm_profile_pb2 import *

class ShorttermProfileClient(object):
    '''
    product, subsys, module - caller 的 PSM
    cluster - shortterm profile consul 地址
    '''
    def __init__(self, product, subsys, module, timeout=0.1, conn_timeout=0.05, retries=1, cluster="data.shortterm_profile.online"):
        self.caller = "%s.%s.%s" % (product, subsys, module)
        _transport = SmartSocketPool.TSocketPool(cluster, self.caller, timeout, conn_timeout)
        transport = TTransport.TFramedTransport(_transport)
        protocol = TBinaryProtocol.TBinaryProtocolAccelerated(transport)
        self.client = Client(protocol)
        self.client.transport = transport
        self.retries = retries

    def _call(self, api, req, msg):
        retry_limiter = RetryLimiter("shortterm_profile", self.retries)
        last_err_msg = ''
        while retry_limiter.can_retry():
            try:
                self.client.transport.open()
                fun = getattr(self.client, api)
                return fun(req)
            except Exception, ex:
                last_err_msg = str(ex)
            finally:
                self.client.transport.close()

        logging.warn('failed to %s after %d retries, %s',
                     msg, retry_limiter.retried(), last_err_msg)
        return None

    def get(self,req_id, user, gids, enabled_feature_ids=set(), disabled_feature_ids=set(),refresh_count=100,use_pb=False):
        req = Req(req_id= req_id, user=user,gids= gids,enabled_feature_ids=enabled_feature_ids, disabled_feature_ids=disabled_feature_ids,use_pb=use_pb,refresh_count=refresh_count,Base=Base(Caller=self.caller, Addr=get_local_ip()))
        try:
            resp = self._call("get", req, "get shortterm feature")
        except Exception as e:
            raise e
        if not resp or resp.BaseResp.StatusCode != 0:
            return ""
        return resp.features

    def get_refresh(self, req_id, user, refresh_count=100):
        req = Req(req_id=req_id, user=user,refresh_count=refresh_count,Base=Base(Caller=self.caller, Addr=get_local_ip()))
        try:
            resp = self._call("get_refresh", req, "get pb_sessions")
        except Exception as e:
            raise e
        if not resp or resp.BaseResp.StatusCode != 0:
            return ""
        return resp.features



if __name__ == "__main__":
    def get_req_id():
        return str(hashlib.md5(str(time.time()) + str(random.random())).hexdigest())

    client = ShorttermProfileClient("data","test","offline")
    req_id = get_req_id()
    #rsp = client.get_refresh(req_id,"12:8")
    #print rsp
    gids = [6356502008651842049, 6391493299530531074, 6391024172482789634, 1560448116783106, 6386416118579331585, 6390930452709900546, 6390611502504870146, \
                6390956150166290689, 6390823988755104001, 6390983088042754306, 6390613055641780482,6423976184031215874, \
                6423976184899436802, 6423976186283557122, 6423976186782681857, 6423976188355543298, 6423976189911630081, 6423976200711962881, \
                6423976203928994050, 6423976206307164417, 6423976207229911298, 6423976311089269506, 6423976314360824066,  \
                6400985680041738754, 640098568283933952, 6400985695124455938, 6400985706969170433, 6400985709401948418, 6400985709402013954, \
                6400985709402063106, \
                6400985709402145026]
    rsp = client.get(req_id,"12:8", gids, enabled_feature_ids=[1,2,3,4,5,6,7,8,9,10,11,12])
    print rsp

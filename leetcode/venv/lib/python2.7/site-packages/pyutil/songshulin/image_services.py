#!/usr/bin/env python
import os, sys, logging, signal
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import TSocketPool
from pyutil.program.icrawler_util import str_dict

from songshulin.image.similar import similar
from songshulin.image.similar.ttypes import similar_req_t, similar_rsp_t

class ThriftSimilar(object):

    def __init__(self, host, port):
        transport = TSocketPool.TSocketPool(host, port)
        self.transport = TTransport.TBufferedTransport(transport)
        self.protocol = TBinaryProtocol.TBinaryProtocol(self.transport)
        self.client = similar.Client(self.protocol)
    
    def add(self, data, uri, item_id):
        req = similar_req_t(uri, item_id, data)
        self.transport.open()
        try:
            rsp = self.client.add(req)
        finally:
            self.transport.close()
        return rsp.status, rsp.images

    def get(self, data, uri, item_id):
        req = similar_req_t(uri, item_id, data)
        self.transport.open()
        try:
            rsp = self.client.get(req)
        finally:
            self.transport.close()
        return rsp.status, rsp.images

from songshulin.image.ocr import ocr
from songshulin.image.ocr.ttypes import ocr_req_t, ocr_rsp_t

class ThriftOcr(object):

    def __init__(self, host, port):
        transport = TSocketPool.TSocketPool(host, port)
        self.transport = TTransport.TBufferedTransport(transport)
        self.protocol = TBinaryProtocol.TBinaryProtocol(self.transport)
        self.client = ocr.Client(self.protocol)
    
    def recognize(self, domain, uri, data):
        req = ocr_req_t(domain, uri, data)
        self.transport.open()
        try:
            rsp = self.client.recognize(req)
            return rsp.status, rsp.number
        finally:
            self.transport.close()
        return -1, ''

from songshulin.image.feature import Feature
from songshulin.image.feature.ttypes import FeatureReq, FeatureRsp

class ThriftFeature(object):

    def __init__(self, host, port):
        transport = TSocketPool.TSocketPool(host, port)
        self.transport = TTransport.TBufferedTransport(transport)
        self.protocol = TBinaryProtocol.TBinaryProtocol(self.transport)
        self.client = Feature.Client(self.protocol)
    
    def gist_feature(self, data, uri=''):
        req = FeatureReq(data, uri)
        self.transport.open()
        try:
            rsp = self.client.gist_feature(req)
            return rsp.status, rsp.features
        finally:
            self.transport.close()

from songshulin.image.classify import Classify
from songshulin.image.classify.ttypes import ClassifyReq, ClassifyRsp

class ThriftClassify(object):

    def __init__(self, host, port):
        transport = TSocketPool.TSocketPool(host, port)
        self.transport = TTransport.TBufferedTransport(transport)
        self.protocol = TBinaryProtocol.TBinaryProtocol(self.transport)
        self.client = Classify.Client(self.protocol)
    
    def classify(self, data, uri=''):
        req = ClassifyReq(data, uri)
        self.transport.open()
        try:
            rsp = self.client.classify(req)
            return rsp.status, rsp.label
        finally:
            self.transport.close()

#coding=utf8
import simplejson

def get_item_key(channel, id):
    if None in [channel, id] or channel.lower() not in ['rent', 'house']:
        return ""
    item_key = "20120306%s_%s"%(channel.lower(), id)
    if type(item_key) == unicode:
        item_key = item_key.encode('utf8')
    return item_key

def get_ext_item_key(channel, id):
    if None in [channel, id] or channel.lower() not in ['rent', 'house']:
        return ""
    ext_item_key = "20120229%s_extend_%s"%(channel.lower(), id)
    if type(ext_item_key) == unicode:
        ext_item_key = ext_item_key.encode('utf8')
    return ext_item_key

def delete_item(mc, channel, id, time=0):
    try:
        if None in [mc, channel, id]:
            return 0
        item_key = get_item_key(channel, id)
        if item_key != "":
            rs = mc.delete(item_key, time)
            return rs
    except:
        pass
    return 0

def delete_item_multi(mc, channel, id_list, time=0):
    try:
        if None in [mc, channel, id_list]:
            return 0
        item_key_list = []
        for id in id_list:
            item_key = get_item_key(channel, id)
            if item_key != "":
                item_key_list.append(item_key)
        if item_key_list != []:
            rs = mc.delete_multi(item_key_list, time)
            return rs
    except:
        pass
    return 0

def delete_ext_item(mc, channel, id, time=0):
    try:
        if None in [mc, channel, id]:
            return 0
        ext_item_key = get_ext_item_key(channel, id)
        if ext_item_key != "":
            rs = mc.delete(ext_item_key, time)
            return rs
    except:
        pass
    return 0

def delete_ext_item_multi(mc, channel, id_list, time=0):
    try:
        if None in [mc, channel, id_list]:
            return 0
        ext_item_key_list = []
        for id in id_list:
            ext_item_key = get_ext_item_key(channel, id)
            if ext_item_key != "":
                ext_item_key_list.append(ext_item_key)
        if ext_item_key_list != []:
            rs = mc.delete_multi(ext_item_key_list, time)
            return rs
    except:
        pass
    return 0

def get_item(mc, channel, id):
    try:
        if None in [mc, channel, id]:
            return None
        item_key = get_item_key(channel, id)
        rs = mc.get(item_key)
        if rs != None:
            return simplejson.loads(rs)
        return rs
    except:
        pass
    return None

def get_item_multi(mc, channel, id_list):
    try:
        valid_rs = {}
        if None in [mc, channel, id_list]:
            return valid_rs
        item_key_list = []
        for id in id_list:
            item_key = get_item_key(channel, id)
            if item_key != "":
                item_key_list.append(item_key)
        if item_key_list != []:
            rs = mc.get_multi(item_key_list)
            if rs != None:
                for key, val in rs.iteritems():
                    id = int(key.split('_')[1])
                    valid_val = simplejson.loads(val)
                    valid_rs[id] = valid_val
                return valid_rs
    except:
        pass
    return {}

def get_ext_item(mc, channel, id):
    try:
        if None in [mc, channel, id]:
            return None
        ext_item_key = get_ext_item_key(channel, id)
        rs = mc.get(ext_item_key)
        if rs != None:
            return simplejson.loads(rs)
        return rs
    except:
        pass
    return None

def get_ext_item_multi(mc, channel, id_list):
    try:
        valid_rs = {}
        if None in [mc, channel, id_list]:
            return valid_rs
        ext_item_key_list = []
        for id in id_list:
            ext_item_key = get_ext_item_key(channel, id)
            if ext_item_key != "":
                ext_item_key_list.append(ext_item_key)
        if ext_item_key_list != []:
            rs = mc.get_multi(ext_item_key_list)
            if rs != None:
                for key, val in rs.iteritems():
                    id = int(key.split('_')[2])
                    valid_val = simplejson.loads(val)
                    valid_rs[id] = valid_val
                return valid_rs
    except:
        pass
    return {}

rent_item_key = ['id', 'title', 'url', 'latitude', 'longitude', 'zone', 'community', \
                'room_number', 'hall_number', 'price', 'agency_status', 'rent_type', 'publish_time', \
                'pic_count', 'thumbnail_path', 'area', 'floor', 'floor_type',\
                'total_floor','fitment','layout_thumbnail_path','agency_shop','building_type','living_type',\
                'customer_id', 'contact_avatar_path', 'agency_name', 'contact_path', 'aggregate_id', 'district']
rent_ext_item_key = ['contact', 'contact_person', 'address', 'abstract',\
                     'traffic_info', 'house_info_pic_urls', 'indoor_pic_urls', 'extra', 'tags']
house_item_key = ['id', 'title', 'url', 'latitude', 'longitude', 'zone', 'community', \
                'floor', 'total_floor', 'room_number', 'hall_number', 'area', 'price', 'toward', \
                'publish_time', 'agency_status', 'pic_count',\
                'thumbnail_path','fitment','layout_thumbnail_path','agency_shop','building_type','living_type',\
                'customer_id', 'contact_avatar_path', 'agency_name', 'contact_path', 'aggregate_id', 'floor_type',
                'city_id', 'data_type', 'district']
house_ext_item_key = ['contact', 'contact_person', 'address', 'age',\
                      'abstract', 'traffic_info', 'house_info_pic_urls', 'indoor_pic_urls', 'indoor_pic_ids',
                      'score', 'extra', 'tags']

def set_item(mc, channel, id , val, time = 0):
    if None in [mc, channel, id, val]:
        return 0
    item_key = get_item_key(channel, id)
    if item_key == "":
        return 0
    #check key in val
    valid_val = {}
    if channel.lower() == 'rent':
        for key in rent_item_key:
            valid_val[key] = val[key]
    else:
        for key in house_item_key:
            valid_val[key] = val[key]

    json_val = simplejson.dumps(valid_val)
    rs = mc.set(item_key, json_val, time)
    return rs

def set_item_multi(mc, channel, mapping, time = 0):
    if None in [mc, channel, mapping]:
        return mapping.keys()
    notstored = []
    valid_mapping = {}
    for id, val in mapping.iteritems():
        item_key = get_item_key(channel, id)
        if item_key == "":
            notstored.append(str(id))
            continue
        #check key in val
        valid_val = {}
        if channel.lower() == 'rent':
            for key in rent_item_key:
                valid_val[key] = val[key]
        else:
            for key in house_item_key:
                valid_val[key] = val[key]
        json_val = simplejson.dumps(valid_val)
        valid_mapping[item_key] = json_val
    rs = mc.set_multi(valid_mapping, time)
    for key in rs:
        id = int(key.split("_")[1])
        notstored.append(id)
    return notstored

def set_ext_item(mc, channel, id , val, time = 0):
    if None in [mc, channel, id, val]:
        return 0
    ext_item_key = get_ext_item_key(channel, id)
    if ext_item_key == "":
        return 0
    #check key in val
    valid_val = {}
    if channel.lower() == 'rent':
        for key in rent_ext_item_key:
            valid_val[key] = val[key]
    else:
        for key in house_ext_item_key:
            valid_val[key] = val[key]

    json_val = simplejson.dumps(valid_val)
    rs = mc.set(ext_item_key, json_val, time)
    return rs

def set_ext_item_multi(mc, channel, mapping, time = 0):
    if None in [mc, channel, mapping]:
        return mapping.keys()
    notstored = []
    valid_mapping = {}
    for id, val in mapping.iteritems():
        ext_item_key = get_ext_item_key(channel, id)
        if ext_item_key == "":
            notstored.append(str(id))
            continue
        #check key in val
        valid_val = {}
        if channel.lower() == 'rent':
            for key in rent_ext_item_key:
                valid_val[key] = val[key]
        else:
            for key in house_ext_item_key:
                valid_val[key] = val[key]
        json_val = simplejson.dumps(valid_val)
        valid_mapping[ext_item_key] = json_val
    rs = mc.set_multi(valid_mapping, time)
    for key in rs:
        id = int(key.split("_")[2])
        notstored.append(id)
    return notstored

if __name__ == "__main__":
    print get_item_key("House", 12345)
    print get_ext_item_key("Rent", 12345)
    print get_item_key(None, 12345)
    print get_ext_item_key(None, 12345)

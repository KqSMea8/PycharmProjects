import sys
sys.path.insert(0,"../thrift/gen-py/songshulin/icrawler/")
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol
import threading
from songshulin.icrawler.pipeline import Pipeline
from songshulin.icrawler.pipeline.ttypes import *
from pyutil.thrift.thrift_util import ThriftClient
import threading


class ReqSession:
    def __init__(self,id,vars):
        self.id=id
        self.vars=vars

class PipeClient:
    def __init__(self,servers,ports, rreq_type=None,rrsp_type=None):
        self.lock=threading.Lock()
        self.sessions={}
        self.servers=servers
        self.ports=ports
        self.client=ThriftClient(self.servers,Pipeline.Client,200000,self.ports)
        self.client.open()
        self.rreq_type=rreq_type
        self.rrsp_type=rrsp_type
        self.key="icrawler"
    def reopen(self):
        self.client.close()
        self.client.open()
    def count_req(self):
        with self.lock :
            return self.client.count_req()

    def add_req(self,req,vars):
        with self.lock :
            if req.key==None:
                req.key=self.key
            req_id=self.client.add_req(req)
            self.sessions[req_id]=ReqSession(id,vars)
            return req_id

    def update_vars(self,id,vars):
        with self.lock :
            if id not in self.sessions:
                return
            self.sessions[id].update(vars)
            return

    def get_vars(self,id):
        with self.lock :
            if id not in self.sessions:
                return None
            return self.sessions[id].vars
    def clear_session(self,id):
        with self.lock :
            if id not in self.sessions:
                return 
            del self.sessions[id]
    
    def get_rsp(self,key=None,store_rsp=False):
        if key==None:
            key=self.key
        with self.lock :
            rsp=self.client.get_rsp(key)
            if store_rsp:
                self.sessions[id].vars["rsp"]=rsp
            return rsp

    def get_req(self):
        with self.lock :
            req=self.client.get_req()
            return req
    
    def add_rsp(self,rsp,key):
        with self.lock :
            req=self.client.add_rsp(rsp,key)
            return req





        



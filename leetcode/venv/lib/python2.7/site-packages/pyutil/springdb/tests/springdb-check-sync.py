#!/usr/bin/env python
import time, string, random, logging, argparse
from pyutil.springdb import SpringDBClient

def main():
    parser = argparse.ArgumentParser(description='springdb replication check tool')

    group = parser.add_argument_group('springdb servers')
    group.add_argument('--master', type=str, required=True,
                       help='springdb master server ip:port')
    group.add_argument('--slaves', type=str, required=True,
                       help='springdb slaves server ip:port,ip:port')
    group.add_argument('--table', type=str, default='sandbox',
                       help='springdb table name')

    group = parser.add_argument_group('running settings')
    group.add_argument('--loop', type=int, default=1,
                       help='loop number of all cases')
    group.add_argument('--check-delay', type=float, default=0.1,
                       help='delay before checking slaves')

    args = parser.parse_args()

    master = SpringDBClient([args.master], args.table)
    slave_servers = [s.strip() for s in args.slaves.split(',')]
    slaves = []
    for slave_server in slave_servers:
        slaves.append(SpringDBClient([slave_server], args.table))

    key = '__SPRINGDB_SYNC_CHECK_%s__' % random.randrange(0, 100)
    ttl = 60

    loop_idx = 0
    while args.loop == 0 or loop_idx < args.loop:
        val = str(loop_idx)
        result = master.setex(key, val, ttl)
        if result != True:
            print 'set master failed'
        set_time = time.time()

        while True:
            has_error = False
            time.sleep(args.check_delay)
            for idx in range(len(slaves)):
                slave = slaves[idx]
                result = slave.get(key)
                if result != val:
                    has_error = True
                    print ('check slave %s failed. %.3f s passed. '
                           'expected:%s, actual:%s' 
                           % (slave_servers[idx], time.time() - set_time,
                           val, result))
            if not has_error:
                print 'check slaves ok. %.3f s passed.' % (time.time() - set_time)
                break

        loop_idx += 1

    # cleanup
    master.delete(key)
    for slave in slaves:
        slave.delete(key)

if __name__ == '__main__':
    main()

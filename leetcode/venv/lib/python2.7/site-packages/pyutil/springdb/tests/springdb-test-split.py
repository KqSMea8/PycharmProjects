#!/usr/bin/env python
import time, string, random, logging, argparse
from pyutil.springdb import SpringDBClient

def main():
    parser = argparse.ArgumentParser(description='springdb split check tool')

    group = parser.add_argument_group('springdb servers')
    group.add_argument('--cluster', type=str, required=True,
                       help='springdb cluster name or server list. '
                       'i.e. 127.0.0.1:11211,127.0.0.1:11311')
    group.add_argument('--cluster2', type=str, default='',
                       help='used for get case if specified. '
                       'i.e. 127.0.0.1:11211,127.0.0.1:11311')
    group.add_argument('--table', type=str, default='sandbox',
                       help='springdb table name')

    group = parser.add_argument_group('running settings')
    group.add_argument('--case', choices=['setget', 'set', 'get'],
                       default='setget',
                       help='test case name')
    group.add_argument('--key-num', type=int, default=64,
                       help='key number, main key is inside {} to specify server')
    group.add_argument('--sub-key-num', type=int, default=8,
                       help='sub key is outside {}')
    group.add_argument('--check-delay', type=float, default=1,
                       help='delay between checking set and get')

    args = parser.parse_args()

    if ':' in args.cluster: # server list
        args.cluster = args.cluster.split(',')
    if ':' in args.cluster2: # server list
        args.cluster2 = args.cluster2.split(',')

    cluster1 = SpringDBClient(args.cluster, args.table)
    if args.cluster2:
        cluster2 = SpringDBClient(args.cluster2, args.table)
    else:
        cluster2 = cluster1

    key_pattern = '__SPRINGDB_SPLIT_CHECK_{%s}_%s__'
    val = time.strftime("%Y-%m-%d %H:%M:%S")
    ttl = 60

    has_error = False
    if args.case in ['setget', 'set']:
        for idx in xrange(args.key_num + 1):
            for sub_idx in xrange(args.sub_key_num):
                if idx == args.key_num: # add a special case
                    key = key_pattern % ('', sub_idx)
                else:
                    key = key_pattern % (idx, sub_idx)

                if cluster1.setex(key, val, ttl) != True:
                    has_error = True
                    print 'set %d failed' % idx
    if not has_error:
        print 'set ok'

    if args.case in ['setget']:
        print 'sleep %.3f s' % args.check_delay
        time.sleep(args.check_delay)

    if args.case in ['setget', 'get']:
        for idx in xrange(args.key_num + 1):
            for sub_idx in xrange(args.sub_key_num):
                if idx == args.key_num: # add a special case
                    key = key_pattern % ('', sub_idx)
                else:
                    key = key_pattern % (idx, sub_idx)

                result = cluster2.get(key)
                if args.case in ['setget'] and result != val:
                    has_error = True
                    print ('get %d result mismatch. key:%s, expected:%s, got:%s'
                           % (idx, key, val, result))
                if args.case in ['get'] and result == None:
                    has_error = True
                    print ('get %d result None. got:%s'
                           % (idx, result))
    if not has_error:
        print 'check split ok'

if __name__ == '__main__':
    main()

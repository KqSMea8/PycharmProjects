#!/usr/bin/env python
import time, string, random, logging, argparse, sys
from pyutil.springdb import SpringDBClient

def format_time(ts):
    return time.strftime('%m-%d %X', time.localtime(ts))

def gen_key(idx):
    return '__SPRINGDB_SYNC_TEST_%s__' % idx

def gen_value(idx):
    return format_time(time.time())

def fill(args):
    master = SpringDBClient([args.master], args.table)

    for idx in xrange(args.loop_num + 1):
        key = gen_key(random.randrange(0, args.key_range))
        val = gen_value(idx)

        if idx % 1000 == 0:
            print 'running num %d' % idx

        result = master.setex(key, val, args.ttl)
        if result != True:
            print 'set master failed'

        if args.sleep:
            time.sleep(args.sleep)

    print 'running num %d' % idx

def check(args):
    master = SpringDBClient([args.master], args.table)
    slave_servers = [s.strip() for s in args.slaves.split(',')]
    slaves = {}
    for addr in slave_servers:
        slaves[addr] = SpringDBClient([addr], args.table)

    for idx in xrange(args.key_range + 1):
        key = gen_key(idx)

        expected = master.get(key)

        for addr, slave in slaves.items():
            got = slave.get(key)

            if got != expected:
                print 'slave %s is different. key:%s, expected: %s, got: %s' % (
                      addr, key, expected, got)
    print 'check %d keys finished' % args.key_range

def main():
    parser = argparse.ArgumentParser(description='springdb replication test '
             'tool. fill data to master, then check the differences.')

    group = parser.add_argument_group('springdb servers')
    group.add_argument('--master', type=str, required=True,
                       help='springdb master server ip:port')
    group.add_argument('--slaves', type=str,
                       help='springdb slaves server ip:port,ip:port')
    group.add_argument('--table', type=str, default='sandbox',
                       help='springdb table name')

    group = parser.add_argument_group('running settings')
    group.add_argument('--mode', type=str, default='fill',
                       choices=['fill', 'check'],
                       help='step 1: fill data; step 2: check differences')
    group.add_argument('--key-range', type=int, default=10000,
                       help='the range of key')
    group.add_argument('--loop-num', type=int, default=100,
                       help='loop number of setting a key')
    group.add_argument('--ttl', type=int, default=86400,
                       help='ttl of the key')
    group.add_argument('--sleep', type=float, default=0.001,
                       help='sleep time in filling data')

    args = parser.parse_args()

    if args.mode == 'fill':
        fill(args)
    else:
        if not args.slaves:
            parser.print_help()
            sys.exit(1)
        check(args)

if __name__ == '__main__':
    main()

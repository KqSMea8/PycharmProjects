#encoding=utf8

import logging, operator
from collections import namedtuple
from pyutil.program.conf import string2list

__all__ = ['DbConf', 'ThriftConf']

class DbConf(object):
    '''
    db配置管理

    DbConf.db_read_conf(conf, alias) - 获取给定db的read conf
    DbConf.db_write_conf(conf, alias) - 获取给定db的write conf
    DbConf.db_conf_logging(conf, alias, mode) - 输出单个或多个db的配置 (mode=read/write)

    >>> Conf = namedtuple('Conf', 'ss_read_host ss_read_port ss_db_name ss_read_user ss_read_password')
    >>> conf = Conf('127.0.0.1', '3306', 'dbn', 'user', '123')
    >>> DbConf.db_read_conf(conf, DbConf.ss)
    {'passwd': '123', 'host': '127.0.0.1', 'user': 'user', 'name': 'dbn', 'port': 3306}
    >>> DbConf.db_conf_logging(conf, DbConf.ss, 'read')
    >>> DbConf.db_conf_logging(conf, [DbConf.ss], 'read')
    '''

    ss = 'ss'
    webdb = 'webdb'
    crawl = 'crawl'
    arule = 'arule' # article_rules
    article  = 'article'
    article2  = 'article2'
    link = 'article2'
    link_image = 'link_image'
    avideo = 'avideo'
    video = 'video'
    image = 'image'
    essay = 'essay'
    op_data = 'op_data'
    groupdb = 'groupdb'
    crawl_groupdb = 'crawl_groupdb'

    _knames = dict(
            ss=('ss', 'ss_db_name'),
            article=('ss_article', 'ss_article_db_name'),
            article2=('ss_article2', 'ss_article2_db_name'),
            webdb=('ss_webdb', 'ss_webdb_name'),
            crawl=('crawl', 'crawl_db_name'),
            arule=('article_rules', 'article_rules_db_name'),
            op_data=('op_data', 'op_data_db_name'),
            groupdb=('ss_groupdb', 'ss_groupdb_name'),
            crawl_groupdb=('crawl_group','crawl_group_db_name'),
            )
    _alias_map = dict(
            link=ss,
            link_image=ss,
            video=ss,
            image=ss,
            essay=ss,
            avideo=webdb,
            )

    @classmethod
    def _get_knames(cls, alias, mode):
        name = cls._alias_map.get(alias, alias)
        kn, db_kn = cls._knames[name]
        kp = '%s_%s' % (kn, mode)
        return dict(
            host=kp + '_host',
            port=kp + '_port',
            name=db_kn,
            user=kp + '_user',
            passwd=kp + '_password',
            )

    @classmethod
    def _db_conf_for(cls, conf, alias, mode, kmap=None):
        '''
        alias - DbConf.*
        model - read,write
        '''
        if alias == cls.webdb and mode == 'read':
            mode = 'offline_read'
        kmap = kmap or {}
        knames = cls._get_knames(alias, mode)
        db_conf = {}
        for k, k0 in knames.items():
            v = getattr(conf, k0)
            if not v and not k0.endswith('password'): # password can be empty
                raise Exception('no %s for %s_%s, conf_key=%s' % (k, alias, mode, k0))
            db_conf[k] = v
        db_conf['port'] = int(db_conf['port'])
        db_conf = {kmap.get(k, k): v for k, v in db_conf.items()}
        return db_conf

    @classmethod
    def db_read_conf(cls, conf, alias, kmap=None):
        return cls._db_conf_for(conf, alias, 'read', kmap=kmap)

    @classmethod
    def db_write_conf(cls, conf, alias, kmap=None):
        return cls._db_conf_for(conf, alias, 'write', kmap=kmap)

    @classmethod
    def db_conf_repr(cls, confd, alias, mode):
        '''
        confd - dict or pyutil.program.Conf
        mode - read/write
        '''
        confd = confd if isinstance(confd, dict) else cls._db_conf_for(confd, alias, mode)
        return '%s@%s:%s/%s' % operator.itemgetter('user', 'host', 'port', 'name')(confd)

    @classmethod
    def db_conf_logging(cls, confd, alias, mode, log_id=''):
        aliases = [alias] if isinstance(alias, basestring) else alias
        logging.info('%s[db_%s] %s', log_id + ' ' if log_id else '', mode,
                ', '.join('%s=%s' % (x, cls.db_conf_repr(confd, x, mode)) for x in aliases)
                )

class ThriftConf(object):
    '''
    thrift服务配置管理

    ThriftConf.thrift_conf(conf, alias) - 获取给定thrift服务的配置
    ThriftConf.thrift_servers(conf, alias) - 以list的形式返回给定thrift服务的配置
    ThriftConf.thrift_port(conf, alias) - 返回给定thrift服务的port
    ThriftConf.thrift_conf_logging(conf, alias) - 输出给定一个或多个thrift服务的配置

    >>> Conf = namedtuple('Conf', 'article_category_host article_category_port')
    >>> ThriftConf.thrift_conf(Conf('127.0.0.1', '3306'), ThriftConf.acategory)
    {'host': '127.0.0.1', 'port': 3306}
    >>> ThriftConf.thrift_conf(Conf('127.0.0.1', '3306'), ThriftConf.acategory, as_tuple=True)
    ('127.0.0.1', 3306)
    >>> ThriftConf.thrift_port(Conf('127.0.0.1', '3306'), ThriftConf.acategory)
    3306
    >>> ThriftConf.thrift_servers(Conf(('127.0.0.1', '127.0.0.2'), '3306'), ThriftConf.acategory)
    [('127.0.0.1', 3306), ('127.0.0.2', 3306)]
    >>> ThriftConf.to_servers('127.0.0.1, 127.0.0.2', '3306')
    [('127.0.0.1', 3306), ('127.0.0.2', 3306)]
    >>> ThriftConf.thrift_conf_logging(Conf('127.0.0.1', '3306'), ThriftConf.acategory)
    >>> ThriftConf.thrift_conf_logging(Conf('127.0.0.1', '3306'), ThriftConf.acategory, ThriftConf.acategory) # 同时输出多个服务的配置
    '''

    aclassify = 'aclassify'
    article_sex_detector = 'article_sex_detector'
    acommon = 'acommon'
    arule = 'arule'
    aextract = 'aextract'
    acategory = 'acategory'
    avideo = 'avideo'
    alist = 'alist'
    acluster = 'acluster'
    adetect = 'adetect'
    navdetect = 'navdetect'
    augc = 'augc'
    push_deduper = 'push_deduper'
    article_simhash = 'article_simhash'
    article_image_simhash = 'article_image_simhash'
    simple_downloader = 'simple_downloader'
    video_download = 'video_download'
    imagestore = 'imagestore'
    fei_imgstore_w = 'fei_imgstore_w'
    fei_imgstore_r = 'fei_imgstore_r'
    videostore_w = 'videostore_w'
    videostore_r = 'videostore_r'
    offline_videostore_w = 'offline_videostore_w'
    video_ex = 'video_ex'
    arecable = 'arecable'
    adedup_write = 'adedup_write'
    adedup_read = 'adedup_read'
    softaddetect = 'softaddetect'
    softadclassify = 'softadclassify'
    adengine = 'adengine'
    politicsclassify = 'politicsclassify'
    commentclassify = 'commentclassify'
    url_check = 'url_check'
    pattern_filter = 'article_pattern_filter'
    content_pattern_filter = 'content_pattern_filter'
    weibo = 'weibo'
    user_sina = 'user_sina'
    user_tencent = 'user_tencent'
    user_weixin = 'user_weixin'
    user_twitter = 'user_twitter'
    web_sina = 'web_sina'
    url_sina = 'url_sina'
    url_pattern = 'url_pattern'
    token_manager = 'token_manager'
    garbage_detect = 'garbage_detect'
    video_feature = 'video_feature'
    video_similar = 'video_similar'
    video_content_deduper = 'video_content_deduper'
    face_process = 'face_process'
    video_search = 'video_search'
    pgc_sockpuppet = 'pgc_sockpuppet'
    message_stats = 'message_stats'
    proxy_service = 'proxy_service'
    content_cleaner = 'content_cleaner'
    weixin_key_manager = 'weixin_key_manager'
    weixin_url_manager = 'weixin_url_manager'
    group_server = 'group_server'
    site_item_query = 'site_item_query'
    embed_block_extract = 'embed_block_extract'
    image_downloader = 'image_downloader'
    extract_template = 'extract_template'
    decay_type_detect = 'decay_type_detect'
    new_pipeline_service = 'new_pipeline_service'
    video_timeliness_detect='video_timeliness_detect'
    article_republish = 'article_republish'

    _knames = dict(
            aclassify='article_classify',
            article_sex_detector='article_sex_detector',
            acommon='article_common_extract',
            arule='article_rules_extract',
            aextract='article_extract',
            acategory='article_category',
            avideo='article_video_extract',
            alist='article_list_extract',
            acluster='article_cluster',
            adetect='article_detect',
            navdetect='navbar_detect',
            augc = 'article_ugc',
            push_deduper='push_deduper',
            fei_imgstore_w='feifei_imagestore_write',
            fei_imgstore_r='feifei_imagestore_read',
            videostore_w='videostore_write',
            offline_videostore_w='offline_videostore_write',
            videostore_r='videostore_read',
            video_ex='video_extract',
            arecable='article_recommendable',
            softaddetect='article_ad_detect',
            softadclassify='article_ad_classify',
            adengine='adengine',
            adedup_read='article_dedup_read',
            adedup_write='article_dedup_write',
            politicsclassify='article_politics_classify',
            commentclassify='article_comment_classify',
            user_sina='user_messages_sina',
            user_tencent='user_messages_tencent',
            user_weixin='user_messages_weixin',
            user_twitter='user_messages_twitter',
            web_sina='web_messages_sina',
            url_sina='url_messages_sina',
            url_pattern='url_pattern',
            token_manager='token_manager',
            garbage_detect='garbage_detect',
            message_stats='message_stats',
            proxy_service='proxy_service',
            content_cleaner='content_cleaner',
            weixin_key_manager='weixin_key_manager',
            weixin_url_manager='weixin_url_manager',
            group_server='group_server',
            site_item_query='site_item_query',
            embed_block_extract='embed_block_extract',
            image_downloader='image_downloader',
            decay_type_detect='decay_type_detect',
            new_pipeline_service='new_pipeline_service',
            video_timeliness_detect='video_timeliness_detect',
            article_republish='article_republish',
            )

    @classmethod
    def _get_knames(cls, name):
        kn = cls._knames.get(name, name)
        host_kn = '%s_host' % kn
        port_kn = '%s_port' % kn
        return host_kn, port_kn

    @classmethod
    def thrift_conf(cls, conf, name, as_tuple=False, as_servers=False):
        '''
        as_tuple and as_servers is exclusive, can't be true at the same time
        return -
            as_tuple=True: (host, port)
                host/port can be string/int or list
            as_servers=True: [(host, port), ...]
                host/port is string/int
            else: dict(host=host, port=port)
                host/port can be string/int or list
        '''
        host_kn, port_kn = cls._get_knames(name)
        return cls._conv_hosts(getattr(conf, host_kn), getattr(conf, port_kn),
                as_tuple=as_tuple, as_servers=as_servers)

    @classmethod
    def _conv_hosts(cls, hosts, ports, as_tuple=False, as_servers=False):
        if as_tuple is True and as_servers is True:
            raise Exception('as_tuple and as_servers are exclusive')

        def to_list(x):
            if isinstance(x, (list, tuple)):
                return list(x)
            if isinstance(x, basestring): # 未使用conf.get_values是因为对程序设置的配置, get_values仍会取到老值
                return string2list(x)
            return [x]
        hosts = to_list(hosts)
        ports = to_list(ports)

        ports = [int(x) for x in ports]
        if len(hosts) != len(ports): # 处理 [host1, host2], port => [host1, host2], [port, port]
            if len(ports) == 1:
                ports = ports * len(hosts)
            elif len(hosts) == 1:
                hosts = hosts * len(ports)
            else:
                raise Exception('hosts num != ports num: hosts=%s, ports=%s' % (hosts, ports))

        if as_servers:
            return zip(hosts, ports)

        if len(hosts) == 1:
            hosts, ports = hosts[0], ports[0]

        return (hosts, ports) if as_tuple else dict(host=hosts, port=ports)

    @classmethod
    def to_servers(cls, hosts, ports):
        return cls._conv_hosts(hosts, ports, as_servers=True)

    @classmethod
    def thrift_servers(cls, conf, name):
        return cls.thrift_conf(conf, name, as_servers=True)

    @classmethod
    def thrift_port(cls, conf, name):
        port = cls.thrift_conf(conf, name)['port']
        port = port[0] if isinstance(port, (list, tuple)) else port
        return int(port)

    @classmethod
    def thrift_conf_repr(cls, confd, name):
        confd = confd if isinstance(confd, dict) else cls.thrift_conf(confd, name)
        return '%s:%s' % (confd.get('host'), confd.get('port'))

    @classmethod
    def thrift_conf_logging(cls, confd, *names):
        msg = '[thrift] ' + ', '.join('%s=%s' % (x, cls.thrift_conf_repr(confd, x)) for x in names)
        logging.info(msg)

    @classmethod
    def simple_downloader_conf(cls, conf, as_tuple=False):
        return cls.thrift_conf(conf, cls.simple_downloader, as_tuple=as_tuple)

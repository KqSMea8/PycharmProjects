# -*- coding: utf-8 -*-

import pdb, time, hashlib
from datetime import datetime, timedelta
from pyutil.program.db import DAL
from pyutil.cache.cache_manager import get_local_cache
from ss.article.sorter.ttypes import UidType
from ua.action_type import ACTION_TYPE_DISLIKE
from pyutil.cache.cache_class import CacheClass
from ss_lib.ua.id_map_dal import IdMapDAL

_actiondb_dal = None

def _get_action_db_dal():
    global _actiondb_dal
    if _actiondb_dal is None:
        from pyutil.program.conf import Conf
        conf = Conf('/etc/ss_conf/db_action.conf')
        _actiondb_dal = DAL(host=conf.ss_actiondb_read_host,
                            port=conf.ss_actiondb_read_port,
                            user=conf.ss_actiondb_read_user,
                            passwd=conf.ss_actiondb_read_password,
                            name=conf.ss_actiondb_name,
                            read_timeout=1)
    return _actiondb_dal

def get_user_dislike_actions(devicedb_dal, uid_type, uid, start_time, end_time, limit=50):
    actions = []
    action_db_dal = _get_action_db_dal()

    if uid_type == UidType.USER_ID:
        action_db_dal.execute("""select group_id, create_time from ss_core_user_dislike
                where user_id=%s and create_time>FROM_UNIXTIME(%s) and create_time<=FROM_UNIXTIME(%s) order by create_time desc LIMIT %s""",
                int(uid), start_time, end_time, limit)
        actions = action_db_dal.cursor.fetchall()
    elif uid_type == UidType.DEVICE_ID:
        sql = """select group_id, create_time from ss_anonymous_user_dislike where device_id = %s 
                and  create_time>FROM_UNIXTIME(%s) and create_time<=FROM_UNIXTIME(%s) order by create_time desc LIMIT %s""" % (
                uid, start_time, end_time, limit)
        action_db_dal.execute(sql)
        actions = action_db_dal.cursor.fetchall()
    elif uid_type == UidType.OPEN_UDID:
        devicedb_dal.execute('select id from stats_app_device where open_udid="%s" limit %s', uid, limit)
        device_ids = devicedb_dal.cursor.fetchall()
        if device_ids:
            device_ids = [str(d['id']) for d in device_ids]
            sql = """select group_id, create_time from ss_anonymous_user_dislike where device_id in (%s) 
                    and  create_time>FROM_UNIXTIME(%s) and create_time<=FROM_UNIXTIME(%s) order by create_time desc limit %s""" % (
                    ','.join(device_ids), start_time, end_time, limit)
            action_db_dal.execute(sql)
            actions = action_db_dal.cursor.fetchall()
    
    actions = [(ACTION_TYPE_DISLIKE, int(a['group_id']), 
               int(time.mktime(a['create_time'].timetuple()))) \
               for a in actions]
    return actions


class UserDislikeChannelCache(CacheClass):
    timeout = 86400*14  #86400 #[TBD]
    version = 0.1

    def make_key(self, user):
        (uid_type, uid) = user
        return str('dislike_channel:%s:%s:%s' % (uid_type, uid, self.version))

    def __init__(self, conf):
        self.cache = get_local_cache(conf.get_values('memcache6'))

        self.id_map_dal = IdMapDAL(host=conf.ss_id_map_write_host, name=conf.ss_id_map_name,
                                   user=conf.ss_id_map_write_user, passwd=conf.ss_id_map_write_password,
                                   cache=get_local_cache(conf.get_values('memcache6')))
        
        self.recommend_dal = DAL(host=conf.ss_recommend_write_host,
                                 port=conf.ss_recommend_write_port,
                                 user=conf.ss_recommend_write_user,
                                 passwd=conf.ss_recommend_write_password,
                                 name=conf.ss_recommend_name)

    def _get_multi_as_dict(self, users):
        return {}


class UserDislikeCacheOnly(CacheClass):
    timeout = 86400*14

    def __init__(self, conf):
        self.cache = get_local_cache(conf.get_values('memcache6'))

    def make_key(self, user):
        (uid_type, uid) = user
        return str('user_dislike:%s:%s:%s' % (uid_type, uid, self.version))

    def _get_multi_as_dict(self, users):
        return {}


class UserDislikeCache(CacheClass):
    timeout = 86400*14

    def __init__(self, conf):
        self.cache = get_local_cache(conf.get_values('memcache_profile_dislike'))
        self.devicedb_dal = DAL(host=conf.ss_devicedb_read_host,
                          port=conf.ss_devicedb_read_port,
                          user=conf.ss_devicedb_read_user,
                          passwd=conf.ss_devicedb_read_password,
                          name=conf.ss_devicedb_name)

    def make_key(self, user):
        (uid_type, uid) = user
        return str('user_dislike:%s:%s:%s' % (uid_type, uid, self.version))

    def _get_multi_as_dict(self, users):
        result = {}
        end_time = time.time()
        start_time = end_time - 86400*30
        for uid_type, uid in users:
            actions = get_user_dislike_actions(self.devicedb_dal, uid_type, uid, start_time, end_time)
            gids = [a[1] for a in actions]
            result[(uid_type, uid)] = set(gids)
        return result

class UserDislikeFilter(object):

    def __init__(self, user_dislike_cache, uid_type, uid):
        self._dislike_gids = user_dislike_cache.get((uid_type, uid))
        if self._dislike_gids is None:
            self._dislike_gids = set()
        else:
            self._dislike_gids = set(self._dislike_gids)

    def filter(self, group_id):
        return group_id in self._dislike_gids
    
    def __call__(self, group_id):
        return self.filter(group_id)

class DislikeUtil:
    def __init__(self, conf):
        self.id_map_dal = IdMapDAL(host=conf.ss_id_map_write_host, name=conf.ss_id_map_name,
                                  user=conf.ss_id_map_write_user, passwd=conf.ss_id_map_write_password,
                                  cache=get_local_cache(conf.get_values('memcache6')))

        self.recommend_dal = DAL(host=conf.ss_recommend_write_host, 
                          port=conf.ss_recommend_write_port, 
                          user=conf.ss_recommend_write_user, 
                          passwd=conf.ss_recommend_write_password, 
                          name=conf.ss_recommend_name)

        self.devicedb_dal = DAL(host=conf.ss_devicedb_read_host,
                          port=conf.ss_devicedb_read_port,
                          user=conf.ss_devicedb_read_user,
                          passwd=conf.ss_devicedb_read_password,
                          name=conf.ss_devicedb_name)
        self.user_dislike_cache = UserDislikeCache(conf)
        self.user_dislike_channel_cache = UserDislikeChannelCache(conf)


    def get_user_dislike_actions(self, uid_type, uid):
        end_time = time.time()
        start_time = end_time - 86400*60
        actions = get_user_dislike_actions(self.devicedb_dal, uid_type, uid, start_time, end_time)
        return actions

    def get_user_dislike_channels(self, uid_type, uid):
        return self.user_dislike_channel_cache.get((uid_type, uid))

    def update_user_dislikes(self, user_action, openudid):
        return []

    def clear_user_dislikes_cache(self, uid_type, uid):
        self.user_dislike_cache.delete((uid_type, uid))

if __name__ == '__main__':
    print get_user_dislike_actions(None, 12, 3693336492, time.time() - 30*86400, time.time() , limit=50)
    print get_user_dislike_actions(None, 14, 3826415011, time.time() - 30 * 86400, time.time(), limit=50)


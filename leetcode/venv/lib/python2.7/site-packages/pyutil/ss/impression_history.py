# coding=utf8

import struct
import ctypes
import hashlib
import logging
import ujson as json
import msgpack
import time

from ss.article.sorter.ttypes import UidType

from adengine.ttypes import AdItemMode
import memcache

from pyutil.thrift.thrift_client import ThriftRetryClient
from pyutil.net.get_local_ip import get_local_ip
from ss_thrift_gen.toutiao_thrift.stream.base.ttypes import Base
from ss_thrift_gen.toutiao_thrift.stream.impression_cache import ImpressionCache
from ss_thrift_gen.toutiao_thrift.stream.impression_cache.base.ttypes import ITEMTYPE
from ss_thrift_gen.toutiao_thrift.stream.impression_cache.ttypes import GetBriefRequest, StatusCode


logger = logging.getLogger(__name__)

TYPE_MASK_EXTRA = 0x80

TYPE_GROUP = 1
TYPE_AD = 2
TYPE_AD_V2 = 3
TYPE_GROUP_64 = 4  # TYPE_GROUP_64 is an internal type. DO NOT USE anywhere out of here.
TYPE_AD_64 = 5  # TYPE_AD_64 is an internal type. DO NOT USE anywhere out of here.
TYPE_CHANNEL = 6
TYPE_PGC = 7
TYPE_USER = 8
TYPE_CARD = 9
TYPE_FORUM = 10
TYPE_TALK = 11
TYPE_FORUM_GROUP = 12
TYPE_WIDGET = 13
TYPE_WENDA_GROUP = 14
TYPE_CONCERN_TALK = 15
TYPE_LIVE = 16
TYPE_HOTSOON = 17

# v2 format

'''
format:
group_id_base(8 byte) + item1 + item2 + ...

item format:
type(1byte) + item_content

item with extra format:
type&TYPE_MASK_EXTRA(1byte) + item_content + extra_length(2byte) + extra_content

item_content:
TYPE_GROUP: group_id-group_id_base(4 byte) + display_time(4 byte) + mark(1 byte)
TYPE_AD:    creative_id(4 byte) + display_time(4 byte)
'''

GROUP_CONTENT_SIZE = 9
AD_CONTENT_SIZE = 8
AD_V2_CONTENT_SIZE = 9
GROUP_64_CONTENT_SIZE = 13
AD_64_CONTENT_SIZE = 13
CHANNEL_CONTENT_SIZE = 12
PGC_CONTENT_SIZE = 12
USER_CONTENT_SIZE = 12
FORUM_CONTENT_SIZE = 12
TALK_CONTENT_SIZE = 13
FORUM_GROUP_CONTENT_SIZE = 20
WENDA_GROUP_CONTENT_SIZE = 20
WIDGET_SIZE = 20
CONCERN_TALK_SIZE = 20
LIVE_SIZE = 20
HOTSOON_SIZE = 12
CARD_CONTENT_SIZE = 14  # + len(subitem1) + len(subitem2) ...


def unpack_v2(buf):
    impression_history = []
    i = 0
    base_gid = struct.unpack_from('q', buf, i)[0]
    i += 8
    buf_len = len(buf)
    while i < buf_len:
        i, item = _unpack_item(buf, base_gid, i)
        impression_history.append(item)
    return impression_history


def _unpack_item(buf, base_gid, i):
    item_type = struct.unpack_from('B', buf, i)[0]
    i += 1

    # check if item has extra data
    has_extra = bool(item_type & TYPE_MASK_EXTRA)
    item_type &= ~TYPE_MASK_EXTRA

    if item_type == TYPE_GROUP:
        gid, display_time, mark = struct.unpack_from('iic', buf, i)
        i += GROUP_CONTENT_SIZE
        data = {'group_id': base_gid + gid, 'display_time': display_time, 'mark': mark, 'type': TYPE_GROUP}
    elif item_type == TYPE_GROUP_64:
        gid, display_time, mark = struct.unpack_from('qic', buf, i)
        i += GROUP_64_CONTENT_SIZE
        data = {'group_id': base_gid + gid, 'display_time': display_time, 'mark': mark, 'type': TYPE_GROUP}
    elif item_type == TYPE_AD:
        creative_id, display_time = struct.unpack_from('ii', buf, i)
        i += AD_CONTENT_SIZE
        # fake a group_id for ad
        data = {'creative_id': creative_id, 'display_time': display_time, 'group_id': -1, 'type': TYPE_AD, 'mode': AdItemMode.SINGLE}
    elif item_type == TYPE_AD_V2:
        creative_id, display_time, mode = struct.unpack_from('iiB', buf, i)
        i += AD_V2_CONTENT_SIZE
        # fake a group_id for ad
        data = {'creative_id': creative_id, 'display_time': display_time, 'group_id': -1, 'type': TYPE_AD, 'mode': mode}
    elif item_type == TYPE_AD_64:
        creative_id, display_time, mode = struct.unpack_from('qiB', buf, i)
        i += AD_64_CONTENT_SIZE
        # fake a group_id for ad
        data = {'creative_id': creative_id, 'display_time': display_time, 'group_id': -1, 'type': TYPE_AD, 'mode': mode}
    elif item_type == TYPE_CHANNEL:
        channel_id, display_time = struct.unpack_from('qi', buf, i)
        i += CHANNEL_CONTENT_SIZE
        data = {'channel_id': channel_id, 'display_time': display_time, 'type': TYPE_CHANNEL}
    elif item_type == TYPE_PGC:
        media_id, display_time = struct.unpack_from('qi', buf, i)
        i += PGC_CONTENT_SIZE
        data = {'media_id': media_id, 'display_time': display_time, 'type': TYPE_PGC}
    elif item_type == TYPE_USER:
        user_id, display_time = struct.unpack_from('qi', buf, i)
        i += USER_CONTENT_SIZE
        data = {'user_id': user_id, 'display_time': display_time, 'type': TYPE_USER}
    elif item_type == TYPE_FORUM:
        forum_id, display_time = struct.unpack_from('qi', buf, i)
        i += FORUM_CONTENT_SIZE
        data = {'forum_id': forum_id, 'display_time': display_time, 'type': TYPE_FORUM}
    elif item_type == TYPE_WENDA_GROUP:
        group_id, question_id, display_time = struct.unpack_from('qqi', buf, i)
        i += WENDA_GROUP_CONTENT_SIZE
        data = {'group_id': group_id, 'question_id': question_id, 'display_time': display_time, 'type': TYPE_WENDA_GROUP}
    elif item_type == TYPE_TALK:
        talk_id, display_time = struct.unpack_from('qi', buf, i)
        i += TALK_CONTENT_SIZE
        data = {'talk_id': talk_id, 'display_time': display_time, 'type': TYPE_TALK}
    elif item_type == TYPE_FORUM_GROUP:
        group_id, forum_id, display_time = struct.unpack_from('qqi', buf, i)
        i += FORUM_GROUP_CONTENT_SIZE
        data = {'group_id': group_id, 'forum_id': forum_id, 'display_time': display_time, 'type': TYPE_FORUM_GROUP}
    elif item_type == TYPE_WIDGET:
        group_id, match_id, display_time = struct.unpack_from('qqi', buf, i)
        i += WIDGET_SIZE
        data = {'group_id': group_id, 'match_id': match_id, 'display_time': display_time, 'type': TYPE_WIDGET}
    elif item_type == TYPE_LIVE:
        group_id, live_id, display_time = struct.unpack_from('qqi', buf, i)
        i += LIVE_SIZE
        data = {'group_id': group_id, 'live_id': live_id, 'display_time': display_time, 'type': TYPE_LIVE}
    elif item_type == TYPE_HOTSOON:
        group_id, display_time = struct.unpack_from('qi', buf, i)
        i += HOTSOON_SIZE
        data = {'group_id': group_id, 'display_time': display_time, 'type': TYPE_HOTSOON}
    elif item_type == TYPE_CONCERN_TALK:
        talk_id, forum_id, display_time = struct.unpack_from('qqi', buf, i)
        i += CONCERN_TALK_SIZE
        data = {'talk_id': talk_id, 'forum_id': forum_id, 'display_time': display_time, 'type': TYPE_CONCERN_TALK}
    elif item_type == TYPE_CARD:
        card_id, display_time, card_type, subitems_num = struct.unpack_from('qiBB', buf, i)
        i += CARD_CONTENT_SIZE
        subitems = []
        for j in xrange(subitems_num):
            i, subitem = _unpack_item(buf, base_gid, i)
            subitems.append(subitem)
        data = {'card_id': card_id, 'card_type': card_type, 'subitems': subitems, 'display_time': display_time, 'type': TYPE_CARD}
    else:
        raise Exception('unknown impression type: %s' % item_type)

    # unpack extra data
    if has_extra:
        len = struct.unpack_from('H', buf, i)[0]
        i += 2
        raw = struct.unpack_from('%ds' % len, buf, i)[0]
        i += len
        data['extra'] = msgpack.loads(raw)

    return i, data


def unpack_groups(buf, count=None, with_card=False):
    impression_history = []
    i = 0
    n = 0
    base_gid = struct.unpack_from('q', buf, i)[0]
    i += 8
    buf_len = len(buf)
    extra_stack = []
    while i < buf_len and (count is None or n < count):
        item_type = struct.unpack_from('B', buf, i)[0]
        i += 1
        has_extra = bool(item_type & TYPE_MASK_EXTRA)
        item_type &= ~TYPE_MASK_EXTRA
        if item_type == TYPE_GROUP:
            gid, display_time = struct.unpack_from('ii', buf, i)
            i += GROUP_CONTENT_SIZE
            impression_history.append({'group_id': base_gid + gid, 'display_time': display_time})
        elif item_type == TYPE_GROUP_64:
            gid, display_time = struct.unpack_from('qi', buf, i)
            i += GROUP_64_CONTENT_SIZE
            impression_history.append({'group_id': base_gid + gid, 'display_time': display_time})
        elif item_type == TYPE_AD:
            i += AD_CONTENT_SIZE
        elif item_type == TYPE_AD_V2:
            i += AD_V2_CONTENT_SIZE
        elif item_type == TYPE_AD_64:
            i += AD_64_CONTENT_SIZE
        elif item_type == TYPE_CHANNEL:
            i += CHANNEL_CONTENT_SIZE
        elif item_type == TYPE_PGC:
            i += PGC_CONTENT_SIZE
        elif item_type == TYPE_USER:
            i += USER_CONTENT_SIZE
        elif item_type == TYPE_FORUM:
            i += FORUM_CONTENT_SIZE
        elif item_type == TYPE_HOTSOON:
            i += HOTSOON_SIZE
        elif item_type == TYPE_WENDA_GROUP:
            i += WENDA_GROUP_CONTENT_SIZE
        elif item_type == TYPE_TALK:
            i += TALK_CONTENT_SIZE
        elif item_type == TYPE_FORUM_GROUP:
            group_id, _, display_time = struct.unpack_from('qqi', buf, i)
            i += FORUM_GROUP_CONTENT_SIZE
            impression_history.append({'group_id': group_id, 'display_time': display_time})
        elif item_type == TYPE_WIDGET:
            group_id, match_id, display_time = struct.unpack_from('qqi', buf, i)
            i += WIDGET_SIZE
            impression_history.append({'group_id': group_id, 'match_id': match_id, 'display_time': display_time})
        elif item_type == TYPE_LIVE:
            group_id, live_id, display_time = struct.unpack_from('qii', buf, i)
            i += LIVE_SIZE
            impression_history.append({'group_id': group_id, 'live_id': live_id, 'display_time': display_time})
        elif item_type == TYPE_CONCERN_TALK:
            talk_id, forum_id, display_time = struct.unpack_from('qqi', buf, i)
            i += CONCERN_TALK_SIZE
            impression_history.append({'talk_id': talk_id, 'forum_id': forum_id, 'display_time': display_time})
        elif item_type == TYPE_CARD:
            card_id, display_time, card_type, subitems_num = struct.unpack_from('qiBB', buf, i)
            if has_extra and subitems_num:
                extra_stack.append(subitems_num)
            i += CARD_CONTENT_SIZE
            if with_card:
                data = {'card_id': card_id, 'card_type': card_type, 'display_time': display_time, 'type': TYPE_CARD}
                impression_history.append(data)
        else:
            raise Exception('unknown impression type: %s' % item_type)
        if not (item_type == TYPE_CARD and subitems_num):
            if has_extra:
                i += 2 + struct.unpack_from('H', buf, i)[0]
            while extra_stack:
                extra_stack[-1] -= 1
                if extra_stack[-1] == 0:
                    i += 2 + struct.unpack_from('H', buf, i)[0]
                    extra_stack.pop(-1)
                else:
                    break
        n += 1
    return impression_history


def pack_v2(impression_history):
    base_gid = 0
    buf_len = 8
    for item in impression_history:
        buf_len, base_gid = _get_buf_len_and_base_gid(item, buf_len=buf_len, base_gid=base_gid)

    buf = ctypes.create_string_buffer(buf_len + 0x1000)

    i = 0
    struct.pack_into('q', buf, i, base_gid)
    i += 8
    for item in impression_history:
        i = _pack_item(item, buf, i, base_gid=base_gid)

    return str(buf.raw)[:i]


def _get_buf_len_and_base_gid(item, buf_len=0, base_gid=0):
    item_type = item.get('type', TYPE_GROUP)
    buf_len += 1
    if item_type == TYPE_AD:
        buf_len += AD_64_CONTENT_SIZE
    elif item_type == TYPE_GROUP:
        buf_len += GROUP_64_CONTENT_SIZE
        if not base_gid:
            base_gid = item['group_id']
    elif item_type == TYPE_CHANNEL:
        buf_len += CHANNEL_CONTENT_SIZE
    elif item_type == TYPE_PGC:
        buf_len += PGC_CONTENT_SIZE
    elif item_type == TYPE_USER:
        buf_len += USER_CONTENT_SIZE
    elif item_type == TYPE_FORUM:
        buf_len += FORUM_CONTENT_SIZE
    elif item_type == TYPE_HOTSOON:
        buf_len += HOTSOON_SIZE
    elif item_type == TYPE_WENDA_GROUP:
        buf_len += WENDA_GROUP_CONTENT_SIZE
    elif item_type == TYPE_TALK:
        buf_len += TALK_CONTENT_SIZE
    elif item_type == TYPE_FORUM_GROUP:
        buf_len += FORUM_GROUP_CONTENT_SIZE
    elif item_type == TYPE_WIDGET:
        buf_len += WIDGET_SIZE
    elif item_type == TYPE_LIVE:
        buf_len += LIVE_SIZE
    elif item_type == TYPE_CONCERN_TALK:
        buf_len += CONCERN_TALK_SIZE
    elif item_type == TYPE_CARD:
        buf_len += CARD_CONTENT_SIZE
        for subitem in item.get('subitems', []):
            buf_len, base_gid = _get_buf_len_and_base_gid(subitem, buf_len=buf_len, base_gid=base_gid)
    else:
        raise Exception('unsupported impression: %s' % item)
    if 'extra' in item:
        buf_len += 2 + len(msgpack.dumps(item['extra']))
    return buf_len, base_gid


def _pack_item(item, buf, i, base_gid=0):
    item_type = item.get('type', TYPE_GROUP)

    # check if item has extra data
    has_extra = 'extra' in item
    type_mask = TYPE_MASK_EXTRA if has_extra else 0

    if item_type == TYPE_AD:
        creative_id = item['creative_id']
        if creative_id < -2 ** 31 or creative_id > 2 ** 31 - 1:
            struct.pack_into('B', buf, i, TYPE_AD_64 | type_mask)
            i += 1
            struct.pack_into('qiB', buf, i, creative_id, item['display_time'], item.get('mode', AdItemMode.SINGLE))
            i += AD_64_CONTENT_SIZE
        else:
            struct.pack_into('B', buf, i, TYPE_AD_V2 | type_mask)
            i += 1
            struct.pack_into('iiB', buf, i, creative_id, item['display_time'], item.get('mode', AdItemMode.SINGLE))
            i += AD_V2_CONTENT_SIZE
    elif item_type == TYPE_GROUP:
        gid_delta = item['group_id'] - base_gid
        if gid_delta < -2 ** 31 or gid_delta > 2 ** 31 - 1:
            struct.pack_into('B', buf, i, TYPE_GROUP_64 | type_mask)
            i += 1
            struct.pack_into('qic', buf, i, item['group_id'] - base_gid, item['display_time'], item['mark'])
            i += GROUP_64_CONTENT_SIZE
        else:
            struct.pack_into('B', buf, i, TYPE_GROUP | type_mask)
            i += 1
            struct.pack_into('iic', buf, i, item['group_id'] - base_gid, item['display_time'], item['mark'])
            i += GROUP_CONTENT_SIZE
    elif item_type == TYPE_CHANNEL:
        struct.pack_into('B', buf, i, TYPE_CHANNEL | type_mask)
        i += 1
        struct.pack_into('qi', buf, i, item['channel_id'], item['display_time'])
        i += CHANNEL_CONTENT_SIZE
    elif item_type == TYPE_PGC:
        struct.pack_into('B', buf, i, TYPE_PGC | type_mask)
        i += 1
        struct.pack_into('qi', buf, i, item['media_id'], item['display_time'])
        i += PGC_CONTENT_SIZE
    elif item_type == TYPE_USER:
        struct.pack_into('B', buf, i, TYPE_USER | type_mask)
        i += 1
        struct.pack_into('qi', buf, i, item['user_id'], item['display_time'])
        i += USER_CONTENT_SIZE
    elif item_type == TYPE_FORUM:
        struct.pack_into('B', buf, i, TYPE_FORUM | type_mask)
        i += 1
        struct.pack_into('qi', buf, i, item['forum_id'], item['display_time'])
        i += FORUM_CONTENT_SIZE
    elif item_type == TYPE_HOTSOON:
        struct.pack_into('B', buf, i, TYPE_HOTSOON | type_mask)
        i += 1
        struct.pack_into('qi', buf, i, item['group_id'], item['display_time'])
        i += HOTSOON_SIZE
    elif item_type == TYPE_WENDA_GROUP:
        struct.pack_into('B', buf, i, TYPE_WENDA_GROUP | type_mask)
        i += 1
        struct.pack_into('qqi', buf, i, item['group_id'], item['question_id'], item['display_time'])
        i += WENDA_GROUP_CONTENT_SIZE
    elif item_type == TYPE_TALK:
        struct.pack_into('B', buf, i, TYPE_TALK | type_mask)
        i += 1
        struct.pack_into('qi', buf, i, item['talk_id'], item['display_time'])
        i += TALK_CONTENT_SIZE
    elif item_type == TYPE_FORUM_GROUP:
        struct.pack_into('B', buf, i, TYPE_FORUM_GROUP | type_mask)
        i += 1
        struct.pack_into('qqi', buf, i, item['group_id'], item['forum_id'], item['display_time'])
        i += FORUM_GROUP_CONTENT_SIZE
    elif item_type == TYPE_WIDGET:
        struct.pack_into('B', buf, i, TYPE_WIDGET | type_mask)
        i += 1
        struct.pack_into('qqi', buf, i, item['group_id'], item['match_id'], item['display_time'])
        i += WIDGET_SIZE
    elif item_type == TYPE_LIVE:
        struct.pack_into('B', buf, i, TYPE_LIVE | type_mask)
        i += 1
        struct.pack_into('qqi', buf, i, item['group_id'], item['live_id'], item['display_time'])
        i += LIVE_SIZE
    elif item_type == TYPE_CONCERN_TALK:
        struct.pack_into('B', buf, i, TYPE_CONCERN_TALK | type_mask)
        i += 1
        struct.pack_into('qqi', buf, i, item['talk_id'], item['forum_id'], item['display_time'])
        i += CONCERN_TALK_SIZE
    elif item_type == TYPE_CARD:
        struct.pack_into('B', buf, i, TYPE_CARD | type_mask)
        i += 1
        struct.pack_into('qiBB', buf, i, item['card_id'], item['display_time'], item.get('card_type', 0), len(item.get('subitems', [])))
        i += CARD_CONTENT_SIZE
        for subitem in item.get('subitems', []):
            i = _pack_item(subitem, buf, i, base_gid=base_gid)
    else:
        raise Exception('unsupported impression: %s' % item)

    if has_extra:
        raw = msgpack.dumps(item['extra'])
        length = len(raw)
        struct.pack_into('H', buf, i, length)
        i += 2
        struct.pack_into('%ds' % length, buf, i, raw)
        i += length

    return i


def make_cache_key2(key_tpl, uid_type, uid, channel_id=None):
    key = key_tpl % (uid_type, uid)
    if channel_id:
        key = "%s&channel_id=%s" % (key, channel_id)
    key = hashlib.md5(key).hexdigest()
    return key


class ArticleSubjectImpressionHistoryCache(object):
    def __init__(self, servers, expire_time=86400 * 10, socket_timeout=0.5, logger=None):
        self.key_tmpl = "article_subject_cache?uid_type=%s&uid=%s"
        self.expire_time = expire_time
        self.client = memcache.Client(servers, socket_timeout=socket_timeout, logging=logger or 0)

    def get(self, uid_type, uid, channel_id=None):
        key = make_cache_key2(self.key_tmpl, uid_type, uid, channel_id)
        if not key:
            return {}
        buf = self.client.get(key)
        if not buf:
            return {}

        try:
            return json.loads(buf)
        except:
            return {}

    def set(self, uid_type, uid, history, channel_id=None):
        key = make_cache_key2(self.key_tmpl, uid_type, uid, channel_id)
        if not key:
            return
        buf = json.dumps(history)
        result = self.client.set(key, buf, self.expire_time)
        if result == 0:
            raise Exception('memcache set failed. %s' % key)


class ImpressionHistoryCache(object):
    def __init__(self, memcache_servers, expire_time=86400 * 10, subject_impression_history_cache=None, socket_timeout=0.5, logger=None):
        self.expire_time = expire_time
        self.client = memcache.Client(memcache_servers, socket_timeout=socket_timeout, logging=logger or 0)
        self.key_tmpl_v3 = 'user_history_groups_cache?uid_type=%s&uid=%s'
        self.subject_impression_history_cache = subject_impression_history_cache

    def get_v2(self, uid_type, uid, channel_id=None):
        key = make_cache_key2(self.key_tmpl_v3, uid_type, uid, channel_id)
        buf = self.client.get(key)
        if buf:
            return unpack_v2(buf)
        return []

    def get_groups(self, uid_type, uid, channel_id=None, count=None, with_card=False):
        key = make_cache_key2(self.key_tmpl_v3, uid_type, uid, channel_id)
        buf = self.client.get(key)
        if buf:
            return unpack_groups(buf, count=count, with_card=with_card)
        return []

    def get_group_impression(self, uid_type, uid, channel_id=None):
        group_list = []
        for item in self.get_v2(uid_type, uid, channel_id=channel_id):
            if item['type'] == TYPE_GROUP:
                group_list.append(item)
            elif item['type'] == TYPE_CARD:
                for subitem in item.get('subitems', []):
                    if item['type'] == TYPE_GROUP:
                        group_list.append(subitem)
        try:
            if self.subject_impression_history_cache:
                idx = group_list[-1]['idx'] if group_list else 0
                subject_impression = self.subject_impression_history_cache.get(uid_type, uid, channel_id=channel_id)
                for subject_id, subject_data in subject_impression.iteritems():
                    for subject_item in subject_data.get('i', []):
                        group_list.append({
                            'type': TYPE_GROUP,
                            'group_id': subject_item['id'],
                            'display_time': subject_item['dt'],
                            'mark': '',
                            'idx': idx,
                        })
                        idx += 1
        except Exception as e:
            logger.exception('get_group_impression: %s', e)
        return group_list

    def get_group_impression_v2(self, uid_type, uid, channel_id=None, count=None, with_card=False):
        group_list = self.get_groups(uid_type, uid, channel_id=channel_id, count=count, with_card=with_card)
        try:
            if self.subject_impression_history_cache:
                subject_impression = self.subject_impression_history_cache.get(uid_type, uid, channel_id=channel_id)
                for subject_id, subject_data in subject_impression.iteritems():
                    for subject_item in subject_data.get('i', []):
                        group_list.append({
                            'group_id': subject_item['id'],
                            'display_time': subject_item['dt'],
                        })
        except Exception as e:
            logger.exception('get_group_impression: %s', e)
        return group_list

    def get_impression_group_ids(self, uid_type, uid, channel_id=None):
        def _fetch_group_ids(impression, display_time=None):
            for item in impression:
                display_time = item['display_time'] or display_time
                if item['type'] == TYPE_GROUP:
                    yield {'group_id': item['group_id'], 'display_time': display_time}
                elif item['type'] == TYPE_CHANNEL:
                    yield {'group_id': item['channel_id'], 'display_time': display_time}
                elif item['type'] == TYPE_PGC:
                    yield {'group_id': item['media_id'], 'display_time': display_time}
                elif item['type'] == TYPE_USER:
                    yield {'group_id': item['user_id'], 'display_time': display_time}
                elif item['type'] == TYPE_FORUM:
                    yield {'group_id': item['forum_id'], 'display_time': display_time}
                elif item['type'] == TYPE_HOTSOON:
                    yield {'group_id': item['group_id'], 'display_time': display_time}
                elif item['type'] == TYPE_WENDA_GROUP:
                    yield {'group_id': item['group_id'], 'display_time': display_time}
                    yield {'group_id': item['question_id'], 'display_time': display_time}
                elif item['type'] == TYPE_TALK:
                    yield {'group_id': item['talk_id'], 'display_time': display_time}
                elif item['type'] == TYPE_FORUM_GROUP:
                    yield {'group_id': item['group_id'], 'display_time': display_time}
                    yield {'group_id': item['forum_id'], 'display_time': display_time}
                elif item['type'] == TYPE_WIDGET:
                    yield {'group_id': item['group_id'], 'display_time': display_time}
                    yield {'group_id': item['match_id'], 'display_time': display_time}
                elif item['type'] == TYPE_LIVE:
                    yield {'group_id': item['group_id'], 'live_id': item['live_id'], 'display_time': display_time}
                elif item['type'] == TYPE_CONCERN_TALK:
                    yield {'group_id': item['talk_id'], 'display_time': display_time}
                    yield {'group_id': item['forum_id'], 'display_time': display_time}
                elif item['type'] == TYPE_CARD:
                    yield {'group_id': item['card_id'], 'display_time': display_time}
                    for datum in _fetch_group_ids(item['subitems'], display_time=display_time):
                        yield datum
        return list(_fetch_group_ids(self.get_v2(uid_type, uid, channel_id=channel_id)))

    def set_raw_v2(self, buf, uid_type, uid, channel_id=None):
        if not buf:
            return
        key = make_cache_key2(self.key_tmpl_v3, uid_type, uid, channel_id)
        result = self.client.set(key, buf, self.expire_time)
        if result == 0:
            raise Exception('memcache set failed. %s' % key)


class ImpressionCacheClient(object):
    def __init__(self, servers, timeout=0.2, conn_timeout=0.1, max_retries=0, **kwargs):
        self._client = ThriftRetryClient(ImpressionCache.Client, servers, timeout=timeout, conn_timeout=conn_timeout, max_retries=max_retries, delay=0, accelerated=True, **kwargs)

    def get_group_impression(self, uid_type, uid, channel_id=None, from_second=None, count=1000, types=[], caller='', req_id=''):
        """
        uid_type <int>
        uid <int>
        channel_id <int>: 空值为feed
        from_second <int>: 时间范围最早从3天前开始, 默认从1天前开始
        count <int>: 最多返回数目，0表示返回全部
        types <list<ss_thrift_gen.toutiao_thrift.stream.impression_cache.base.ttypes.ITEMTYPE>>: 需要的数据类型，空list表示返回全部类型
        caller <string>: 调用业务名称，需要在wiki说明 (https://wiki.bytedance.com/pages/viewpage.action?pageId=52050498)
        req_id <string>: request id, 用于追溯请求调用
        """
        now = int(time.time())
        if not from_second:
            from_second = now - 86400
        else:
            from_second = max(from_second, now - 86400*3)
        if count < 0:
            count = 0

        base = Base(LogID=req_id, Caller=caller, Addr=get_local_ip())
        req = GetBriefRequest(UidType=uid_type, Uid=uid, ChannelId=channel_id or 0, StartFrom=from_second, To=now, Count=count, Ttypes=types, Base=base)
        datum = []
        try:
            if channel_id and channel_id > 0:
                resp = self._client.GetChannelBriefRange(req)
            else:
                resp = self._client.GetFeedBriefRange(req)
            if resp.Status != StatusCode.SUCC:
                raise Exception('failed with status: %s', resp.Status)
            if resp.Items:
                datum = self._pack_data(resp.Items, count=count)
        except Exception, e:
            logger.exception('get_group_impression: %s', e)
        return datum

    def _pack_data(self, impr_brief_items, count=None):
        datum = []
        if not count or count <= 0:
            count = len(impr_brief_items)
        for item in impr_brief_items:
            data = None
            if item.Ttype == ITEMTYPE.GROUP:
                data = {'group_id': item.Id, 'display_time': item.DisplayTime}
            elif item.Ttype == ITEMTYPE.CONCERN_TALK:
                data = {'group_id': item.Id, 'display_time': item.DisplayTime}
            elif item.Ttype == ITEMTYPE.FORUM_GROUP:
                data = {'group_id': item.Ids.get('gid'), 'display_time': item.DisplayTime}
            elif item.Ttype == ITEMTYPE.WIDGET:
                if item.Ids.get('match_id'):
                    data = {'group_id': item.Ids.get('gid'), 'display_time': item.DisplayTime, 'match_id': item.Ids.get('mid')}
            elif item.Ttype == ITEMTYPE.CARD:
                data = {'card_id': item.Id, 'display_time': item.DisplayTime}
            if data:
                datum.append(data)
                count -= 1
                if count <= 0:
                    break
        return datum


if __name__ == '__main__':

    def _test_impression(i, upi):
        item_type = i.get('type', TYPE_GROUP)
        if item_type == TYPE_GROUP:
            assert upi['type'] == TYPE_GROUP
            assert upi['group_id'] == i['group_id']
            assert upi['display_time'] == i['display_time']
            assert upi['mark'] == i['mark']
        elif item_type == TYPE_AD:
            assert upi['type'] == TYPE_AD
            assert upi['creative_id'] == i['creative_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_CHANNEL:
            assert upi['type'] == TYPE_CHANNEL
            assert upi['channel_id'] == i['channel_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_PGC:
            assert upi['type'] == TYPE_PGC
            assert upi['media_id'] == i['media_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_USER:
            assert upi['type'] == TYPE_USER
            assert upi['user_id'] == i['user_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_FORUM:
            assert upi['type'] == TYPE_FORUM
            assert upi['forum_id'] == i['forum_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_HOTSOON:
            assert upi['type'] == TYPE_HOTSOON
            assert upi['group_id'] == i['group_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_WENDA_GROUP:
            assert upi['type'] == TYPE_WENDA_GROUP
            assert upi['group_id'] == i['group_id']
            assert upi['question_id'] == i['question_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_TALK:
            assert upi['type'] == TYPE_TALK
            assert upi['talk_id'] == i['talk_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_FORUM_GROUP:
            assert upi['type'] == TYPE_FORUM_GROUP
            assert upi['group_id'] == i['group_id']
            assert upi['forum_id'] == i['forum_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_WIDGET:
            assert upi['type'] == TYPE_WIDGET
            assert upi['group_id'] == i['group_id']
            assert upi['match_id'] == i['match_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_LIVE:
            assert upi['type'] == TYPE_LIVE
            assert upi['group_id'] == i['group_id']
            assert upi['live_id'] == i['live_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_CONCERN_TALK:
            assert upi['type'] == TYPE_CONCERN_TALK
            assert upi['talk_id'] == i['talk_id']
            assert upi['forum_id'] == i['forum_id']
            assert upi['display_time'] == i['display_time']
        elif item_type == TYPE_CARD:
            assert upi['type'] == TYPE_CARD
            assert upi['card_id'] == i['card_id']
            assert upi['display_time'] == i['display_time']
            assert upi.get('card_type', 0) == i.get('card_type', 0)
            for si, upsi in zip(i.get('subitems', []), upi.get('subitems', [])):
                _test_impression(si, upsi)
        assert upi.get('extra') == i.get('extra')

    impression = [
        {'group_id': 100, 'display_time': 123, 'mark':'a', 'extra': 1},
        {'creative_id': 1, 'display_time': 1, 'type': TYPE_AD, 'extra': True},
        {'group_id': 99, 'display_time': 125, 'mark':'b', 'extra': 'asdgasdg'},
        {'group_id': 101, 'display_time': 126, 'mark':'c', 'extra': (1, True, 'asdgasdg')},
        {'creative_id': 2, 'display_time': 2, 'type': TYPE_AD, 'extra': {'a': 1, 'b': True, 'c': 'adsfasdg'}},
        {'group_id': 101+2**32, 'display_time': 126, 'mark':'c'},
        {'creative_id': 12351+2**32, 'display_time': 2, 'type': TYPE_AD},
        {'channel_id': 3189398995, 'display_time': 124, 'type': TYPE_CHANNEL},
        {'media_id': 2747716186, 'display_time': 23523, 'type': TYPE_PGC},
        {'user_id': 2940927040, 'display_time': 23523, 'type': TYPE_USER},
        {'forum_id': 36346246, 'display_time': 23523, 'type': TYPE_FORUM},
        {'group_id': 36346246, 'display_time': 23523, 'type': TYPE_HOTSOON},
        {'group_id': 8100, 'question_id': 36346246, 'display_time': 23523, 'type': TYPE_WENDA_GROUP},
        {'talk_id': 34672457, 'display_time': 23523, 'type': TYPE_TALK},
        {'group_id': 2352352356, 'forum_id': 36346246, 'display_time': 23523, 'type': TYPE_FORUM_GROUP},
        {'group_id': 23456788, 'match_id': 987654, 'display_time': 1440498032, 'type': TYPE_WIDGET},
        {'group_id': 23456788, 'live_id': 36346246, 'display_time': 1440498032, 'type': TYPE_LIVE},
        {'talk_id': 8100, 'forum_id': 36346246, 'display_time': 23523, 'type': TYPE_CONCERN_TALK},
        {'card_id': 3416234623, 'display_time': 21898, 'type': TYPE_CARD, 'card_type': 12, 'subitems': [
            {'group_id': 8100, 'display_time': 123, 'mark':'a'},
            {'creative_id': 81, 'display_time': 1, 'type': TYPE_AD},
            {'group_id': 899, 'display_time': 125, 'mark':'b'},
            {'group_id': 8101, 'display_time': 126, 'mark':'c'},
            {'creative_id': 82, 'display_time': 2, 'type': TYPE_AD},
            {'group_id': 8101+2**32, 'display_time': 126, 'mark':'c'},
            {'creative_id': 812351+2**32, 'display_time': 2, 'type': TYPE_AD},
            {'channel_id': 83189398995, 'display_time': 124, 'type': TYPE_CHANNEL},
            {'media_id': 82747716186, 'display_time': 23523, 'type': TYPE_PGC},
            {'user_id': 82940927040, 'display_time': 23523, 'type': TYPE_USER},
            {'forum_id': 32536346246, 'display_time': 23523, 'type': TYPE_FORUM},
            {'group_id': 36346246, 'display_time': 23523, 'type': TYPE_HOTSOON},
            {'group_id': 8100, 'question_id': 32536346246, 'display_time': 23523, 'type': TYPE_WENDA_GROUP},
            {'talk_id': 346734762457, 'display_time': 23523, 'type': TYPE_TALK},
            {'group_id': 232352356, 'forum_id': 3636246, 'display_time': 235823, 'type': TYPE_FORUM_GROUP},
            {'group_id': 23456788, 'match_id': 987654, 'display_time': 1440498032, 'type': TYPE_WIDGET},
            {'group_id': 23456788, 'live_id': 987654, 'display_time': 1440498032, 'type': TYPE_LIVE},
            {'talk_id': 8100, 'forum_id': 36346246, 'display_time': 23523, 'type': TYPE_CONCERN_TALK},
        ]},
    ]
    packed = pack_v2(impression)

    unpacked = unpack_v2(packed)
    for i, upi in zip(impression, unpacked):
        _test_impression(i, upi)

    for g in unpack_groups(packed, with_card=True):
        print g

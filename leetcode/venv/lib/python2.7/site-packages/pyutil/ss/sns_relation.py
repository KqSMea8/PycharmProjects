#!/usr/bin/env python
#coding=utf8

import copy, os, sys, json, logging, time
from pyutil.mapred import MapReduceJob
from datetime import datetime, timedelta

from struct import unpack_from, pack, pack_into

from pyutil.program.db import DAL






class SNSRelationUtil:

    def __init__(self, conf):
        self.mining2_dal = DAL(host=conf.ss_mining2_write_host,
                        port=conf.ss_mining2_write_port,
                        user=conf.ss_mining2_write_user,
                        passwd=conf.ss_mining2_write_password,
                        name=conf.ss_mining2_name)
        
        self.mining_dal = DAL(host=conf.ss_mining_write_host,
                        port=conf.ss_mining_write_port,
                        user=conf.ss_mining_write_user,
                        passwd=conf.ss_mining_write_password,
                        name=conf.ss_mining_name)


    def get_user_friends(self, user_id):    
        self.mining2_dal.execute('select friend_ids from sns_user_friends where user_id=%s' % user_id)
        row = self.mining2_dal.cursor.fetchone()
        if not row:
            return []
            
        fids = row['friend_ids']
        offset = 0
        friend_ids = []
        while offset < len(fids):
            fid = unpack_from('l', fids, offset)[0]
            offset += 8
            friend_ids.append(fid)
        return friend_ids            


    def get_sns_friends_by_sns_user(self, platform, uid):
        user_id = self.get_sns_user_id(platform, uid)
        if not user_id:
            return []
        friend_ids = self.get_user_friends(user_id)
        if not friend_ids:
            return []
        self.mining_dal.execute('select uid from sns_user where id in (%s)' % ','.join([str(fid) for fid in friend_ids]))
        rows = self.mining_dal.cursor.fetchall()
        return [r['uid'] for r in rows]


    def save_user_friends(self, user_id, friend_ids):
        fids = ''
        for fid in friend_ids:
            fids += pack('l', fid)

        sql = 'insert into sns_user_friends (user_id, friend_ids, create_time) values (%s, %s, %s) ON DUPLICATE KEY UPDATE friend_ids=VALUES(friend_ids)'
        self.mining2_dal.execute(sql, user_id, fids, datetime.now())


    def get_auth_users_by_sns_friend(self, platform, uid):
        sns_user_id = self.get_sns_user_id(platform, uid)
        if not sns_user_id:
            return []

        self.mining2_dal.execute('select auth_user_id from auth_user_friend where friend_id=%s'%sns_user_id)
        rows = self.mining2_dal.cursor.fetchall()
        auth_users = [r['auth_user_id'] for r in rows]
        return auth_users


    def get_sns_user_id(self, platform, uid):
        self.mining_dal.execute('select id from sns_user where sign=unhex(md5("%s:%s"))' % (platform, uid))
        row = self.mining_dal.cursor.fetchone()
        if row:
            return row['id']
        return None

    def save_auth_user_friends(self, auth_user_id, platform, uid):
        sns_user_id = self.get_sns_user_id(platform, uid)
        if not sns_user_id:
            return []

        friend_ids = self.get_user_friends(sns_user_id)
        if friend_ids:
            self.mining2_dal.execute('insert ignore into auth_user_friend (auth_user_id, friend_id) values %s' % \
                    ','.join(['(%s, %s)'%(auth_user_id, fid) for fid in friend_ids]))
        return friend_ids



if __name__ == '__main__':
    from pyutil.program.conf import Conf
    conf = Conf('/opt/tiger/sns_mining/conf/deploy.conf')
    util = SNSRelationUtil(conf)
    #user_id = util.get_sns_user_id(1, 1648688575)
    #print util.get_user_friends(user_id)
    #print util.get_auth_users_by_sns_friend(1, 1197161814)
    print util.get_sns_friends_by_sns_user(1, 1648688575)

    #util.save_auth_user_friends(336, 1, 1648688575)

#!/usr/bin/env python
#coding=utf8

import hashlib

from datetime import datetime

from struct import unpack_from, pack
from pyutil.program.db import DAL

def _gen_hash_int64(raw_val):
    val = hashlib.new('md5', raw_val).hexdigest()
    return long(val[:16], 16)

def gen_hash_uid(platform_id, uid):
    '''
    >>> gen_hash_uid(1, u'2518028283')
    3878164993012828670L
    >>> gen_hash_uid(2, u'wangdandan0705')
    17519282931586983986L
    '''
    if not platform_id or not uid:
        return None
    if isinstance(uid, unicode):
        uid = uid.encode('utf8')
    val = '%s:%s' % (platform_id, uid)
    return _gen_hash_int64(val)


class UserFriendshipUtil:

    def __init__(self, conf):
        self.crawl_read_dal = DAL(host=conf.crawl_read_online_host,
                        port=conf.crawl_read_online_port,
                        user=conf.crawl_read_online_user,
                        passwd=conf.crawl_read_online_password,
                        name=conf.crawl_db_name)
        self.crawl2_read_dal = DAL(host=conf.crawl2_read_host,
                        port=conf.crawl2_read_port,
                        user=conf.crawl2_read_user,
                        passwd=conf.crawl2_read_password,
                        name=conf.crawl2_db_name)
        self.crawl2_write_dal = DAL(host=conf.crawl2_write_host,
                        port=conf.crawl2_write_port,
                        user=conf.crawl2_write_user,
                        passwd=conf.crawl2_write_password,
                        name=conf.crawl2_db_name)
        self.relation2config = dict(
                friendship=dict(
                    read_dal=self.crawl2_read_dal,
                    write_dal=self.crawl2_write_dal,
                    table='user_friendship',
                    field='friend_huids',
                ),
                fans=dict(
                    read_dal=self.crawl2_read_dal,
                    write_dal=self.crawl2_write_dal,
                    table='user_fans',
                    field='fan_huids',
                ),
            )

    #####################
    # private interface #
    #####################
    def _get_relation_huids_by_huid(self, relation_type, huid):
        config = self.relation2config[relation_type]
        table = config['table']
        field = config['field']
        dal = config['read_dal']
        dal.execute('select %s from %s where huid=%s' % (field, table, huid))
        row = dal.cursor.fetchone()
        if not row:
            return []

        rhuids = row[field]
        offset = 0
        relation_huids = []
        while offset < len(rhuids):
            fhuid = unpack_from('Q', rhuids, offset)[0]
            offset += 8
            relation_huids.append(fhuid)
        return relation_huids

    def _get_relation_huids_by_sns_user(self, relation_type, platform_id, uid):
        huid = gen_hash_uid(platform_id, uid)
        if not huid:
            return []
        return self._get_relation_huids_by_huid(relation_type, huid)

    def _get_sns_relations_by_huid(self, relation_type, huid):
        relation_huids = self._get_relation_huids_by_huid(relation_type, huid)
        return self.get_sns_users_by_huids(relation_huids).values()

    def _get_sns_relations_by_sns_user(self, relation_type, platform_id, uid):
        relation_huids = self._get_relation_huids_by_sns_user(relation_type, platform_id, uid)
        return self.get_sns_users_by_huids(relation_huids).values()

    def _save_user_relations_by_huid(self, relation_type, huid, relation_huids):
        config = self.relation2config[relation_type]
        table = config['table']
        field = config['field']
        sql = 'insert into %s (huid, %s, create_time, modify_time) ' % (table, field) + \
              'values (%s, %s, %s, %s) ' + \
              'ON DUPLICATE KEY UPDATE %s=VALUES(%s), modify_time=VALUES(modify_time)' % (field, field)
        config['write_dal'].execute(sql, huid, relation_huids, datetime.now(), datetime.now())

    def _save_user_relations(self, relation_type, platform_id, uid, relation_uids):
        huid = gen_hash_uid(platform_id, uid)
        relation_huids = ''
        for ruid in relation_uids:
            rhuid = gen_hash_uid(platform_id, ruid)
            if rhuid:
                relation_huids += pack('Q', rhuid)

        self._save_user_relations_by_huid(relation_type, huid, relation_huids)

    ###################
    # comon interface #
    ###################
    def get_sns_user_by_huid(self, huid):
        self.crawl2_read_dal.execute('select platform_id, uid from user where huid=%s' % huid)
        row = self.crawl2_read_dal.cursor.fetchone()
        if row:
            return dict(platform_id=row['platform_id'], uid=row['uid'])
        return None

    def get_sns_users_by_huids(self, huids):
        if not huids:
            return {}
        self.crawl2_read_dal.execute('select platform_id, uid, huid from user where huid in (%s)' % ','.join(map(str, huids)))
        rows = self.crawl2_read_dal.cursor.fetchall()
        return {r['huid']: (r['platform_id'], r['uid']) for r in rows}

    #############################
    # user_friendship interface #
    #############################
    def get_friend_huids_by_huid(self, huid):
        return self._get_relation_huids_by_huid('friendship', huid)

    def get_friend_huids_by_sns_user(self, platform_id, uid):
        return self._get_relation_huids_by_sns_user('friendship', platform_id, uid)

    def get_sns_friends_by_huid(self, huid):
        return self._get_sns_relations_by_huid('friendship', huid)

    def get_sns_friends_by_sns_user(self, platform_id, uid):
        return self._get_sns_relations_by_sns_user('friendship', platform_id, uid)

    def save_user_friends_by_huid(self, huid, friend_huids):
        self._save_user_relations_by_huid('friendship', huid, friend_huids)

    def save_user_friends(self, platform_id, uid, friend_uids):
        self._save_user_relations('friendship', platform_id, uid, friend_uids)

    #######################
    # user_fans interface #
    #######################
    def get_fan_huids_by_huid(self, huid):
        return self._get_relation_huids_by_huid('fans', huid)

    def get_fan_huids_by_sns_user(self, platform_id, uid):
        return self._get_relation_huids_by_sns_user('fans', platform_id, uid)

    def get_sns_fans_by_huid(self, huid):
        return self._get_sns_relations_by_huid('fans', huid)

    def get_sns_fans_by_sns_user(self, platform_id, uid):
        return self._get_sns_relations_by_sns_user('fans', platform_id, uid)

    def save_user_fans_by_huid(self, huid, fan_huids):
        self._save_user_relations_by_huid('fans', huid, fan_huids)

    def save_user_fans(self, platform_id, uid, fan_uids):
        self._save_user_relations('fans', platform_id, uid, fan_uids)

if __name__ == '__main__':
    from pyutil.program.conf import Conf
    from pyutil.program.pathutil import get_fullpath
    conf_file = get_fullpath(__file__, '../../../ss_crawler/conf/deploy.conf')
    conf = Conf(conf_file)
    util = UserFriendshipUtil(conf)
    #print util.get_sns_user_by_huid(11866343345804068452)
    #print util.get_sns_friends_by_sns_user(1, 1971936724)
    #print util.get_sns_friends_by_huid(747889584026295617)
    #print util.get_sns_fans_by_huid(15870756169620446147)
    f = util.get_sns_friends_by_sns_user(1, 1414660444)
    print len(f), f
    f = util.get_sns_fans_by_sns_user(1, 1142963741)
    print len(f), f

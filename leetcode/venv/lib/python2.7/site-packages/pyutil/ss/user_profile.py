#!/usr/bin/env python
# coding=utf8
import pdb, json, signal, sys, time, hashlib, math, time
from datetime import datetime, timedelta
from struct import pack, unpack, unpack_from, calcsize
from pyutil.memcache.jenkins import oneatatime
from pyutil.cache.cache_manager import get_local_cache
from ss_lib.ua.id_map_dal import IdMapDAL
from ss.article.sorter.ttypes import UidType
from pyutil.program.db import DAL
from pyutil.program.conf import Conf



class UserProfileUtil:

    def __init__(self, conf):
        self.conf = conf

        self.cache = get_local_cache(conf.get_values('memcache6'))

        self.id_map_dal = IdMapDAL(host=conf.ss_id_map_write_host,
                name=conf.ss_id_map_name,
                user=conf.ss_id_map_write_user,
                passwd=conf.ss_id_map_write_password,
                cache=get_local_cache(conf.get_values('memcache6')))

        self.device_dal = DAL(host=conf.ss_devicedb_write_host,
                port=conf.ss_devicedb_write_port,
                user=conf.ss_devicedb_write_user,
                passwd=conf.ss_devicedb_write_password,
                name=conf.ss_devicedb_name)

        self.recommend_dal = DAL(host=conf.ss_recommend_write_host,
                port=conf.ss_recommend_write_port,
                user=conf.ss_recommend_write_user,
                passwd=conf.ss_recommend_write_password,
                name=conf.ss_recommend_name)

        self.timeout = 5 # For test
        self.version = 1.4


    def get_profile(self, uid_type, uid):
        return self._get_profile(uid_type, uid)
        key = 'up:%s:%s:%s' % (uid_type, uid, self.version)
        profile = self.cache.get(key)
        if profile == None:
            profile = self._get_profile(uid_type, uid)
            self.cache.set(key, profile, self.timeout)

        return profile


    def _get_profile(self, uid_type, uid):

        if uid_type == UidType.DEVICE_ID:
            uid_type = UidType.OPEN_UDID
            self.device_dal.execute('select open_udid from stats_app_device where id=%s'%uid)
            try:
                uid = self.device_dal.cursor.fetchone()['open_udid']
                assert uid
            except:
                return {}
            uid = self.id_map_dal.get_mapped_id2(uid, UidType.OPEN_UDID)

        elif uid_type == UidType.OPEN_UDID:
            if isinstance(uid, str):
                uid = self.id_map_dal.get_mapped_id2(uid, UidType.OPEN_UDID)

        elif uid_type == UidType.USER_ID:
            pass

        else:
            return None


        self.recommend_dal.execute('select gender, age, ad_tag from user_profile where uid_type=%s and uid=%s'%(uid_type, uid))
        result = {}
        row = self.recommend_dal.cursor.fetchone()
        if row:
            ad_tags = row.get('ad_tag')
            if ad_tags:
                ts = {}
                for tag in ad_tags.split(','):
                    t, ttype, w = tag.split(':')
                    if ttype != '2':
                        continue
                    t, w = int(t), float(w)
                    if w > ts.get(t, 0):
                        ts[t] = (t, w)

                ts = ts.values()
                ts.sort(key=lambda r:r[1], reverse=True)
                ts = [(t, w) for t, w in ts if w > 0.01]
                row['ad_tag'] = ts
            else:
                row['ad_tag'] = []
            result = row

        return result



if __name__ == '__main__':

    conf = Conf('/opt/tiger/ss_conf/ss/common.conf')
    util = UserProfileUtil(conf)

    def print_result(uid_type, uid):
        result =  util.get_profile(uid_type, uid)
        print '%s:%s'%(uid_type, uid), result

    print_result(12, 8)
    print_result(12, 336)
    print_result(12, 9225)
    print_result(12, 24)
    print_result(12, 60584)
    print_result(14, 1122357)
    print_result(14, 1409530)
    print_result(14, 1406381860)
    print_result(14, 6)


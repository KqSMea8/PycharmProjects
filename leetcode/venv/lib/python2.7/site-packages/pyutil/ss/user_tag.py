#!/usr/bin/env python
#coding=utf8
import math, traceback, copy, hashlib, os, sys, logging, time, urllib, urllib2, re, md5
from datetime import datetime
import pdb, json
from ss_thrift_gen.ss.article.sorter.ttypes import Req, User, UidType
from pyutil.cache.cache_manager import get_local_cache
from pyutil.program.db import DAL
from ss_lib.ua.id_map_dal import IdMapDAL 
from pyutil.program.conf import Conf


INDEX_PATH = '/mnt/mfs/user_tag/index'
INDEX_PATH_TMP = '/mnt/mfs/user_tag/index_tmp'
INDEX_PATH_BAK = '/mnt/mfs/user_tag/index_bak'

class GroupUserGen(object):
    def __init__(self, tag_type, data_file=None):
        self.tag_type = tag_type
        self.data_file = data_file

    def get_group_user_tags(self, group_id):
        pass

    
    def check_user_tag(self, tag, weight, rank, weights):
        pass



    def gen_group_tag_users(self, tags):
        if not tags:
            return

        user_extras = {}
        for tag in tags:
            cmd = 'cat %s/%s/t%s 2>/dev/null' % (INDEX_PATH, self.tag_type, tag) 
            self.pipe = os.popen(cmd)
            while True:
                try:
                    line = self.pipe.readline()
                    if not line:
                        break

                    user, w = line.split('\t')
                    uid_type, uid = user.split(':')
                    uid_type = int(uid_type)
                    uid = long(uid)
                    w = float(w)
                    extra = user_extras.get((uid_type, uid), {})
                    if not extra:
                        user_extras[(uid_type, uid)] = extra
                    extra.update({tag:w})
                except:
                    pass

        for u, extra in user_extras.iteritems():
            uid_type, uid = u
            yield uid_type, uid, extra


    def get_users_by_group(self, group_id, users={}, count=100000):
        tags = self.get_group_user_tags(group_id)
        cnt = 0
        for uid_type, uid, extra in self.gen_group_tag_users(tags):
            #if cnt >= count:
            #    #self.pipe.close()
            #    break
            if uid_type not in (11, 12):
                continue
            user = (uid_type, uid)
            if user not in users:
                users[user] = {}
            users[user][self.tag_type] = extra
            cnt += 1 
        return users

    def get_users_by_tag(self, tags, users={}, count=100000):
        cnt = 0
        for uid_type, uid, extra in self.gen_group_tag_users(tags):
            #if cnt >= count:
            #    #self.pipe.close()
            #    break
            if uid_type not in (11, 12):
                continue
            user = (uid_type, uid)
            if user not in users:
                users[user] = {}
            users[user][self.tag_type] = extra
            cnt += 1 
        return users


    def init_tag_data(self, write2tmp=False):
        tag_stats = {}
        tag_files = {}
        cmd = 'cat %s' % self.data_file 
        self.pipe = os.popen(cmd)
        while True:
            try:
                line = self.pipe.readline()
                if not line:
                    break

                user, topics = line.split('\t')
                uid_type, uid = user.split(':')
                uid_type = int(uid_type)
                uid = long(uid)
                extra = {}
                weights = []
                tokens = topics.split(',')
                for i in range(len(tokens)):
                    t, w = tokens[i].split(':')
                    w = float(w)
                    weights.append((t, w))
                
                for i in range(len(weights)):
                    t, w = weights[i]
                    w = float(w)
                    if not self.check_user_tag(t, w, i, weights):
                        continue
                    
                    if t not in tag_stats:
                        tag_stats[t] = 0
                        tag_dir = '%s/%s'%(INDEX_PATH_TMP, self.tag_type)
                        if not os.path.exists(tag_dir):
                            os.makedirs(tag_dir)
                        f = open('%s/t%s' % (tag_dir, t), 'w')
                        tag_files[t] = f
                    tag_stats[t] += 1
                    f = tag_files[t]
                    f.write('%s:%s\t%.3f\n' % (uid_type, uid, w)) 

            except:
                pass

        for t, f in tag_files.iteritems():
            f.close()
        
        if not write2tmp:
            os.system('rm %s/%s -r' % (INDEX_PATH_BAK, self.tag_type))
            os.system('mv %s/%s %s/%s' % (INDEX_PATH, self.tag_type, INDEX_PATH_BAK, self.tag_type))
            os.system('mv %s/%s %s/%s' % (INDEX_PATH_TMP, self.tag_type, INDEX_PATH, self.tag_type))
            
        return tag_stats



class SimpleGroupUserGen(GroupUserGen):
    def __init__(self, tag_type, data_file, recommend_dal, min_weight, top_rank):
        super(SimpleGroupUserGen, self).__init__(
            data_file=data_file, tag_type=tag_type)
        self.min_weight = min_weight 
        self.top_rank = top_rank 
        self.recommend_dal = recommend_dal

    def check_user_tag(self, tag, weight, rank, weights):
        w_count = len([w for t, w in weights if w>=self.min_weight])
        if weight < self.min_weight or float(rank)/w_count > self.top_rank:
            return False
        else:
            return True



class GroupTopic100UserGen(SimpleGroupUserGen):
    def get_group_user_tags(self, group_id):
        tags = []
        self.recommend_dal.execute('select topic_distribution from article_topic_distribution where group_id=%s'%group_id)
        row = self.recommend_dal.cursor.fetchone()
        if not row:
            return tags 

        topic_weights = [float(w) for w in row['topic_distribution'].split()]
        for i in range(len(topic_weights)):
            w = topic_weights[i]
            if w >= 0.25:
                tags.append(str(i+1))
        return tags


class GroupTopic512UserGen(SimpleGroupUserGen):
    def get_group_user_tags(self, group_id):
        tags = []
        self.recommend_dal.execute('select topic_distr from group_topic_distr where group_id=%s'%group_id)
        row = self.recommend_dal.cursor.fetchone()
        if not row:
            return tags 

        topic_weights = [int(w) for w in row['topic_distr'].split()]
        total_weight = sum(topic_weights)
        for i in range(len(topic_weights)):
            w = float(topic_weights[i]) / total_weight
            if w >= 0.15:
                tags.append(str(i+1))
        return tags


class GroupClusterUserGen(SimpleGroupUserGen):
    def get_group_user_tags(self, group_id):
        tags = []
        self.recommend_dal.execute('select user_cluster_distr from group_user_cluster_distr where group_id=%s'%group_id)
        row = self.recommend_dal.cursor.fetchone()
        if not row:
            return []

        ts = row['user_cluster_distr']

        #ts = self.gen_group_user_cluster(group_id)
        if not ts:
            return []
        for t in ts.split(','):
            t, w = t.split(':')
            w = float(w)
            if w < 0.4:
                continue
            tags.append(t)
        return tags



class UserTagUtil:

    def __init__(self, conf):
        self.conf = conf

        self.recommend_dal = DAL(host=conf.ss_recommend_write_host,
                  port=conf.ss_recommend_write_port,
                  user=conf.ss_recommend_write_user,
                  passwd=conf.ss_recommend_write_password,
                  name=conf.ss_recommend_name)

        self.cache = get_local_cache(conf.get_values('memcache6'))

        self.group_user_gen_list = [
                GroupTopic512UserGen('gt512', '/mnt/mfs/user_tag/user_group_topic_512_0', self.recommend_dal, min_weight=2, top_rank=0.2),
                GroupTopic100UserGen('gt100', '/mnt/mfs/user_tag/user_group_topic_100_0', self.recommend_dal, min_weight=5, top_rank=0.2),
                GroupClusterUserGen('uc128', '/mnt/mfs/user_tag/user_group_topic_cluster_128.dat', self.recommend_dal, min_weight=0.1, top_rank=0.2),
            ]

        self.group_user_gen_map = dict([(g.tag_type, g) for g in self.group_user_gen_list])


    def get_group_user_tags(self, group_id, with_group_tag=True):
        tags = []
        for g in self.group_user_gen_list:
            tids = g.get_group_user_tags(group_id)
            for t in tids:
                self.recommend_dal.execute('select * from tag where type="%s" and tag=%s' % (g.tag_type, t))
                row = self.recommend_dal.cursor.fetchone()
                if row:
                    tags.append(row)

        if with_group_tag:
            group_tags = set(['"%s"' % r['group_tag'] for r in tags if r['group_tag']])
            if group_tags:
                tid_set = set([r['id'] for r in tags])
                self.recommend_dal.execute('select * from tag where group_tag in (%s)' % ','.join(group_tags))
                rows = self.recommend_dal.cursor.fetchall()
                for row in rows:
                    if row['id'] not in tid_set:
                        tags.append(row)

        for tag in tags:
            desp_list = tag.get('description').split(u', ')[:5]
            desp_dict_list = []
            for desp in desp_list:
                desp_elements = desp.split(u' ')
                desp_dict_list.append({'key_word': desp_elements[0], 'weight': desp_elements[1]})
            tag['desp'] = desp_dict_list

        return tags


    def get_users_by_group(self, group_id):
        users = {}
        for g in self.group_user_gen_list:
            g.get_users_by_group(group_id, users)
    
        for user, extra in users.iteritems():
            uid_type, uid = user
            yield uid_type, uid, extra
    

    def get_users_by_tag(self, tags):
        if not tags:
            return

        users = {}
        self.recommend_dal.execute('select * from tag where id in (%s)' % ','.join([str(t) for t in tags]))
        rows = self.recommend_dal.cursor.fetchall()
        tag_map = {}
        for r in rows:
            if r['type'] not in tag_map:
                tag_map[r['type']] = []
            tag_map[r['type']].append(r['tag'])
        
        for tag_type, ts in tag_map.iteritems():
            user_gen = self.group_user_gen_map.get(tag_type)
            if user_gen:
                user_gen.get_users_by_tag(ts, users)

        for user, extra in users.iteritems():
            uid_type, uid = user
            yield uid_type, uid, {'clusters': extra}


    def init_tag_data(self, tag_type=None, write2tmp=False):
        tag_stats = {} 
        for g in self.group_user_gen_list:
            if tag_type and g.tag_type != tag_type:
                continue
            ts = g.init_tag_data(write2tmp)
            tag_stats[g.tag_type] = ts

        if not write2tmp:
            for tag_type, ts in tag_stats.iteritems():
                for tag, s in ts.iteritems():
                    key = ('tag_stats:%s:%s' % (tag_type, tag)).encode('utf8')
                    self.cache.set(key, s)
                    self.recommend_dal.execute('update tag set users=%s where type="%s" and tag="%s"' % (s, tag_type, tag))

        return tag_stats

    def init_tag_user_count(self):
        self.recommend_dal.execute('select * from tag')
        tags = self.recommend_dal.cursor.fetchall()
        for t in tags:
            f = os.popen('wc -l %s/%s/t%s' % (INDEX_PATH, t['type'], t['tag']))
            users = None
            try:
                users = int(f.readline().split()[0])
            except:
                continue

            f.close()
            key = ('tag_stats:%s:%s' % (t['type'], t['tag'])).encode('utf8')
            self.cache.set(key, users)
            self.recommend_dal.execute('update tag set users=%s where id=%s' % (users, t['id']))


if __name__ == '__main__':
    conf = Conf('/opt/tiger/ss_conf/ss/common.conf')
    user_tag_util = UserTagUtil(conf)
    #stats = user_tag_util.init_tag_user_count()
    
    stats = user_tag_util.init_tag_data('gt512', True)

    #tags = user_tag_util.get_group_user_tags(2845941831)
    #for t in tags:
    #    print t['type'], t['tag'], t['users']

    #tids = [t['id'] for t in tags]
    #for uid_type, uid, extra in user_tag_util.get_users_by_tag(tids):
    #    print '%s:%s\t%s' % (uid_type, uid, json.dumps(extra))

    #stats = user_tag_util.user_cluster_128_user_gen.init_tag_data()
    #for s, v in stats.iteritems():
    #    print s, v

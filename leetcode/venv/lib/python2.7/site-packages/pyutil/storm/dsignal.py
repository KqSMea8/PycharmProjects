import logging, os, sys, time, json, socket
import pyutil.zkclient.zkclient as zkclient
from pyutil.zkclient.zkclient import ZKClient, zookeeper, watchmethod
from pyutil.program.conf import Conf
from pyutil.program.log import logging_config
from pyutil.program.conf import Conf


class DSignal(object):
    def __init__(self, conf, handler=None, timeout=10000):
        self.conf = conf
        self.zk_conf = Conf("/opt/tiger/ss_conf/storm/dsignal.conf")
        self.root = self.zk_conf.get("zk_root_dsignal")
        self.handler = handler 
        self.timeout = timeout
        self.topology_id = self.conf.get("topology.name")
        
        log_stream = open(self.conf.get("log_file","/dev/null"),"w+")
        zookeeper.set_log_stream(log_stream)
        zkclient.VERBOSE = False
        self.zk = ZKClient(self.zk_conf.get("zk_hosts"), timeout = self.timeout)

        self._create(self.root)
        self.info_node_path = ""
        
    
    def _create(self, path, data="", flags=0, acl=[zkclient.ZOO_OPEN_ACL_UNSAFE]):
        created = False
        result = ""
        while not created:
            try:
                result = self.zk.create(path, data, flags, acl)
                created = True
            except zookeeper.NodeExistsException as e:
                # No worries
                created = True
            except zookeeper.ConnectionLossException:
                continue
            except:
                raise
        return result
 
    def _signal_callback(self, handle, typ, state, path):
        try:
            if typ != 3 and state != 3:
                logging.info("path : %s, type : %s, state : %s can't support to signal callback." %
                      (path, str(typ), str(state)))
                return
           
            signal_info = self.zk.get(path)
            signal_info = json.loads(signal_info[0])
            logging.info("handle %d got watch for %s in watcher, type:%s, state:%s, signal_info:%s" %
                      (handle, path, str(typ), str(state), str(signal_info)))
            ts = time.time() 
            data = self.zk.get(self.info_node_path)
            info = json.loads(data[0])
            info.update({"state":"running", "last_timestamp":int(time.time())})
            self.zk.set(self.info_node_path, data=json.dumps(info))
            if self.handler:
                try:
                    logging.info("pid[%d]:start to handle on_signal callback..."%(os.getpid()))
                    self.handler.on_signal(signal_info)
                    logging.info("pid[%d]:handle on_signal callback end"%(os.getpid()))
                except Exception as e:
                    logging.exception(e)
                    return
            data = self.zk.get(self.info_node_path)
            info = json.loads(data[0])
            info.update({"state":"done", "elapsed_time":("%.2f"%(time.time() - ts)), "counter":(info["counter"]+1)})
            self.zk.set(self.info_node_path, data=json.dumps(info))
            self.zk.get(self.signal_path,self._signal_callback)
        except Exception as e:
            logging.exception(e)

    def register(self, component_name):
        try:
            self.topology_path = "%s/%s"%(self.root, self.topology_id)
            self._create(self.topology_path) 
            self.component_path = "%s/%s"%(self.topology_path, component_name)
            logging.info("register, component_name:%s"%(component_name))
            logging.info("register, component_path:%s"%(self.component_path))
            self._create(self.component_path)
            self.signal_path = "%s/signal"%(self.topology_path)
            self._create(self.signal_path, data="", flags=zookeeper.EPHEMERAL)
            
            self.component_info_path = "%s/info"%(self.component_path)
            info = {}
            info["counter"] = 0
            info["host"] = socket.gethostname()
            self.info_node_path = self._create(self.component_info_path, data=json.dumps(info), flags=zookeeper.EPHEMERAL | zookeeper.SEQUENCE)
            self.zk.get(self.signal_path,self._signal_callback)

        except Exception as e:
            logging.exception(e)

def main():
    logging_config(log_file='./zookeeper-handler.log')
    conf = {"zk_hosts":"10.4.16.44:2181, 10.4.16.45:2181, 10.4.16.46:2181, 10.4.16.47:2181, 10.4.16.152:2181","storm.id":"UserProfileTopology_impr-432-1407217146","zk_root_dsignal":"/storm2/dsignal"}
    ds = DSignal(conf)
    ds.register()
    print __file__.split('.')[0]
    time.sleep(10)
    print "end----"

if __name__ == "__main__":
    main()



import logging, time, os, sys, yaml, ujson
import zookeeper
import pyutil.zkclient.zkclient as zkclient
from pyutil.zkclient.zkclient import ZKClient
from pyutil.program.log import logging_config
from optparse import OptionParser


class DSignalClient(object):
    def __init__(self, conf, timeout=10000):
        self.conf = conf
        self.root = self.conf.get("zk_root_dsignal")
        self.topology_id = ""
        self.timeout = timeout
        
        log_stream = open(self.conf.get("log_file","/dev/null"),"w+")
        zookeeper.set_log_stream(log_stream)
        zkclient.VERBOSE = False
        self.zk = ZKClient(self.conf.get("zk_hosts"), timeout = self.timeout)
        
        self.counter_map = {}

    def _get_children_watcher(self, handle, typ, state, path):
        info, skip = self.zk.get(path)
        info_dict = ujson.loads(info)
        if info_dict.get("state", "running") == "running":
            self.zk.get(path, watcher=self._get_children_watcher)
            return
        path = "/".join(path.split("/")[:-1])
        if path in self.counter_map:
            self.counter_map[path][1] += 1
            sys.stdout.write("%s : instance_num : %d, already stop : %d\n"%(path, self.counter_map[path][0], self.counter_map[path][1]))

    def _check_zk_path(self, topology_id):
        signal_path = "%s/%s/signal"%(self.root, topology_id)
        dir_list = self.zk.get_children("%s/%s"%(self.root, topology_id))
   
        signal_node = False
        for node in dir_list:
            abs_path = "%s/%s/%s"%(self.root, topology_id, node)
            if node == "signal":
                signal_node = True
                continue
            child_list = self.zk.get_children(abs_path)
            self.counter_map[abs_path] = [len(child_list), 0]
            for child in child_list:
                self.zk.get("%s/%s"%(abs_path, child), watcher=self._get_children_watcher)
        if not signal_node:
            return False
        return True


    def reload(self, topology_id, timeout=10):
        if not self._check_zk_path(topology_id):
            print "check zk path failed!"
            return
        d = {}
        d["cmd"] = "reload"
        d["time"] = time.time()
        self.zk.set("%s/%s/signal"%(self.root,topology_id),ujson.dumps(d))
        ts = time.time()
        while len(self.counter_map) != 0:
            for path in self.counter_map.keys():
                if self.counter_map[path][0] == self.counter_map[path][1]:
                    print "%s : reload success!"%(path)
                    del self.counter_map[path]
            if time.time() - ts > timeout:
                for path in self.counter_map.keys():
                    print "%s : reload timeout!"%(path)
                break
            time.sleep(1)
            

    def stop(self, topology_id, timeout=700):
        if not self._check_zk_path(topology_id):
            print "check zk path failed!"
            return
        d = {}
        d["cmd"] = "stop"
        d["time"] = time.time()
        self.zk.set("%s/%s/signal"%(self.root,topology_id),ujson.dumps(d))
        ts = time.time()
        while len(self.counter_map) != 0:
            for path in self.counter_map.keys():
                if self.counter_map[path][0] == self.counter_map[path][1]:
                    print "%s : stop gracefull success!"%(path)
                    del self.counter_map[path]
            if time.time() - ts > timeout:
                for path in self.counter_map.keys():
                    print "%s : stop graceful timeout!"%(path)
                break
            time.sleep(1)
def main():
    usage = '''%s options
        options:
            -y | --yaml <config_file>    conf file name'''% sys.argv[0]
    optionParser = OptionParser(usage)
    optionParser.add_option('-y', '--yaml', default="",action='store', dest='yaml', help='config file name')

    (options, args) = optionParser.parse_args(sys.argv[1:])
    if not options.yaml:
        options.yaml = "topology_test.yaml"
    with open(options.yaml, "r") as yaml_stream:
        conf = yaml.load(yaml_stream)
    #print conf
    dsignal_client = DSignalClient(conf.get("common_args"))
    dsignal_client.reload("UserProfileTopology_impr-548-1407749948")
    #print dsignal_client._check_zk_path("UserProfileTopology_impr-548-1407749948")

if __name__ == "__main__":
    main()

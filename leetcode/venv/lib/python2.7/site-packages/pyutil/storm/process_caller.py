import subprocess, ujson, time, logging

class ProcessCaller(object):
    def __init__(self, conf, desc=""):
        self.conf = conf
        self.desc = desc
        self.process_cmd = "python process_callee.py %s %s"%(self.desc, ujson.dumps(self.conf))
        self.child = subprocess.Popen(self.process_cmd,
                stdin=subprocess.PIPE,stdout=subprocess.PIPE,shell=True)
        logging.info("start process_callee, desc:%s, pid=%d"%(self.desc, self.child.pid))

    def exec_task(self, task):
        self.child.stdin.write(task)
        self.child.stdin.flush()
        output = self.child.stdout.readline()
        return ujson.loads(output)

    def stop(self):
        logging.info("stop process_callee, desc:%s, pid=%d"%(self.desc, self.child.pid))
        self.child.kill()
        self.child.wait()

    def restart(self):
        self.stop()
        self.child = subprocess.Popen(self.process_cmd,
                stdin=subprocess.PIPE,stdout=subprocess.PIPE,shell=True)
        logging.info("restart process_callee, desc:%s, pid=%d"%(self.desc, self.child.pid))

def main():
    ut_uid = '12:1145653972'
    gids = [3362636919, 3359848436, 3355109970, 3395240353, 3395042055]
    actions = [[140056029, (3362636919, 1, 1400560292, '__feed__'), (3362636919, 1, 140056029, '__feed__'),(3362636919, 1, 1400560222, '__feed__')], 
               [1400560273,(3359848436, 1, 1400560273, '__feed__')], 
               [1400560111, (3355109970, 1, 1400560111, '__feed__')]]
    imprs = []
    d={}
    d["ut_uid"] = ut_uid
    d["gids"] = gids
    d["acts"] = actions
    d["impr_acts"] = imprs
    #sys.stdout.write("".join([ujson.dumps(d),"\n"]))

    conf = '{"a":1}'
    p = ProcessCaller(conf, desc="kafka_spout")
    print p.exec_task("".join([ujson.dumps(d),"\n"]))
    p.restart()
    time.sleep(100)

if __name__ == "__main__":
    main()

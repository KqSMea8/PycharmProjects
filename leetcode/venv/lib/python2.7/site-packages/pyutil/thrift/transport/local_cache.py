import os, socket, sys, time, errno, random
from pyutil.consul.bridge import translate_one
from pyutil.consul.bridge import translate
import threading, logging

data = {}
version = {}
rlock = threading.RLock()

def get_version(service):
    global data, version, rlock
    with rlock:
        try:
            if not _t.isAlive():
                _t.start()
        except Exception as e:
            logging.error(str(e))
        if service in version:
            return version[service]
        version[service] = 0
        data[service] = []
        server_list = _fetch_instances(service)
        if len(server_list) != 0:
            data[service] = server_list
            version[service] += 1
        return version[service]

def _fetch_instances(service):
    try:
        server_list = translate_one(service)
        if not isinstance(server_list[0], tuple):
            return []
        else:
            return sorted(server_list, key=lambda x: (x[0], x[1]))
    except Exception, e:
        logging.info(e)
        return []

def get_server_list(service):
    global data, version, rlock
    with rlock:
        try:
            if not _t.isAlive():
                _t.start()
        except Exception as e:
            logging.error(str(e))
        if service in version:
            return data[service]
        version[service] = 0
        data[service] = []
        server_list = _fetch_instances(service)
        if len(server_list) != 0:
            data[service] = server_list
            version[service] += 1
        return data[service]

def _update_server_list():
    global data, version, rlock
    while True:
        try:
            old_services = {}
            rlock.acquire(True)
            old_services = data
            rlock.release()
            for service in old_services.keys():
                server_list = _fetch_instances(service)
                if server_list != old_services[service] and len(server_list) >= len(old_services[service]) / 2:
                    with rlock:
                        data[service] = server_list
                        version[service] += 1
        except Exception, e:
            logging.exception(e)
            time.sleep(10)
        time.sleep(1)
        
_t = threading.Thread(target=_update_server_list, name="UpdateServerList")
_t.setDaemon(True)
#_t.start()

if __name__ == '__main__':
    print get_version("data.profileservice.master")
    time.sleep(5)
    print get_server_list("data.profileservice.master")
    time.sleep(5)
    print get_server_list("mengweichao_profile_server2")
    time.sleep(5)

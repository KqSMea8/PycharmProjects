#!/usr/bin/python
# -*- coding:utf8 -*-

import time
import json
import base
import urllib2
import random

from pyutil.consul import defaults
from pyutil.consul.discovery import ServiceDiscovery
from pyutil.net.get_local_ip import get_local_ip
from pyutil.thrift.thrift_client import ThriftRetryClient
from content.diting.DitingService import Client
from content.diting.ttypes import CollectActionRequest, DitingAction
from pyutil.consul.bridge import translate_one
from raven import Client


EXCEPTION=-1
EMPLOYEE=1


def _collect_action(req):
    servers = []
    client = ThriftRetryClient(Client, servers, consul_name="content.arch.diting")
    local_ip = get_local_ip()
    caller= base.ttypes.Base(LogID="0", Caller="TimelineApi", Addr=local_ip, Client=__file__)
    req = DitingAction(**req)
    req = CollectActionRequest([req], caller)
    ret = EXCEPTION
    try:
        res = client.collect_action(req)
        ret = res.BaseResp.StatusCode
    except:
        pass
    return ret


def _write_to_meta_service(obj_type, obj_name, op_user, op_type, op_time, detail_fields={}, keyFields={}, change_fields={}):
    if op_type is not None:
        headers = {"Content-type": "application/json"}
        local_ip = get_local_ip()
        trace_fields = {"address": local_ip, "module": "TimelineApi"}
        reqparam = {
            "opType": op_type,
            "opTypeName": '',
            "opUser": op_user,
            "psm": obj_name,
            "objType": obj_type,
            "objTypeName": obj_name,
            "opTime": str(op_time),
            "detailFields": json.dumps(detail_fields, encoding='UTF-8', ensure_ascii=False),
            "keyFields": json.dumps(keyFields, encoding='UTF-8', ensure_ascii=False),
            "changeFields": json.dumps(change_fields, encoding='UTF-8', ensure_ascii=False),
            "traceFields": json.dumps(trace_fields, encoding='UTF-8', ensure_ascii=False)
        }
        ret = EXCEPTION
        try:
            services = translate_one("data.inf.byte_meta_service")
            host_port = random.choice(services)
            url = "http://%s:%s/oplog" % (host_port[0], host_port[1])
            req = urllib2.Request(url, json.dumps(reqparam), headers)
            response = urllib2.urlopen(req)
            res_result = response.read()
            if json.loads(res_result)["status"] == "success":
                ret = 1
            else:
                raise RuntimeError("sync timeline data fail")
            response.close()
        except:
            _get_client().captureException()
        return ret


def _get_client():
    return Client('http://18efd552f0dd405497c2cf275a91890f:1c4b628e68594138a635cc09f8bc0e86@ad.sentry.m.byted.org/326')


def _emit(obj_type, obj_name, op_user, op_type, op_status, platform,
          platform_id, product="", op_params={}, labels={}, change_fields={}, is_wirte_to_meta=True):
    if not isinstance(op_params, dict):
        raise TypeError("Type of op_params is not dict.")
    if not isinstance(labels, dict):
        raise TypeError("Type of labels is not dict.")
    if not isinstance(change_fields, dict):
        raise TypeError("Type of change_fileds is not dict.")
    if not isinstance(product, str):
        raise TypeError("Type of change_fileds is not str.")

    #timestamp in ms
    op_time = int(time.time() * 1000)
    req = {}
    req["obj_type"] = obj_type
    req["obj_id"] = obj_name
    req["user_type"] = EMPLOYEE
    req["user_id"] = op_user
    req["action_type"] = op_type
    req["action_time"] = op_time
    if product:
        req["product"] = product
    req["key_fields"] = {"platform": platform}
    req["change_fields"] = change_fields
    for k, v in labels.items():
        req["key_fields"][k] = v
    op_params["platform_id"] = platform_id
    op_params["status"] = op_status
    req["detail_fields"] = json.dumps(op_params)

    #wirte to MetaService syconously
    if is_wirte_to_meta:
        _write_to_meta_service(obj_type, obj_name, op_user, op_type, op_time, op_params,
                               req["key_fields"], req["change_fields"])

    return _collect_action(req)


def emit_event(psm, user, op_type, status, platform, platform_id=None,
               product="", params={}, labels={}):
    """
    Collect event that does not need change any configure.
    eg: restart, release client
    :param user: op user
    :param op_type: upgrade_service,
                    restart_service,
                    modify_ab_test,
                    modify_runtime_config,
                    release_client
    :param platform: op platform url or opreation cmd
    :param platform_id: task id of op platform
    :param psm: p.s.m of object to be opreated
    :param status: started, success, fail
    :param params: description of the operation
    :param labels: repo name, product line, eg: recommend, metrics or ss_lib
    :return:
    """
    return _emit("service", psm, user, op_type, status, platform, platform_id,
                 product, params, labels)


def emit_change(psm, user, op_type, status, platform, platform_id=None,
                product="", params={}, labels={}, change_fields={}):
    """
    Collect event that need change configure.
    eg: abtest, pushonline
    :param user: op user
    :param op_type: upgrade_service,
                    restart_service,
                    modify_ab_test,
                    modify_runtime_config,
                    release_client
    :param platform: op platform url or opreation cmd
    :param platform_id: task id of op platform
    :param psm: p.s.m of object to be opreated
    :param status: started, success, fail
    :param params: description of the operation
    :param labels: repo name, product line, eg: recommend, metrics or ss_lib
    :param change_fileds: change fileds, {"key_from": "xxx", "key_to": "yyy"}
    :return:
    """
    return _emit("service", psm, user, op_type, status, platform, platform_id,
                 product, params, labels, change_fields)


if __name__ == "__main__":
    # _emit("service", "test.liuhangzhou", "liuhangzhou", "upgrade_service", "success", "测试", "test")
    _write_to_meta_service("service", "test.liuhangzhou", "liuhangzhou", "upgrade_service", int(time.time() * 1000))

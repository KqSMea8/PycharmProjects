# -*- coding: utf-8 -*-
"""
@author wangfenjin
@desc   根据 namespace 获取 load 配置
"""

import os, errno, json, logging, urllib2, time, random

from pyutil.net.get_local_ip import get_local_ip

import exceptions as exceptions
import client as client

def get_load_settings(psm):
    """ get_load_settings will use the psm to get cluster, env, and weight from tonfig
    """
    result = {}
    if len(psm) == 0:
        return result

    try:
        namespace = psm + '/load'

        # get tonfig
        conf = None
        try:
            conf = client.AppConfig(namespace=namespace, once=True).get_all()
            _save_to_file(namespace, conf)
        except Exception as ex:
            if isinstance(ex, exceptions.KeyNotFoundError):
                # it means this namespace doesn't have any conf
                _delete_file(namespace)
                return result
            # get from file is our last chance
            conf = _get_from_file(namespace)

        if conf is None or len(conf) == 0:
            return result

        # find the conf key for this ip
        local_ip = get_local_ip()
        local_ip_tags = _get_local_ip_amstags(local_ip)
        conf_type = "amstag"
        if "type" in conf:
            conf_type = conf["type"]
        key = None

        if conf_type == "amstag":
            for tag in local_ip_tags:
                if tag in conf:
                    key = tag
                    break
        else:   # conf type is ip
            if local_ip in conf:
                key = local_ip
            else:
                import re
                for k in conf:
                    if not re.compile(k).match(local_ip):
                        continue
                    key = k
                    break

        if key is None:
            return result

        # key should be not None and in conf
        # assemble result
        result["ip"] = local_ip
        result["namespace"] = namespace
        result["psm"] = psm
        if conf_type == "amstag":
            result["tag"] = key
        local_conf = json.loads(conf[key])
        if "cluster" in local_conf:
            result["cluster"] = local_conf["cluster"]
        if "env" in local_conf:
            result["env"] = local_conf["env"]
        if "weight" in local_conf:
            result["weight"] = local_conf["weight"]
    except Exception as ex:
        logging.warn("%s", ex)

    return result


def _save_to_file(namespace, conf):
    try:
        filename = "/opt/tiger/tonfig/ns/" + namespace.replace("/", "_") + ".json"
        # create dir if necessary
        if not os.path.exists(os.path.dirname(filename)):
            try:
                os.makedirs(os.path.dirname(filename))
            except OSError as exc: # Guard against race condition
                if exc.errno != errno.EEXIST:
                    raise
        # use a tmp file for write
        filename_tmp = filename + str(time.time()) + str(random.uniform(10000,100000))
        with open(filename_tmp, "w") as f:
            f.write(json.dumps(conf))

        os.rename(filename_tmp, filename)
    except Exception as ex:
        logging.warn("save conf to file error %s", ex)
        # we don't care if any exception

def _delete_file(namespace):
    try:
        filename = "/opt/tiger/tonfig/ns/" + namespace.replace("/", "_") + ".json"
        os.remove(filename)
    except:
        # we don't care if any exception
        pass

def _get_from_file(namespace):
    filename = "/opt/tiger/tonfig/ns/" + namespace.replace("/", "_") + ".json"
    with open(filename) as data_file:
        return json.load(data_file)

def _get_local_ip_amstags(ip):
    data = urllib2.urlopen("https://ams.byted.org/api.php?token=e97f9912fe49a03f0cf639a009fc96eb&method=host.tag.get&ip=%s" % (ip)).read()
    return json.loads(data)["response"]["tags"]

if __name__ == "__main__":
    def test_save_to_file():
        _save_to_file("toutiao.frontier.frontier/load", {"test":"test"})

    test_save_to_file()

    def test_get_load_setting():
        print get_load_settings("toutiao.im.gateway")

    test_get_load_setting()

#!/usr/bin/python
#coding:utf-8

import logging
import os
import pyutil.databus.collector as collector
import socket
import time


class TssLogger(logging.Handler):
    """Toutiao Streaming Service Logger handler.

    TTS is a tool that collects and processes
    the user's distributed logs that run on yarn in real time.
    Users only need to instantiate this class,
    call the following methods, then they can use TSS for log analysis.

    Attributes:
        __ip: The IP address of machine on which the process is running. (Automatically generated.)
        __pid: The pid of the running process. (Automatically generated.)
        __cid: The container(from yarn) id of the process. (Automatically generated.)
        __hadoop_user: The user who submit this application to yarn. (Automatically generated.)
        __flink_yarn_job: The flink job name in yarn. (Automatically generated.)
        __flink_yarn_queue: The queue which the flink job running on. (Automatically generated.)
        __tss_channel: The channel is used for different region, 'yarn_container_level_log' is used for cn;
                       "yarn_container_level_log_va" is used for va.
    """

    def __init__(self, tss_channel, lev=logging.INFO):
        logging.Handler.__init__(self, level=lev)
        self.__ip = self.__get_host_ip()
        self.__pid = os.getpid()
        self.__cid = self.__get_value_from_env('CONTAINER_ID')
        self.__hadoop_user = self.__get_value_from_env('HADOOP_USER_NAME')
        self.__flink_yarn_job = self.__get_value_from_env('_FLINK_YARN_JOB')
        self.__flink_yarn_queue = self.__get_value_from_env('_FLINK_YARN_QUEUE')
        self.__tss_channel = tss_channel

    def __get_value_from_env(self, key):
        if os.environ.has_key(key):
            return os.environ.get(key)
        return 'unknown'

    def __get_host_ip(self):
        """Get the IP address of the current running process.

        Users only need to provide the contents of the message when using TSSLogger,
        the IP address can be obtained automatically by this method.

        Args:
            None

        Returns:
            The IP address of the machine on which the current process is running.
            For example:

            10.10.110.11

            If the address cannot be obtained, 0.0.0.0 will be returned.
        """
        ip = '0.0.0.0'
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(('8.8.8.8', 80))
            ip = s.getsockname()[0]
        except Exception, e:
            pass
        finally:
            s.close()
        return ip

    def emit(self, record):
        """Logs new records to databus."""
        try:
            name = record.pathname.split("/")[-1].replace(' ', '')
            t = time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime(time.time()))
            msg = str(record.getMessage())
            outmsg = 'pyv3 %s %s %s %s %s %s %s %s %s: %s' % \
                 (self.__ip, self.__hadoop_user, self.__pid, self.__cid, t, self.__flink_yarn_job,
                  self.__flink_yarn_queue, record.levelname, name, msg)
            collector.collect(self.__tss_channel, outmsg, codec=0, raise_on_fail=True)
        except Exception, e:
            pass


if __name__ == "__main__":
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    tss = TssLogger("yarn_container_level_log", logging.INFO)
    logger.addHandler(tss)
    logging.debug("debug")
    logging.info("i am testing info")
    logging.warning("warning..")
    logging.exception(Exception("except"))
    logging.critical("crit")
    logging.error("%s", Exception("except"))

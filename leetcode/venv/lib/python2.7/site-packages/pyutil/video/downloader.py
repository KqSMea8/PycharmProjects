#!/usr/bin/env python
#coding=utf8
import os, sys, logging, threading
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from pyutil.thrift.transport import SocketPool
from pyutil.program.icrawler_util import str_dict
from songshulin.icrawler.downloader import Download
from songshulin.icrawler.downloader.ttypes import Req

k_thrift_timeout = 360 * 1000

class ThriftDownloader(threading.local):

    def __init__(self, host, port, timeout=None, conn_timeout=None):
        '''
        timeout - seconds. 读写超时, None表示不超时
        conn_timeout - seconds. 连接超时, None表示使用timeout
        '''
        socket = SocketPool.TSocketPool(host, port, timeout=timeout, conn_timeout=conn_timeout)
        transport = TTransport.TBufferedTransport(socket)
        protocol = TBinaryProtocol.TBinaryProtocol(transport)
        self.client = Download.Client(protocol)
        self.client.transport = transport

    def download(self, url='', info={}):
        req = Req(url=url, info=info)
        str_dict(req)
        try:
            self.client.transport.open()
            rsp = self.client.download(req)
            return rsp.status, rsp.body, rsp.message
        finally:
            self.client.transport.close()

#!/usr/bin/env python
#coding=utf8
import sys, os, signal, datetime, Queue, random, collections, logging, time
sys.path.insert(0, '../../../../')
sys.path.insert(0, '../../../../pyutil')
os.environ['DJANGO_SETTINGS_MODULE'] = 'ss_datacenter.djangosite.settings'
from pyutil.program.icrawler_util import config_logging
from pyutil.program.pprint import pprint, pformat
from pyutil.weibo.api.sina import APIClient as SinaClient
from pyutil.weibo.api.sina import APIError
from pyutil.weibo.api.tencent import APIClient as TencentClient
import pyutil.weibo.api.sina as sina
import pyutil.weibo.api.tencent as tencent
from ss_datacenter.djangosite.article.models import ArticleItem, ArticleGroup, ArticleTag, ArticleItemMessageRef, ArticleLocation
from ss_datacenter.djangosite.message.models import Message, Comment, User, UserExtra
from ss_datacenter.djangosite.crawler.models import AccountAccessToken

class SinaWeiboClient(object):

    def __init__(self):
        self.token_queue = Queue.Queue()
        tokens = list(AccountAccessToken.objects.filter(status=1, account__platform_id=1, version=2, id=1413))
        random.shuffle(tokens)
        for t in tokens:
            self.token_queue.put(t)

    def get_client(self):
        client = SinaClient()
        #access_token, expires_in = '2.00VSvgAD6OrxYD0f8f01e3a3KMf1eE', '1350414000'
        t = self.token_queue.get()
        token, expires = '2.00dztY3D6OrxYDa1606c32cbA33YyB', 1352248442
        #token, expires = t.access_token, t.expires
        client.set_access_token(token, expires)
        self.token_queue.put(t)
        #print t.access_token, t.expires
        return client

    def get_user_info(self, uid=None, name=''):
        while True:
            try:
                if uid:
                    res = self.get_client().get.users__show(uid=uid)
                elif name:
                    res = self.get_client().get.users__show(screen_name=name)
                else:
                    res = {}
                return res
            except APIError:
                time.sleep(0.3)
                return

    def get_comments(self, mid=None, name='', page=0):
        while True:
            try:
                res = self.get_client().get.comments__show(id=mid, count=200, page=page)
                pprint(res)
                print type(res.comments)
                return res.comments
            except APIError as e:
                pprint(e)
                time.sleep(0.3)
                return

    def get_reposts(self, mid=None, name=''):
        while True:
            try:
                res = self.get_client().get.statuses__repost_timeline(id=mid, count=200)
                #pprint(res)
                if not res:
                    return ''
                return res.reposts
            except APIError:
                time.sleep(0.3)
                return

    def get_recommentd_users(self, category):
        while True:
            try:
                res = self.get_client().get.suggestions__users__hot(category=category)
                #pprint(res)
                if not res:
                    return ''
                return res
            except APIError:
                time.sleep(0.3)
                return


class TencentWeiboClient(object):

    def __init__(self):
        self.token_queue = Queue.Queue()
        tokens = list(AccountAccessToken.objects.filter(status=1, account__platform_id=2, version=1))
        random.shuffle(tokens)
        for t in tokens:
            self.token_queue.put(t)

    def get_client(self):
        #access_token, expires_in = '2.00VSvgAD6OrxYD0f8f01e3a3KMf1eE', '1350414000'
        t = self.token_queue.get()
        client = TencentClient(t.app_key, t.app_secret)
        client.set_access_token(t.access_token, t.access_token_secret)
        self.token_queue.put(t)
        return client

    def get_user_info(self, name=''):
        if name:
            res = self.get_client().get.user__other_info(format='json', name=name)
        else:
            return {}
        if not res or not res.data:
            return {}
        return res.data

    def get_re_list(self, flag, mid=None, name='', start_time=0, start_id=0):
        page_type = 1 if start_id else 0
        res = self.get_client().get.t__re_list(format='json', pageflag=page_type, pagetime=start_time, reqnum=100, flag=flag, rootid=mid, twitterid=start_id)
        if not res or not res.data:
            return []
        return res.data.info

    def get_comments(self, **args):
        return self.get_re_list(flag=1, **args)

    def get_reposts(self, **args):
        return self.get_re_list(flag=0, **args)

    def get_recommend_users(self, classid=101, subclassid=None):
        print classid, subclassid
        res = self.get_client().get.trends__famouslist(classid=classid, subclassid=subclassid)
        return res

g_sina_client = SinaWeiboClient()
g_tencent_client = TencentWeiboClient()

def get_sina_comments(mid):
    start_id = 0
    c_ids = set()
    i = 0
    page = 1
    while True:
        comments = g_sina_client.get_comments(mid=mid, page=page)
        page += 1
        print len(comments)
        if not comments:
            break
        new_num = 0
        for c in comments:
            #pprint((i, c.created_at, c.text))
            print c.id
            i += 1
            if c.id not in c_ids:
                c_ids.add(c.id)
                new_num += 1
        #pprint(comments)
        #for c in comments:
        #    print c.id
        last_c = comments[-1]
        print last_c.id#, last_c.timestamp
        print 'total', len(comments), 'new', new_num
        start_id = last_c.id - 1
    print 'total', len(c_ids)

def get_tencent_comments(mid):
    start_time, start_id = 0, 0
    c_ids = set()
    while True:
        comments = g_tencent_client.get_comments(mid=mid, start_time=start_time, start_id=start_id)
        if not comments:
            break
        new_num = 0
        for c in comments:
            #pprint(c.origtext)
            if c.id not in c_ids:
                c_ids.add(c.id)
                new_num += 1
        #pprint(comments)
        #for c in comments:
        #    print c.id
        last_c = comments[-1]
        print last_c.id, last_c.timestamp
        print 'total', len(comments), 'new', new_num
        start_id, start_time = last_c.id, last_c.timestamp
    print 'total', len(c_ids)

def get_tencent_reposts(mid):
    start_time, start_id = 0, 0
    c_ids = set()
    while True:
        reposts = g_tencent_client.get_reposts(mid=mid, start_time=start_time, start_id=start_id)
        if not reposts:
            break
        new_num = 0
        for c in reposts:
            #pprint(c.origtext)
            if c.id not in c_ids:
                c_ids.add(c.id)
                new_num += 1
        #pprint(reposts)
        #for c in reposts:
        #    print c.id
        last_c = reposts[-1]
        print last_c.id, last_c.timestamp
        print 'total', len(reposts), 'new', new_num
        start_id, start_time = last_c.id, last_c.timestamp
    print 'total', len(c_ids)

def get_sina_rec_users(category):
    res = g_sina_client.get_recommentd_users(category)
    #print res
    mids = set()
    #print category
    if not res:
        #print 'None'
        return

    print len(res)

    for r in res:
        if r.id not in mids:
            mids.add(r.id)
            print r.id 
    #print 'len', len(mids)

def get_tencent_rec_users(classid=101, subclassid=None):
    res = g_tencent_client.get_recommend_users(classid=classid, subclassid=subclassid)
    #pprint(res)
    res = res['data']['info']
    mids = set()
    for r in res:
        if r.account not in mids:
            mids.add(r.account)
            print r.account
    #print len(mids)
    return len(mids)




def main():
    import conf
    signal.signal(signal.SIGTERM, signal.SIG_DFL)
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    config_logging(conf)
    m_id = 129936010650624
    m_id = 158944058736851
    m_id = 155691101758330
    #get_tencent_comments(m_id)
    #get_tencent_reposts(m_id)
    m_id = 3503874985772826
    m_id = 3503877653317146
    m_id = 3505336323468586
    #get_sina_comments(m_id)
    #get_sina_reposts(m_id)
    """
    category_list = ['default', 'ent', 'hk_famous', 'model', 'cooking', 'sports', 'finance', 'tech', 'singer', 'writer', 'moderator', 'medium', 'stockplayer']
    category_list = ['DEFAULT', 'ENT', 'MUSIC', 'FASHION', 'LITERATURE', 'BUSINESS', 'SPORT', 'SPORTS', 'HEALTH', 'AUTO', 'HOUSE', 'TRIP', 'STOCK', 'FOOD', 'FATE', 'ART', 'TECH', 'CARTOON', 'GAMES', 'MEDIUM', 'MARKETER']
    count = 0
    for category in category_list:
        get_sina_rec_users(category)
    """
    ids = [101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 116, 267, 268, 288, 294, 304, 363, 945, 949, 950, 951]
    sub_ids_294 = [953, 955, 956, 957, 958]
    sub_ids_268 = [959, 960, 961, 962, 963, 964]
    count = 0
    for id in ids:
        if id == 268:
            for sub_id in sub_ids_268:
                count += get_tencent_rec_users(classid=id, subclassid='subclass_'+str(sub_id))
        elif id == 294:
            for sub_id in sub_ids_294:
                count += get_tencent_rec_users(classid=id, subclassid='subclass_'+str(sub_id))
        else:
            count += get_tencent_rec_users(classid=id, subclassid=None)
    print 'total', count




if __name__ == '__main__':
    main()

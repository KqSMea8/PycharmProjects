#!/usr/bin/env python
# -*- coding: utf-8 -*-

from datetime import datetime
import cgi

__version__ = '1.0.5'
__author__ = 'Liao Xuefeng (askxuefeng@gmail.com)'

'''
Python client SDK for sina weibo API using OAuth 2.
'''

try:
    import json
except ImportError:
    import simplejson as json
import time, urllib, urllib2, logging

def urlopen(req, data=None):
    return urllib2.urlopen(req, data)

def _obj_hook(pairs):
    '''
    convert json object to python object.
    '''
    o = JsonObject()
    for k, v in pairs.iteritems():
        o[str(k)] = v
    return o

class APIError(StandardError):
    '''
    raise APIError if got failed json message.
    '''
    def __init__(self, ret, error_code, error, request):
        self.ret = ret
        self.error_code = error_code
        self.error = error
        self.request = request
        StandardError.__init__(self, error)

    def __str__(self):
        return 'APIError: ret: %s, %s: %s, request: %s' % (self.ret, self.error_code, self.error, self.request)

class JsonObject(dict):
    '''
    general json object that can bind any fields but also act as a dict.
    '''
    def __getattr__(self, attr):
        return self[attr]

    def __setattr__(self, attr, value):
        self[attr] = value

    def __getstate__(self):
        return self.copy()

    def __setstate__(self, state):
        self.update(state)

def _encode_params(**kw):
    '''
    Encode parameters.
    '''
    args = []
    for k, v in kw.iteritems():
        qv = v.encode('utf-8') if isinstance(v, unicode) else str(v)
        args.append('%s=%s' % (k, urllib.quote(qv)))
    return '&'.join(args)

def _encode_multipart(**kw):
    '''
    Build a multipart/form-data body with generated random boundary.
    '''
    boundary = '----------%s' % hex(int(time.time() * 1000))
    data = []
    for k, v in kw.iteritems():
        data.append('--%s' % boundary)
        if hasattr(v, 'read'):
            # file-like object:
            ext = ''
            filename = getattr(v, 'name', '')
            n = filename.rfind('.')
            if n != (-1):
                ext = filename[n:].lower()
            content = v.read()
            data.append('Content-Disposition: form-data; name="%s"; filename="hidden"' % k)
            data.append('Content-Length: %d' % len(content))
            data.append('Content-Type: %s\r\n' % _guess_content_type(ext))
            data.append(content)
        else:
            data.append('Content-Disposition: form-data; name="%s"\r\n' % k)
            data.append(v.encode('utf-8') if isinstance(v, unicode) else v)
    data.append('--%s--\r\n' % boundary)
    return '\r\n'.join(data), boundary

_CONTENT_TYPES = { '.png': 'image/png', '.gif': 'image/gif', '.jpg': 'image/jpeg', '.jpeg': 'image/jpeg', '.jpe': 'image/jpeg' }

def _guess_content_type(ext):
    return _CONTENT_TYPES.get(ext, 'application/octet-stream')

_HTTP_GET = 0
_HTTP_POST = 1
_HTTP_UPLOAD = 2

def _http_call(the_url, method, authorization, return_json=True, opener=None, **kw):
    '''
    send an http request and expect to return a json object if no error.
    '''
    params = None
    boundary = None
    # 对腾讯，可以删除？
    if method==_HTTP_UPLOAD:
        # fix sina upload url:
        the_url = the_url.replace('https://api.', 'https://upload.api.')
        params, boundary = _encode_multipart(**kw)
    else:
        params = _encode_params(**kw)

    http_url = '%s?%s' % (the_url, params) if method==_HTTP_GET else the_url
    http_body = None if method==_HTTP_GET else params
    req = urllib2.Request(http_url, data=http_body)
    if authorization:
        req.add_header('Authorization', 'OAuth2 %s' % authorization)
    if boundary:
        req.add_header('Content-Type', 'multipart/form-data; boundary=%s' % boundary)

    if opener:
        resp = opener.open(req)
    else:
        resp = urlopen(req)

    body = resp.read()
    if return_json:
        body = body.decode('utf-8', errors='ignore')
        r = json.loads(body, object_hook=_obj_hook)
        if r.ret == 0:
            return r
        raise APIError(getattr(r, 'ret', ''), getattr(r, 'errcode', ''), getattr(r, 'msg', ''), the_url)
    return body


def _http_get(url, authorization=None, opener=None, **kw):
    logging.info('GET %s' % url)
    return _http_call(url, _HTTP_GET, authorization, opener=opener, **kw)

def _http_post(url, authorization=None, opener=None, **kw):
    logging.info('POST %s' % url)
    return _http_call(url, _HTTP_POST, authorization, opener=opener, **kw)

def _http_upload(url, authorization=None, opener=None, **kw):
    logging.info('MULTIPART POST %s' % url)
    return _http_call(url, _HTTP_UPLOAD, authorization, opener=opener, **kw)

class HttpObject(object):

    def __init__(self, client, method):
        self.client = client
        self.method = method

    def __getattr__(self, attr):
        def wrap(**kw):
            if self.client.is_expires():
                raise APIError('37', '1', 'expired_token', attr)
            kw['openid'] = self.client.openid
            kw['oauth_version'] = self.client.version
            kw['oauth_consumer_key'] = self.client.client_id
            kw['access_token'] = self.client.access_token
            if 'format' not in kw:
                kw['format'] = 'json'
            return _http_call('%s%s' % (self.client.api_url, attr.replace('__', '/')), self.method, self.client.access_token, return_json=True, opener=self.client.opener, **kw)
        return wrap

class APIClient(object):
    '''
    API client using synchronized invocation.
    '''
    def __init__(self, app_key, app_secret=None, redirect_uri=None, response_type='code', domain='open.t.qq.com', version='2.a', opener=None):
        self.client_id = app_key
        self.client_secret = app_secret
        self.redirect_uri = redirect_uri
        self.response_type = response_type
        self.auth_url = 'https://%s/cgi-bin/oauth2/' % domain
        self.api_url = 'https://%s/api/' % domain
        self.access_token = None
        self.openid = None
        self.expires = 0.0
        self.version = version
        self.opener = opener
        self.get = HttpObject(self, _HTTP_GET)
        self.post = HttpObject(self, _HTTP_POST)
        self.upload = HttpObject(self, _HTTP_UPLOAD)

    def _parse_token_rsp(self, token_str):
        ''' 解析请求access token结果，返回JsonObject
            输入Example:
                access_token=2008f9b6165c1aa4318dd1d11261449c&expires_in=8035200&refresh_token=8038a6663f759be45a9b05c5325ae5d5&openid=2f01b351b31f3489c0a6186f8fa56cd4&name=qianchangyishou&nick=浅唱一首歌&state=
        '''
        return JsonObject({k: (int(v) if k == 'expires_in' else v) for k, v in cgi.parse_qsl(token_str)})

    def set_access_token(self, access_token, openid, expires_in):
        self.access_token = str(access_token)
        self.openid = openid
        self.expires = float(expires_in)

    def get_authorize_url(self, redirect_uri=None, display='default', state=''):
        '''
        return the authroize url that should be redirect.
        '''
        redirect = redirect_uri if redirect_uri else self.redirect_uri
        if not redirect:
            raise APIError('21305', 'Parameter absent: redirect_uri', 'OAuth2 request')
        return '%s%s?%s' % (self.auth_url, 'authorize',
                _encode_params(client_id=self.client_id,
                        response_type='code',
                        state=state,
                        display=display,
                        redirect_uri=redirect))

    def request_access_token(self, code, redirect_uri=None):
        '''
        return access token as object: {"access_token":"your-access-token","expires_in":12345678,"uid":1234}, expires_in is standard unix-epoch-time
        '''
        redirect = redirect_uri if redirect_uri else self.redirect_uri
        if not redirect:
            raise APIError('21305', 'Parameter absent: redirect_uri', 'OAuth2 request')
        r = _http_post('%s%s' % (self.auth_url, 'access_token'),
                client_id=self.client_id,
                client_secret=self.client_secret,
                redirect_uri=redirect,
                code=code, grant_type='authorization_code', return_json=False)
        r = self._parse_token_rsp(r)
        current = int(time.time())
        expires = r.expires_in + current
        remind_in = r.get('remind_in', None)
        if remind_in:
            rtime = int(remind_in) + current
            if rtime < expires:
                expires = rtime
        jo = JsonObject(access_token=r.access_token, expires_in=expires, openid=r.openid, refresh_token=r.refresh_token)
        return jo

    def is_expires(self):
        return not self.access_token or time.time() > self.expires

    def me(self):
        ''' 读取用户信息，封装必要的值成JsonObject
        '''
        uinfo = self.user__info()
        data = uinfo.data
        return JsonObject(
                id=data.name,
                created_at=datetime.fromtimestamp(int(data.regtime)),
                name=data.name,
                friends_count=data.idolnum,
                openid=data.openid,
                domain=data.name, # 腾讯微博用户的domain等于name
                )

    def __getattr__(self, attr):
        return getattr(self.get, attr)



KEY_API_USER_CONNECT_QUEUE = 'api_user_connect_queue:%s' 


class APIMethod():
    def __init__(self, client):
        self._path = client._base_path
        self._client = client
        #self.path = 'https://api.weibo.com/2/' 
        pass

    def __getattr__(self, name):
        if name.startswith('_'):
            return getattr(self, name)
        self._path += '/' + name
        return self

    def __call__(self, **kwargs):
        return self._client._execute(self.path, **kwargs)


class APIClient():

    def __init__(self, conf):
        self._base_path = 'https://api.weibo.com/2'
        self._conf = conf
        self._cache = redis.StrictRedis() 
        self._platform = platform

    def __getattr__(self, name):
        if name.startswith('_'):
            return getattr(self, name)
        method = APIMethod(self)
        return getattr(method, name)
    
    def _get_access_token(self, user_connect_id=None):
        if user_connect_id:
            webdb_session = WebDBSession()
            user_connect = webdb_session.query(UserConnect).get(user_connect_id)
            return user_connect.id, user_connect.access_token
        #TODO
        return None

    def _execute(self, path, user_connect_id=None, ignore_invoke_limit=False, **kwargs):
        user_connect_id, access_token = self._get_access_token(user_connect_id)
        params = {'access_token':access_token}
        for key, value in kwargs.iteritems():
            if isinstance(value, list):
                params[key] = ','.join([str(v) for v in value])
            else:    
                params[key] = value
        fp = self._get_opener().open('%s.json?%s' % (path, urllib.urlencode(params)))
        result = json.loads(fp.read())
        return result

    def _get_opener(self):
        http_proxy = self._conf.http_proxy_host + ':' + str(self._conf.http_proxy_port)
        opener = common_opener.get_opener(
                http_proxy=http_proxy,
                timeout=30,
                use_common_headers=False)
        return opener


if __name__ == '__main__':
    c = APIClient()
    r = c.statuses.public_timeline(count=100)


# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wb', [dirname(__file__)])
        except ImportError:
            import _wb
            return _wb
        if fp is not None:
            try:
                _mod = imp.load_module('_wb', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wb = swig_import_helper()
    del swig_import_helper
else:
    import _wb
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wb.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _wb.SwigPyIterator_value(self)
    def incr(self, n=1): return _wb.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _wb.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _wb.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _wb.SwigPyIterator_equal(self, *args)
    def copy(self): return _wb.SwigPyIterator_copy(self)
    def next(self): return _wb.SwigPyIterator_next(self)
    def __next__(self): return _wb.SwigPyIterator___next__(self)
    def previous(self): return _wb.SwigPyIterator_previous(self)
    def advance(self, *args): return _wb.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _wb.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _wb.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _wb.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _wb.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _wb.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _wb.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _wb.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class TPVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _wb.TPVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _wb.TPVector___nonzero__(self)
    def __bool__(self): return _wb.TPVector___bool__(self)
    def __len__(self): return _wb.TPVector___len__(self)
    def pop(self): return _wb.TPVector_pop(self)
    def __getslice__(self, *args): return _wb.TPVector___getslice__(self, *args)
    def __setslice__(self, *args): return _wb.TPVector___setslice__(self, *args)
    def __delslice__(self, *args): return _wb.TPVector___delslice__(self, *args)
    def __delitem__(self, *args): return _wb.TPVector___delitem__(self, *args)
    def __getitem__(self, *args): return _wb.TPVector___getitem__(self, *args)
    def __setitem__(self, *args): return _wb.TPVector___setitem__(self, *args)
    def append(self, *args): return _wb.TPVector_append(self, *args)
    def empty(self): return _wb.TPVector_empty(self)
    def size(self): return _wb.TPVector_size(self)
    def clear(self): return _wb.TPVector_clear(self)
    def swap(self, *args): return _wb.TPVector_swap(self, *args)
    def get_allocator(self): return _wb.TPVector_get_allocator(self)
    def begin(self): return _wb.TPVector_begin(self)
    def end(self): return _wb.TPVector_end(self)
    def rbegin(self): return _wb.TPVector_rbegin(self)
    def rend(self): return _wb.TPVector_rend(self)
    def pop_back(self): return _wb.TPVector_pop_back(self)
    def erase(self, *args): return _wb.TPVector_erase(self, *args)
    def __init__(self, *args): 
        this = _wb.new_TPVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _wb.TPVector_push_back(self, *args)
    def front(self): return _wb.TPVector_front(self)
    def back(self): return _wb.TPVector_back(self)
    def assign(self, *args): return _wb.TPVector_assign(self, *args)
    def resize(self, *args): return _wb.TPVector_resize(self, *args)
    def insert(self, *args): return _wb.TPVector_insert(self, *args)
    def reserve(self, *args): return _wb.TPVector_reserve(self, *args)
    def capacity(self): return _wb.TPVector_capacity(self)
    __swig_destroy__ = _wb.delete_TPVector
    __del__ = lambda self : None;
TPVector_swigregister = _wb.TPVector_swigregister
TPVector_swigregister(TPVector)

class TermPos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TermPos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TermPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["begin"] = _wb.TermPos_begin_set
    __swig_getmethods__["begin"] = _wb.TermPos_begin_get
    if _newclass:begin = _swig_property(_wb.TermPos_begin_get, _wb.TermPos_begin_set)
    __swig_setmethods__["end"] = _wb.TermPos_end_set
    __swig_getmethods__["end"] = _wb.TermPos_end_get
    if _newclass:end = _swig_property(_wb.TermPos_end_get, _wb.TermPos_end_set)
    def __init__(self): 
        this = _wb.new_TermPos()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wb.delete_TermPos
    __del__ = lambda self : None;
TermPos_swigregister = _wb.TermPos_swigregister
TermPos_swigregister(TermPos)

class LoadException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadException, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _wb.LoadException_count_set
    __swig_getmethods__["count"] = _wb.LoadException_count_get
    if _newclass:count = _swig_property(_wb.LoadException_count_get, _wb.LoadException_count_set)
    def __init__(self, n=0): 
        this = _wb.new_LoadException(n)
        try: self.this.append(this)
        except: self.this = this
    def what(self): return _wb.LoadException_what(self)
    __swig_destroy__ = _wb.delete_LoadException
    __del__ = lambda self : None;
LoadException_swigregister = _wb.LoadException_swigregister
LoadException_swigregister(LoadException)

class TermNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TermNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TermNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_tree"] = _wb.TermNode__tree_set
    __swig_getmethods__["_tree"] = _wb.TermNode__tree_get
    if _newclass:_tree = _swig_property(_wb.TermNode__tree_get, _wb.TermNode__tree_set)
    __swig_setmethods__["_value"] = _wb.TermNode__value_set
    __swig_getmethods__["_value"] = _wb.TermNode__value_get
    if _newclass:_value = _swig_property(_wb.TermNode__value_get, _wb.TermNode__value_set)
    __swig_setmethods__["_i"] = _wb.TermNode__i_set
    __swig_getmethods__["_i"] = _wb.TermNode__i_get
    if _newclass:_i = _swig_property(_wb.TermNode__i_get, _wb.TermNode__i_set)
    def __init__(self, *args): 
        this = _wb.new_TermNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(self, *args): return _wb.TermNode___lt__(self, *args)
    __swig_destroy__ = _wb.delete_TermNode
    __del__ = lambda self : None;
TermNode_swigregister = _wb.TermNode_swigregister
TermNode_swigregister(TermNode)

class TermDict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TermDict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TermDict, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_root"] = _wb.TermDict__root_set
    __swig_getmethods__["_root"] = _wb.TermDict__root_get
    if _newclass:_root = _swig_property(_wb.TermDict__root_get, _wb.TermDict__root_set)
    __swig_setmethods__["_none_tree"] = _wb.TermDict__none_tree_set
    __swig_getmethods__["_none_tree"] = _wb.TermDict__none_tree_get
    if _newclass:_none_tree = _swig_property(_wb.TermDict__none_tree_get, _wb.TermDict__none_tree_set)
    def load(self, *args): return _wb.TermDict_load(self, *args)
    def add_term(self, *args): return _wb.TermDict_add_term(self, *args)
    def add_to_tree(self, *args): return _wb.TermDict_add_to_tree(self, *args)
    def get_from_tree(self, *args): return _wb.TermDict_get_from_tree(self, *args)
    def show(self, *args): return _wb.TermDict_show(self, *args)
    def __init__(self): 
        this = _wb.new_TermDict()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wb.delete_TermDict
    __del__ = lambda self : None;
TermDict_swigregister = _wb.TermDict_swigregister
TermDict_swigregister(TermDict)

class DictSegmentor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DictSegmentor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DictSegmentor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_dict"] = _wb.DictSegmentor__dict_set
    __swig_getmethods__["_dict"] = _wb.DictSegmentor__dict_get
    if _newclass:_dict = _swig_property(_wb.DictSegmentor__dict_get, _wb.DictSegmentor__dict_set)
    def segment(self, *args): return _wb.DictSegmentor_segment(self, *args)
    def segment1(self, *args): return _wb.DictSegmentor_segment1(self, *args)
    def segment2(self, *args): return _wb.DictSegmentor_segment2(self, *args)
    def load_dict_from_file(self, *args): return _wb.DictSegmentor_load_dict_from_file(self, *args)
    def load_dict(self, *args): return _wb.DictSegmentor_load_dict(self, *args)
    def __init__(self): 
        this = _wb.new_DictSegmentor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wb.delete_DictSegmentor
    __del__ = lambda self : None;
DictSegmentor_swigregister = _wb.DictSegmentor_swigregister
DictSegmentor_swigregister(DictSegmentor)


def get_term_pos(*args):
  return _wb.get_term_pos(*args)
get_term_pos = _wb.get_term_pos
# This file is compatible with both classic and new-style classes.



#!/usr/bin/python
import re
import ldap, os
import requests
from pyutil.redis.redis_proxy import make_redis_proxy_cli
from pyutil.program.conf2 import Conf

DATE_PATTERNS = [
    r'\-*tmp\-*[a-z0-9\-]+',
    r'/(date|gen_time|date_hour)=[\d_]{6,8,10,11}', r'/\d{8,10}', r'/\d{4}\-\d{2}\-\d{2}',
    r'/\d{8}_\d{2}', r'/\d{2}_\d{2}', r'/[a-z_]+=[0-9\-_]+',
    r'[\._\-]\d+', r'/\d+', r'/_DUMP_TEMPORARY', '/$'
]

reclient = None

def check_or_init_reclient():
    global reclient
    if reclient is None:
        reclient = make_redis_proxy_cli(
            Conf("/opt/tiger/ss_conf/ss/redis.conf").get_values('redis_hadoop_workpreserve'),
            socket_timeout=3.0, socket_connect_timeout=3.0, strict_redis=False)

def record_app(app):
    global reclient
    check_or_init_reclient()
    import json
    user = get_job_user(app)
    key = 'jinfo_%s' % app['id']
    app['owner'] = user
    app['normname'] = normalize_name(app['name'])
    reclient.set(key, json.dumps(app))

def get_app(id):
    global reclient
    check_or_init_reclient()
    import json
    key = 'jinfo_%s' % id
    j = reclient.get(key)
    if not j:
        return None
    return json.loads(j)

def normalize_name(n):
    n = re.sub(r'[0-9a-f]{10}', '', n)
    n = re.sub(r'\d{4}[\-_]?[0-9][0-9][\-_]?[0-9]*([_T][0-9][0-9])?(_[0-9a-f]{10})?_?', '', n)
    n = re.sub(r'[0-9]', '', n)
    return n

# Keep for compatibility
def get_ldap_users():
    ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
    trace_level = 0
    conn = ldap.initialize("ldaps://pool.ldap.d.byted.org", trace_level)
    # search user
    dn = "cn=hadoop,dc=bytedance,dc=com"
    pw = "vxJvLVe.44dnw"
    ret = conn.bind_s(dn, pw)
    ret = conn.search_s('ou=groups,dc=bytedance,dc=com', ldap.SCOPE_ONELEVEL)
    names = re.findall('uid=([a-zA-Z0-9\.]+)', str(ret))
    return set(names)

# Keep for compatibility
def get_ldap_team_mapping():
    ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
    trace_level = 0
    conn = ldap.initialize("ldaps://pool.ldap.d.byted.org", trace_level)
    # search user
    dn = "cn=hadoop,dc=bytedance,dc=com"
    pw = "vxJvLVe.44dnw"
    ret = conn.bind_s(dn, pw)
    ret = conn.search_s('ou=groups,dc=bytedance,dc=com', ldap.SCOPE_ONELEVEL)
    m = {}
    for g in ret:
        group = re.match('cn=([^,]+)', str(g[0])).group(1)
        names = re.findall('uid=([a-zA-Z0-9\.]+)', str(g[1]))
        for name in names:
            m[name] = group
    return m

def resolve_data_path(path):
    if path.find('/_temporary') > -1:
        path = path[:path.find('/_temporary')]
    else:
        path = os.path.dirname(path)
    changed = True
    while changed:
        changed = False
        for p in DATE_PATTERNS:
            s = re.split(p, path)
            if len(s) > 1:
                changed = True
                path = s[0]
    return path

LDAP_USERS = None
LDAP_TEAM_MAPPING = None

def check_or_init_ldap_users():
    global LDAP_USERS, LDAP_TEAM_MAPPING
    if LDAP_USERS is None:
        LDAP_USERS = get_ldap_users()
        LDAP_TEAM_MAPPING = get_ldap_team_mapping()

def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        pass

    try:
        import unicodedata
        unicodedata.numeric(s)
        return True
    except (TypeError, ValueError):
        pass

    return False


YAOP_AUTH_TOKEN = '0ed7ea2fce8d4801a9d79adde7a91211'
YAOP_SERVER_ADDRESS = 'http://yaop.inf.byted.org'


def get_job_user(job):
    def _is_user_valid(user):
        response = requests.get(
            '%s/v2/user/%s' % (YAOP_SERVER_ADDRESS, user),
            headers = { 'Authorization': 'YaopToken %s' % YAOP_AUTH_TOKEN })
        if response.status_code == 200:
            return True
        elif response.status_code == 404:
            return False
        else:
            response.raise_for_status()
            raise requests.HTTPError(
                "Unexpected status code: %s" % response.status_code,
                response=response)
    if 'user' in job and job['user'] not in {'root', 'tiger', 'yarn'}:
        return job['user']
    us = re.split("""[\-_]""", job['name'].replace('"', '').replace("'", ''))
    for u in us[::-1]:
        if is_number(u):
            continue
        if _is_user_valid(u):
            return u
        if u.find('.') > -1:
            for uu in u.split('.'):
                if _is_user_valid(uu):
                    return uu
    return None

if __name__ == '__main__':
    # test cases
    assert (get_job_user({'user': 'tiger', 'name': 'aaaa_hetianyi'}) == 'hetianyi')
    assert (get_job_user({'user': 'tiger', 'name': 'aaaa_hetianyi_20151151'}) == 'hetianyi')
    assert (get_job_user({'user': 'tiger', 'name': 'haruna.priest.user_profiles_daily_zhuxujia.CreateUserProfilesDailyPartition(date=2015-11-27, rewrite=True)'}) == 'zhuxujia')
    assert (get_job_user({'user': 'hetianyi', 'name': 'aaaa_tiger_20151151'}) == 'hetianyi')
    assert (get_job_user({'user': 'tiger', 'name': 'update_user_action_video_liyang.02'}) == 'liyang.02')
    assert (get_job_user({'user': 'tiger', 'name': '"hive_xupeng"'}) == 'xupeng')
    assert normalize_name('haruna.spark_stats.abtest.abtest_hourly.AbtestMetricUserNumHourlyBySpark_2016_03_30T08_37b300ec4b_kongqingbeng') == 'haruna.spark_stats.abtest.abtest_hourly.AbtestMetricUserNumHourlyBySpark__kongqingbeng'
    assert '/push/data/user_profiles_new_daily' == resolve_data_path('/push/data/user_profiles_new_daily/20160315/_temporary/1/_temporary/attempt_1458114640997_10287_m_000719_0/place/part-00719')
    assert '/recommend/data/parsed_app_log_hourly' == resolve_data_path('/recommend/data/parsed_app_log_hourly/20160317_11-tmp-c01afb92-a5b7-491d-a28e-afea3096dbb2')
    assert '/guchangsheng/tmp' == resolve_data_path('/guchangsheng/tmp/20160308/_temporary/1/_temporary/attempt_1458114640997_10398_r_000653_0/part-00653.deflate')
    assert '/data_stats/spark_stats/merged_impr_action_hourly' == resolve_data_path('/data_stats/spark_stats/merged_impr_action_hourly/2016031715--tmp--5436a51b-c3f7-4e7c-b4e1-8ef93a44fa5d')
    assert '/data_stats/spark_stats/merged_impr_action_hourly' == resolve_data_path('/data_stats/spark_stats/merged_impr_action_hourly/2016031715')
    assert '/data_stats/spark_stats/impression_stats_hourly' == resolve_data_path('/data_stats/spark_stats/impression_stats_hourly/2016031713/part-00363')
    assert '/data_stats/spark_stats/merged_impr_action_hourly' == resolve_data_path('/data_stats/spark_stats/merged_impr_action_hourly/2016031715--tmp--5436a51b-c3f7-4e7c-b4e1-8ef93a44fa5d/part-12334')
    assert '/user/tiger/warehouse/impression_stats_hourly' == resolve_data_path('/user/tiger/warehouse/impression_stats_hourly/date_hour=20160322_00')
    assert '/user/tiger/warehouse/merged_impr_action_hourly_joke' == resolve_data_path('/user/tiger/warehouse/merged_impr_action_hourly_joke/gen_time=20160322_03')
    assert '/app_data/app_launch' == resolve_data_path('/app_data/app_launch/2016/03/26/07')
    assert '/user/tiger/warehouse/merged_impr_action_daily' == resolve_data_path('/user/tiger/warehouse/merged_impr_action_daily/gen_time=2016-03-21')
    assert '/dusiliang/ad/stat_daily' == resolve_data_path('/dusiliang/ad/stat_daily/result.2016-03-26')
